story_id	example_id	conclusion	premises	premises-FOL	label	source
406	1131	Rina is a person who jokes about being addicted to caffeine or unaware that caffeine is a drug.	['All people who regularly drink coffee are dependent on caffeine.', 'People either regularly drink coffee or joke about being addicted to caffeine.', 'No one who jokes about being addicted to caffeine is unaware that caffeine is a drug.', 'Rina is either a student and unaware that caffeine is a drug, or neither a student nor unaware that caffeine is a drug.', 'If Rina is not a person dependent on caffeine and a student, then Rina is either a person dependent on caffeine and a student, or neither a person dependent on caffeine nor a student. ']	['∀x (Drinks(x) → Dependent(x))', '∀x (Drinks(x) ⊕ Jokes(x))', '∀x (Jokes(x) → ¬Unaware(x))', '(Student(rina) ∧ Unaware(rina)) ⊕ ¬(Student(rina) ∨ Unaware(rina))', '¬(Dependent(rina) ∧ Student(rina)) → (Dependent(rina) ∧ Student(rina)) ⊕ ¬(Dependent(rina) ∨ Student(rina))']	True	hyb
406	1132	Rina is either a person who jokes about being addicted to caffeine or is unaware that caffeine is a drug.	['All people who regularly drink coffee are dependent on caffeine.', 'People either regularly drink coffee or joke about being addicted to caffeine.', 'No one who jokes about being addicted to caffeine is unaware that caffeine is a drug.', 'Rina is either a student and unaware that caffeine is a drug, or neither a student nor unaware that caffeine is a drug.', 'If Rina is not a person dependent on caffeine and a student, then Rina is either a person dependent on caffeine and a student, or neither a person dependent on caffeine nor a student. ']	['∀x (Drinks(x) → Dependent(x))', '∀x (Drinks(x) ⊕ Jokes(x))', '∀x (Jokes(x) → ¬Unaware(x))', '(Student(rina) ∧ Unaware(rina)) ⊕ ¬(Student(rina) ∨ Unaware(rina))', '¬(Dependent(rina) ∧ Student(rina)) → (Dependent(rina) ∧ Student(rina)) ⊕ ¬(Dependent(rina) ∨ Student(rina))']	True	hyb
406	1133	Rina is either a person who regularly drinks coffee or a person who is unaware that caffeine is a drug.	['All people who regularly drink coffee are dependent on caffeine.', 'People either regularly drink coffee or joke about being addicted to caffeine.', 'No one who jokes about being addicted to caffeine is unaware that caffeine is a drug.', 'Rina is either a student and unaware that caffeine is a drug, or neither a student nor unaware that caffeine is a drug.', 'If Rina is not a person dependent on caffeine and a student, then Rina is either a person dependent on caffeine and a student, or neither a person dependent on caffeine nor a student. ']	['∀x (Drinks(x) → Dependent(x))', '∀x (Drinks(x) ⊕ Jokes(x))', '∀x (Jokes(x) → ¬Unaware(x))', '(Student(rina) ∧ Unaware(rina)) ⊕ ¬(Student(rina) ∨ Unaware(rina))', '¬(Dependent(rina) ∧ Student(rina)) → (Dependent(rina) ∧ Student(rina)) ⊕ ¬(Dependent(rina) ∨ Student(rina))']	False	hyb
406	1134	If Rina is either a person who jokes about being addicted to caffeine and a person who is unaware that caffeine is a drug, or neither a person who jokes about being addicted to caffeine nor a person who is unaware that caffeine is a drug, then Rina jokes about being addicted to caffeine and regularly drinks coffee.	['All people who regularly drink coffee are dependent on caffeine.', 'People either regularly drink coffee or joke about being addicted to caffeine.', 'No one who jokes about being addicted to caffeine is unaware that caffeine is a drug.', 'Rina is either a student and unaware that caffeine is a drug, or neither a student nor unaware that caffeine is a drug.', 'If Rina is not a person dependent on caffeine and a student, then Rina is either a person dependent on caffeine and a student, or neither a person dependent on caffeine nor a student. ']	['∀x (Drinks(x) → Dependent(x))', '∀x (Drinks(x) ⊕ Jokes(x))', '∀x (Jokes(x) → ¬Unaware(x))', '(Student(rina) ∧ Unaware(rina)) ⊕ ¬(Student(rina) ∨ Unaware(rina))', '¬(Dependent(rina) ∧ Student(rina)) → (Dependent(rina) ∧ Student(rina)) ⊕ ¬(Dependent(rina) ∨ Student(rina))']	True	hyb
8	20	Miroslav Venhoda loved music.	['Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.', 'Any choral conductor is a musician.', 'Some musicians love music.', 'Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.']	['Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)', '∀x (ChoralConductor(x) → Musician(x))', '∃x (Musician(x) → Love(x, music))', 'Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)']	Unknown	wiki
8	21	A Czech person wrote a book in 1946.	['Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.', 'Any choral conductor is a musician.', 'Some musicians love music.', 'Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.']	['Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)', '∀x (ChoralConductor(x) → Musician(x))', '∃x (Musician(x) → Love(x, music))', 'Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)']	True	wiki
8	22	No choral conductor specialized in the performance of Renaissance.	['Miroslav Venhoda was a Czech choral conductor who specialized in the performance of Renaissance and Baroque music.', 'Any choral conductor is a musician.', 'Some musicians love music.', 'Miroslav Venhoda published a book in 1946 called Method of Studying Gregorian Chant.']	['Czech(miroslav) ∧ ChoralConductor(miroslav) ∧ Specialize(miroslav, renaissance) ∧ Specialize(miroslav, baroque)', '∀x (ChoralConductor(x) → Musician(x))', '∃x (Musician(x) → Love(x, music))', 'Book(methodOfStudyingGregorianChant) ∧ Author(miroslav, methodOfStudyingGregorianChant) ∧ Publish(methodOfStudyingGregorianChant, year1946)']	False	wiki
463	1341	Sea eel is an eel.	['All eels are fish. ', 'No fish are plants. ', 'A thing is either a plant or animal.', 'Nothing that breathes is paper. ', 'All animals breathe.', 'If a sea eel is either an eel or a plant, then a sea eel is an eel or an animal.']	['∀x  (Eel (x)→  Fish (x))', '∀x  (Fish (x)→ ¬ Plant (x))', '∀x ( Plant (x) ∨  Animal (x))', '∀x  (Breathe (x)→ ¬ Paper (x))', '∀x  (Animal (x)→  Breathe (x))', ' Eel (seaEel) ⊕ Plant (seaEel) → Eel (seaEel) ∨ Animal (seaEel) ']	Unknown	hyb
463	1342	Sea eel is a paper.	['All eels are fish. ', 'No fish are plants. ', 'A thing is either a plant or animal.', 'Nothing that breathes is paper. ', 'All animals breathe.', 'If a sea eel is either an eel or a plant, then a sea eel is an eel or an animal.']	['∀x  (Eel (x)→  Fish (x))', '∀x  (Fish (x)→ ¬ Plant (x))', '∀x ( Plant (x) ∨  Animal (x))', '∀x  (Breathe (x)→ ¬ Paper (x))', '∀x  (Animal (x)→  Breathe (x))', ' Eel (seaEel) ⊕ Plant (seaEel) → Eel (seaEel) ∨ Animal (seaEel) ']	False	hyb
463	1343	Sea eel breathes or is a paper.	['All eels are fish. ', 'No fish are plants. ', 'A thing is either a plant or animal.', 'Nothing that breathes is paper. ', 'All animals breathe.', 'If a sea eel is either an eel or a plant, then a sea eel is an eel or an animal.']	['∀x  (Eel (x)→  Fish (x))', '∀x  (Fish (x)→ ¬ Plant (x))', '∀x ( Plant (x) ∨  Animal (x))', '∀x  (Breathe (x)→ ¬ Paper (x))', '∀x  (Animal (x)→  Breathe (x))', ' Eel (seaEel) ⊕ Plant (seaEel) → Eel (seaEel) ∨ Animal (seaEel) ']	True	hyb
133	393	A five-story building is built in 1915.	['The Blake McFall Company Building is a commercial warehouse listed on the National Register of Historic Places.', 'The Blake McFall Company Building was added to the National Register of Historic Places in 1990.', 'The Emmet Building is a five-story building in Portland, Oregon.', 'The Emmet Building was built in 1915.', 'The Emmet Building is another name for the Blake McFall Company Building.', 'John works at the Emmet Building.']	['∀x (Blake(x) → Building(x))', '∀x (Blake(x) → Historic(x, year1990))', '∀x (Emmet(x) → Building(x) ∧ FiveStory(x) ∧ Locate(x, portland))', '∀x (Emmet(x) → Construct(x, year1915))', '∀x (Emmet(x) ↔ Blake(x))', '∃x (Emmet(x) ∧ Work(john, x))']	True	wiki
133	394	The Blake McFall Company Building is located in Portland, Oregon.	['The Blake McFall Company Building is a commercial warehouse listed on the National Register of Historic Places.', 'The Blake McFall Company Building was added to the National Register of Historic Places in 1990.', 'The Emmet Building is a five-story building in Portland, Oregon.', 'The Emmet Building was built in 1915.', 'The Emmet Building is another name for the Blake McFall Company Building.', 'John works at the Emmet Building.']	['∀x (Blake(x) → Building(x))', '∀x (Blake(x) → Historic(x, year1990))', '∀x (Emmet(x) → Building(x) ∧ FiveStory(x) ∧ Locate(x, portland))', '∀x (Emmet(x) → Construct(x, year1915))', '∀x (Emmet(x) ↔ Blake(x))', '∃x (Emmet(x) ∧ Work(john, x))']	True	wiki
133	395	John started his current job in 1990.	['The Blake McFall Company Building is a commercial warehouse listed on the National Register of Historic Places.', 'The Blake McFall Company Building was added to the National Register of Historic Places in 1990.', 'The Emmet Building is a five-story building in Portland, Oregon.', 'The Emmet Building was built in 1915.', 'The Emmet Building is another name for the Blake McFall Company Building.', 'John works at the Emmet Building.']	['∀x (Blake(x) → Building(x))', '∀x (Blake(x) → Historic(x, year1990))', '∀x (Emmet(x) → Building(x) ∧ FiveStory(x) ∧ Locate(x, portland))', '∀x (Emmet(x) → Construct(x, year1915))', '∀x (Emmet(x) ↔ Blake(x))', '∃x (Emmet(x) ∧ Work(john, x))']	Unknown	wiki
226	640	William Dickinson did not get a seat in the Parliament.	['William Dickinson was a British politician who sat in the House of Commons', 'William Dickinson attended Westminster school for high school and then the University of Edinburgh.', 'The University of Edinburgh is a university located in the United Kingdom.', 'William Dickinson supported the Portland Whigs.', 'People who supported the Portland Whigs did not get a seat in the Parliament.']	['BritishPolitician(williamdickinson) ∧ SatInHouseOfCommons(williamdickinson)', 'Attended(williamdickinson, westminster) ∧ Highschool(westminster) ∧ Attended(williamdickinson, universityofedinburgh)', 'LocatedIn(universityofedinburgh, unitedkingdom) ∧ University(universityofedinburgh)', 'Supported(williamdickinson, portlandwhigs)', '∀x (Supported(x, portlandwhigs) → ¬SeatInParliament(x))']	True	wiki
226	641	William Dickinson went to schools located in the United Kingdom for both high school and university.	['William Dickinson was a British politician who sat in the House of Commons', 'William Dickinson attended Westminster school for high school and then the University of Edinburgh.', 'The University of Edinburgh is a university located in the United Kingdom.', 'William Dickinson supported the Portland Whigs.', 'People who supported the Portland Whigs did not get a seat in the Parliament.']	['BritishPolitician(williamdickinson) ∧ SatInHouseOfCommons(williamdickinson)', 'Attended(williamdickinson, westminster) ∧ Highschool(westminster) ∧ Attended(williamdickinson, universityofedinburgh)', 'LocatedIn(universityofedinburgh, unitedkingdom) ∧ University(universityofedinburgh)', 'Supported(williamdickinson, portlandwhigs)', '∀x (Supported(x, portlandwhigs) → ¬SeatInParliament(x))']	Unknown	wiki
226	642	William Dickinson attended university in the United Kingdom.	['William Dickinson was a British politician who sat in the House of Commons', 'William Dickinson attended Westminster school for high school and then the University of Edinburgh.', 'The University of Edinburgh is a university located in the United Kingdom.', 'William Dickinson supported the Portland Whigs.', 'People who supported the Portland Whigs did not get a seat in the Parliament.']	['BritishPolitician(williamdickinson) ∧ SatInHouseOfCommons(williamdickinson)', 'Attended(williamdickinson, westminster) ∧ Highschool(westminster) ∧ Attended(williamdickinson, universityofedinburgh)', 'LocatedIn(universityofedinburgh, unitedkingdom) ∧ University(universityofedinburgh)', 'Supported(williamdickinson, portlandwhigs)', '∀x (Supported(x, portlandwhigs) → ¬SeatInParliament(x))']	True	wiki
226	643	William Dickinson sat in the House of Commons.	['William Dickinson was a British politician who sat in the House of Commons', 'William Dickinson attended Westminster school for high school and then the University of Edinburgh.', 'The University of Edinburgh is a university located in the United Kingdom.', 'William Dickinson supported the Portland Whigs.', 'People who supported the Portland Whigs did not get a seat in the Parliament.']	['BritishPolitician(williamdickinson) ∧ SatInHouseOfCommons(williamdickinson)', 'Attended(williamdickinson, westminster) ∧ Highschool(westminster) ∧ Attended(williamdickinson, universityofedinburgh)', 'LocatedIn(universityofedinburgh, unitedkingdom) ∧ University(universityofedinburgh)', 'Supported(williamdickinson, portlandwhigs)', '∀x (Supported(x, portlandwhigs) → ¬SeatInParliament(x))']	True	wiki
247	695	Danil knows LanguageA.	['LanguageA is a universal language', 'If a universal language exists, then for every two people if they both know the same universal language they can communicate.', 'Katya cannot communicate with Danil.', 'Katya knows LanguageA. ']	['UniversalLanguage(languageA)', '∀x ∀y (∃z (Know(x, z) ∧ Know(y, z) ∧ UniversalLanguage(z)) → Communicate(x, y))', 'Know(katya, languageA)', '¬Communicate(katya, danil)']	False	wiki
422	1197	James goes to cinemas every week.	['All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ', 'Some customers go to cinemas every week', 'Customers either subscribe to AMC service or HBO service. ', 'Customers who prefer TV series more and will not watch TV series in cinemas.', 'All customers who subscribe to HBO services prefer TV series to movies. ', 'James watches TV series in cinemas. ']	['∀x (AMC(x) → ThreeMovies(x))', '∃x (CinemaEveryWeek(x))', '∀x (AMC(x) ∨ HBO(x))', '∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))', '∀x (HBO(x) → PreferTVSeries(x))', 'WatchTVInCinema(james)']	Unknown	hyb
422	1198	James does not go to cinemas every week.	['All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ', 'Some customers go to cinemas every week', 'Customers either subscribe to AMC service or HBO service. ', 'Customers who prefer TV series more and will not watch TV series in cinemas.', 'All customers who subscribe to HBO services prefer TV series to movies. ', 'James watches TV series in cinemas. ']	['∀x (AMC(x) → ThreeMovies(x))', '∃x (CinemaEveryWeek(x))', '∀x (AMC(x) ∨ HBO(x))', '∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))', '∀x (HBO(x) → PreferTVSeries(x))', 'WatchTVInCinema(james)']	Unknown	hyb
422	1199	James goes to cinemas every week or watches 3 movies every week without any additional fees.	['All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ', 'Some customers go to cinemas every week', 'Customers either subscribe to AMC service or HBO service. ', 'Customers who prefer TV series more and will not watch TV series in cinemas.', 'All customers who subscribe to HBO services prefer TV series to movies. ', 'James watches TV series in cinemas. ']	['∀x (AMC(x) → ThreeMovies(x))', '∃x (CinemaEveryWeek(x))', '∀x (AMC(x) ∨ HBO(x))', '∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))', '∀x (HBO(x) → PreferTVSeries(x))', 'WatchTVInCinema(james)']	True	hyb
422	1200	If James does not both go to cinemas every week and subscribe to HBO service, then James is either available to watch 3 movies every week without any additional fees or he prefers TV more.	['All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ', 'Some customers go to cinemas every week', 'Customers either subscribe to AMC service or HBO service. ', 'Customers who prefer TV series more and will not watch TV series in cinemas.', 'All customers who subscribe to HBO services prefer TV series to movies. ', 'James watches TV series in cinemas. ']	['∀x (AMC(x) → ThreeMovies(x))', '∃x (CinemaEveryWeek(x))', '∀x (AMC(x) ∨ HBO(x))', '∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))', '∀x (HBO(x) → PreferTVSeries(x))', 'WatchTVInCinema(james)']	True	hyb
422	1201	If James is available to watch 3 movies every week without any additional fees and he watches TV series in cinemas, then he goes to cinemas every week and prefers TV series more.	['All customers who are subscribed to AMC List are available to watch 3 movies every week without any additional fees. ', 'Some customers go to cinemas every week', 'Customers either subscribe to AMC service or HBO service. ', 'Customers who prefer TV series more and will not watch TV series in cinemas.', 'All customers who subscribe to HBO services prefer TV series to movies. ', 'James watches TV series in cinemas. ']	['∀x (AMC(x) → ThreeMovies(x))', '∃x (CinemaEveryWeek(x))', '∀x (AMC(x) ∨ HBO(x))', '∀x (PreferTVSeries(x) → ¬WatchTVInCinema(x))', '∀x (HBO(x) → PreferTVSeries(x))', 'WatchTVInCinema(james)']	False	hyb
193	553	In La Liga 2021-2022, Real Madrid ranks higher than Barcelona.	['A La Liga soccer team ranks higher than another if it receives more points.', 'If two La Liga soccer teams recieve the same points, the team which recieves more points from the games between the two teams ranks higher.', 'Real Madrid and Barcelona are both La Liga soccer teams.', 'In La Liga 2021-2022, Real Madrid recieves 86 points and Barcelon recieves 73 points.', 'In La Liga 2021-2022, Real Madrid and Barcelona both recieve 3 points from the games between them.']	['∀x ∀y (LaLiga(x) ∧ LaLiga(y) ∧ MorePoints(x, y) → HigherRank(x, y))', '∀x ∀y (LaLiga(x) ∧ LaLiga(y) ∧ ¬MorePoints(x, y) ∧ ¬MorePoints(y, x) ∧ MorePointsInGameBetween(x, y) → HigherRank(x, y))', 'LaLiga(realMadrid) ∧ LaLiga(barcelona)', 'MorePoints(realMadrid, barcelona)', '¬MorePointsInGameBetween(realMadrid, barcelona) ∧ ¬MorePointsInGameBetween(barcelona, realMadrid)']	True	wiki
193	554	In La Liga 2021-2022, Barcelona ranks higher than Real Madrid.	['A La Liga soccer team ranks higher than another if it receives more points.', 'If two La Liga soccer teams recieve the same points, the team which recieves more points from the games between the two teams ranks higher.', 'Real Madrid and Barcelona are both La Liga soccer teams.', 'In La Liga 2021-2022, Real Madrid recieves 86 points and Barcelon recieves 73 points.', 'In La Liga 2021-2022, Real Madrid and Barcelona both recieve 3 points from the games between them.']	['∀x ∀y (LaLiga(x) ∧ LaLiga(y) ∧ MorePoints(x, y) → HigherRank(x, y))', '∀x ∀y (LaLiga(x) ∧ LaLiga(y) ∧ ¬MorePoints(x, y) ∧ ¬MorePoints(y, x) ∧ MorePointsInGameBetween(x, y) → HigherRank(x, y))', 'LaLiga(realMadrid) ∧ LaLiga(barcelona)', 'MorePoints(realMadrid, barcelona)', '¬MorePointsInGameBetween(realMadrid, barcelona) ∧ ¬MorePointsInGameBetween(barcelona, realMadrid)']	False	wiki
82	250	Tom uses the zip code 98199.	['Lawton Park is a neighbourhood in Seattle. ', 'All citizens of Lawton Park use the zip code 98199. ', 'Tom is a citizen of Lawton Park.', 'Daniel uses the zip code 98199. ']	['Neighbourhoodin(lawtonPark, seattle)', '∀x (Citizenof(x, lawtonPark) → Usezipcode(x, number98199))', 'Citizenof(tom, lawtonPark)', 'Usezipcode(daniel, number98199)']	True	wiki
82	251	Tom doesn't use the zip code 98199.	['Lawton Park is a neighbourhood in Seattle. ', 'All citizens of Lawton Park use the zip code 98199. ', 'Tom is a citizen of Lawton Park.', 'Daniel uses the zip code 98199. ']	['Neighbourhoodin(lawtonPark, seattle)', '∀x (Citizenof(x, lawtonPark) → Usezipcode(x, number98199))', 'Citizenof(tom, lawtonPark)', 'Usezipcode(daniel, number98199)']	False	wiki
82	252	Tom is a citizen of Washington.	['Lawton Park is a neighbourhood in Seattle. ', 'All citizens of Lawton Park use the zip code 98199. ', 'Tom is a citizen of Lawton Park.', 'Daniel uses the zip code 98199. ']	['Neighbourhoodin(lawtonPark, seattle)', '∀x (Citizenof(x, lawtonPark) → Usezipcode(x, number98199))', 'Citizenof(tom, lawtonPark)', 'Usezipcode(daniel, number98199)']	Unknown	wiki
82	253	Daniel is a citizen of Lawton Park.	['Lawton Park is a neighbourhood in Seattle. ', 'All citizens of Lawton Park use the zip code 98199. ', 'Tom is a citizen of Lawton Park.', 'Daniel uses the zip code 98199. ']	['Neighbourhoodin(lawtonPark, seattle)', '∀x (Citizenof(x, lawtonPark) → Usezipcode(x, number98199))', 'Citizenof(tom, lawtonPark)', 'Usezipcode(daniel, number98199)']	Unknown	wiki
86	262	Tiffany T. Alston was suspended from the Maryland House of Delegates.	['If a legislator is found guilty of stealing government funds, they will be suspended from office.', "Tiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013.", 'Tiffany T. Alston was found guilty of stealing government funds in 2012.']	['∀x (IsLegislator(x) ∧ StealsFunds(x) → Suspended(x))', 'IsLegislator(tiffanyTAlston)', 'StealsFunds(tiffanyTAlston)']	True	wiki
86	263	Tiffany T. Alston was not suspended from the Maryland House of Delegates.	['If a legislator is found guilty of stealing government funds, they will be suspended from office.', "Tiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013.", 'Tiffany T. Alston was found guilty of stealing government funds in 2012.']	['∀x (IsLegislator(x) ∧ StealsFunds(x) → Suspended(x))', 'IsLegislator(tiffanyTAlston)', 'StealsFunds(tiffanyTAlston)']	False	wiki
86	264	Tiffany T. Alston went to prison for stealing government funds.	['If a legislator is found guilty of stealing government funds, they will be suspended from office.', "Tiffany T. Alston was a legislator in Maryland's House of Delegates from 2011 to 2013.", 'Tiffany T. Alston was found guilty of stealing government funds in 2012.']	['∀x (IsLegislator(x) ∧ StealsFunds(x) → Suspended(x))', 'IsLegislator(tiffanyTAlston)', 'StealsFunds(tiffanyTAlston)']	Unknown	wiki
171	494	If you step on a stonefish and don’t use an antivenom, it will cause death.	['Some fish may sting.', 'Stonefish is a fish.', 'It stings to step on a stonefish.', 'Stonefish stings cause death if not treated.', 'To treat stonefish stings, apply heat to the affected area or use an antivenom.']	['∃x ∃y (Fish(x) → Sting(x,y))', 'Fish(stonefish)', '∀x (StepOn(stonefish, x) → Sting(stonefish, x))', '∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeath(x))', '∀x (Sting(stonefish, x) ∧ (ApplyHeat(x) ∨ UseAntivenom(x)) → Treated(x))']	Unknown	wiki
171	495	Stings of some fish can cause death if not treated.	['Some fish may sting.', 'Stonefish is a fish.', 'It stings to step on a stonefish.', 'Stonefish stings cause death if not treated.', 'To treat stonefish stings, apply heat to the affected area or use an antivenom.']	['∃x ∃y (Fish(x) → Sting(x,y))', 'Fish(stonefish)', '∀x (StepOn(stonefish, x) → Sting(stonefish, x))', '∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeath(x))', '∀x (Sting(stonefish, x) ∧ (ApplyHeat(x) ∨ UseAntivenom(x)) → Treated(x))']	True	wiki
171	496	If you step on a stonefish and apply heat to the affected area, stings will cause death.	['Some fish may sting.', 'Stonefish is a fish.', 'It stings to step on a stonefish.', 'Stonefish stings cause death if not treated.', 'To treat stonefish stings, apply heat to the affected area or use an antivenom.']	['∃x ∃y (Fish(x) → Sting(x,y))', 'Fish(stonefish)', '∀x (StepOn(stonefish, x) → Sting(stonefish, x))', '∀x (Sting(stonefish, x) ∧ ¬Treated(x) → CauseDeath(x))', '∀x (Sting(stonefish, x) ∧ (ApplyHeat(x) ∨ UseAntivenom(x)) → Treated(x))']	Unknown	wiki
417	1178	L-2021 is in the library.	['Some monitors produced by LG have a type-c port.', 'If the monitor has a type-c port, then it is not produced by AOC.', 'All monitors in the library are produced by AOC. ', 'L-2021 is either in the library or has a type-c port.', 'L-2021 is either produced by AOC and produced by LG, or neither produced by AOC nor produced by LG.']	['∃x (LG(x) ∧ TypeC(x))', '∀x (TypeC(x) → ¬AOC(x))', '∀x (Library(x) → AOC(x))', 'Library(l-2021) ⊕ TypeC(l-2021) ', '¬(AOC(l-2021) ⊕ LG(l-2021))']	Unknown	hyb
417	1179	L-2021 is either in the library or produced by LG.	['Some monitors produced by LG have a type-c port.', 'If the monitor has a type-c port, then it is not produced by AOC.', 'All monitors in the library are produced by AOC. ', 'L-2021 is either in the library or has a type-c port.', 'L-2021 is either produced by AOC and produced by LG, or neither produced by AOC nor produced by LG.']	['∃x (LG(x) ∧ TypeC(x))', '∀x (TypeC(x) → ¬AOC(x))', '∀x (Library(x) → AOC(x))', 'Library(l-2021) ⊕ TypeC(l-2021) ', '¬(AOC(l-2021) ⊕ LG(l-2021))']	False	hyb
417	1180	L-2021 either has a type-c port or is produced by LG.	['Some monitors produced by LG have a type-c port.', 'If the monitor has a type-c port, then it is not produced by AOC.', 'All monitors in the library are produced by AOC. ', 'L-2021 is either in the library or has a type-c port.', 'L-2021 is either produced by AOC and produced by LG, or neither produced by AOC nor produced by LG.']	['∃x (LG(x) ∧ TypeC(x))', '∀x (TypeC(x) → ¬AOC(x))', '∀x (Library(x) → AOC(x))', 'Library(l-2021) ⊕ TypeC(l-2021) ', '¬(AOC(l-2021) ⊕ LG(l-2021))']	True	hyb
417	1181	If L-2021 is either in the library and produced by LG, or neither in the library nor produced by LG,  then L-2021 neither has a type-c port nor is produced by LG.	['Some monitors produced by LG have a type-c port.', 'If the monitor has a type-c port, then it is not produced by AOC.', 'All monitors in the library are produced by AOC. ', 'L-2021 is either in the library or has a type-c port.', 'L-2021 is either produced by AOC and produced by LG, or neither produced by AOC nor produced by LG.']	['∃x (LG(x) ∧ TypeC(x))', '∀x (TypeC(x) → ¬AOC(x))', '∀x (Library(x) → AOC(x))', 'Library(l-2021) ⊕ TypeC(l-2021) ', '¬(AOC(l-2021) ⊕ LG(l-2021))']	False	hyb
417	1182	If L-2021 is either produced by LG and produced by AOC or neither produced by LG nor produced by AOC,  then L-2021 is either in the library or produced by LG.	['Some monitors produced by LG have a type-c port.', 'If the monitor has a type-c port, then it is not produced by AOC.', 'All monitors in the library are produced by AOC. ', 'L-2021 is either in the library or has a type-c port.', 'L-2021 is either produced by AOC and produced by LG, or neither produced by AOC nor produced by LG.']	['∃x (LG(x) ∧ TypeC(x))', '∀x (TypeC(x) → ¬AOC(x))', '∀x (Library(x) → AOC(x))', 'Library(l-2021) ⊕ TypeC(l-2021) ', '¬(AOC(l-2021) ⊕ LG(l-2021))']	False	hyb
377	1010	Jeremy has a busy schedule without time to cook.	['People eat meat regularly or are vegetation.', 'If people eat meat regularly, then they enjoy eating hamburgers and steaks.', 'All people who are vegetarian are conscious of the environment or their health.', 'If people are conscious about the environment or their health, then they do not go to fast food places often.', 'If people have busy schedules without time to cook, then they go to fast food places often.', 'If Jeremy does not both go to fast food places often and is conscious about the environment or their health, then he goes to fast food places often.']	['∀x (Meat(x) ∨ Vegetarian(x))', '∀x (Meat(x) → Hamburgers(x))', '∀x (Vegetarian(x) → Conscious(x))', '∀x (Conscious(x) → ¬FastFood(x))', '∀x (Busy(x) → FastFood(x))', '¬(FastFood(jeremy) ∧ Conscious(jeremy)) → FastFood(jeremy)']	Unknown	hyb
377	1011	Jeremy has a busy schedule without time to cook or enjoy eating hamburgers and steaks.	['People eat meat regularly or are vegetation.', 'If people eat meat regularly, then they enjoy eating hamburgers and steaks.', 'All people who are vegetarian are conscious of the environment or their health.', 'If people are conscious about the environment or their health, then they do not go to fast food places often.', 'If people have busy schedules without time to cook, then they go to fast food places often.', 'If Jeremy does not both go to fast food places often and is conscious about the environment or their health, then he goes to fast food places often.']	['∀x (Meat(x) ∨ Vegetarian(x))', '∀x (Meat(x) → Hamburgers(x))', '∀x (Vegetarian(x) → Conscious(x))', '∀x (Conscious(x) → ¬FastFood(x))', '∀x (Busy(x) → FastFood(x))', '¬(FastFood(jeremy) ∧ Conscious(jeremy)) → FastFood(jeremy)']	True	hyb
377	1012	If Jeremy has a busy schedule without time to cook or enjoy eating hamburgers and steaks, then Jeremy neither has a busy schedule without having time to cook nor enjoys eating hamburgers and steaks.	['People eat meat regularly or are vegetation.', 'If people eat meat regularly, then they enjoy eating hamburgers and steaks.', 'All people who are vegetarian are conscious of the environment or their health.', 'If people are conscious about the environment or their health, then they do not go to fast food places often.', 'If people have busy schedules without time to cook, then they go to fast food places often.', 'If Jeremy does not both go to fast food places often and is conscious about the environment or their health, then he goes to fast food places often.']	['∀x (Meat(x) ∨ Vegetarian(x))', '∀x (Meat(x) → Hamburgers(x))', '∀x (Vegetarian(x) → Conscious(x))', '∀x (Conscious(x) → ¬FastFood(x))', '∀x (Busy(x) → FastFood(x))', '¬(FastFood(jeremy) ∧ Conscious(jeremy)) → FastFood(jeremy)']	False	hyb
180	521	The project Sam is doing is written in C++.	['Sam is doing a project.', 'A project is written either in C++ or in Python.', 'If Sam does a project written in Python, he will not use a Mac.', 'Sam is using a Mac.', 'If Sam uses a Mac, he will play a song.', 'If a song is not "Perfect", Sam will never play it.']	['∃x (Project(x) ∧ Do(sam, x))', ' ∀x (Project(x) → (WrittenIn(x, python) ⊕ WrittenIn(x, c++)))', ' ∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))', ' Use(sam, mac)', ' Use(sam, mac) → ∃x (Song(x) ∧ Play(sam, x))', ' ∀x (¬Be(x, perfect) → ¬Play(sam, x))']	True	wiki
180	522	The song Sam is playing is "Perfect".	['Sam is doing a project.', 'A project is written either in C++ or in Python.', 'If Sam does a project written in Python, he will not use a Mac.', 'Sam is using a Mac.', 'If Sam uses a Mac, he will play a song.', 'If a song is not "Perfect", Sam will never play it.']	['∃x (Project(x) ∧ Do(sam, x))', ' ∀x (Project(x) → (WrittenIn(x, python) ⊕ WrittenIn(x, c++)))', ' ∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))', ' Use(sam, mac)', ' Use(sam, mac) → ∃x (Song(x) ∧ Play(sam, x))', ' ∀x (¬Be(x, perfect) → ¬Play(sam, x))']	True	wiki
180	523	If a song is "Perfect", Sam will play it.	['Sam is doing a project.', 'A project is written either in C++ or in Python.', 'If Sam does a project written in Python, he will not use a Mac.', 'Sam is using a Mac.', 'If Sam uses a Mac, he will play a song.', 'If a song is not "Perfect", Sam will never play it.']	['∃x (Project(x) ∧ Do(sam, x))', ' ∀x (Project(x) → (WrittenIn(x, python) ⊕ WrittenIn(x, c++)))', ' ∀x (Project(x) ∧ WrittenIn(x, python) ∧ Do(sam, x) → ¬Use(sam, mac))', ' Use(sam, mac)', ' Use(sam, mac) → ∃x (Song(x) ∧ Play(sam, x))', ' ∀x (¬Be(x, perfect) → ¬Play(sam, x))']	Unknown	wiki
254	703	Some pets do not have fur.	['All rabbits have fur', 'Some pets are rabbits.']	['∀x (Rabbit(x) → HasFur(x))', '∃x (Pet(x) ∧ Reptile(x))']	Unknown	wiki
477	1390	Tiktok is a program.	['All video applications are software.', 'All YouTube-related applications are video applications. ', 'An APP is either related to YouTube or Instagram.', 'All Instagram is entertainment. ', 'All software is programmed. ', 'All entertainments are interesting.', 'If something is interesting, then it is good.', 'TikTok is not good.']	['∀x (App(x) → Software(x))', '∀x (Youtube(x) → App(x))', '∀x (Youtube(x) ∨ Instagram(x))', '∀x (Instagram(x) → Entertainment(x))', '∀x (Software(x) → Program(x))', '∀x (Entertainment(x) → Interesting(x))', '∀x (Interesting(x) → Good(x))', '¬Good(tiktok)']	True	hyb
477	1391	Tiktok is either good or a program.	['All video applications are software.', 'All YouTube-related applications are video applications. ', 'An APP is either related to YouTube or Instagram.', 'All Instagram is entertainment. ', 'All software is programmed. ', 'All entertainments are interesting.', 'If something is interesting, then it is good.', 'TikTok is not good.']	['∀x (App(x) → Software(x))', '∀x (Youtube(x) → App(x))', '∀x (Youtube(x) ∨ Instagram(x))', '∀x (Instagram(x) → Entertainment(x))', '∀x (Software(x) → Program(x))', '∀x (Entertainment(x) → Interesting(x))', '∀x (Interesting(x) → Good(x))', '¬Good(tiktok)']	True	hyb
477	1392	Tiktok is not both related to youtube and a program.	['All video applications are software.', 'All YouTube-related applications are video applications. ', 'An APP is either related to YouTube or Instagram.', 'All Instagram is entertainment. ', 'All software is programmed. ', 'All entertainments are interesting.', 'If something is interesting, then it is good.', 'TikTok is not good.']	['∀x (App(x) → Software(x))', '∀x (Youtube(x) → App(x))', '∀x (Youtube(x) ∨ Instagram(x))', '∀x (Instagram(x) → Entertainment(x))', '∀x (Software(x) → Program(x))', '∀x (Entertainment(x) → Interesting(x))', '∀x (Interesting(x) → Good(x))', '¬Good(tiktok)']	False	hyb
477	1393	Tiktok is either related to youtube or a program.	['All video applications are software.', 'All YouTube-related applications are video applications. ', 'An APP is either related to YouTube or Instagram.', 'All Instagram is entertainment. ', 'All software is programmed. ', 'All entertainments are interesting.', 'If something is interesting, then it is good.', 'TikTok is not good.']	['∀x (App(x) → Software(x))', '∀x (Youtube(x) → App(x))', '∀x (Youtube(x) ∨ Instagram(x))', '∀x (Instagram(x) → Entertainment(x))', '∀x (Software(x) → Program(x))', '∀x (Entertainment(x) → Interesting(x))', '∀x (Interesting(x) → Good(x))', '¬Good(tiktok)']	False	hyb
104	317	There are no unincorporated communities along Kentucky Route 32.	['Ordinary is an unincorporated community.', 'Located within Elliot County, Ordinary is on Kentucky Route 32.', 'Ordinary is located northwest of Sandy Hook.']	['UnincorporatedCommunity(ordinary)', 'In(ordinary, elliotcounty) ∧ On(ordinary, kentuckyroute32)', 'NorthwestOf(ordinary, sandyhook)']	False	wiki
104	318	There is an unincorporated community in Elliot County.	['Ordinary is an unincorporated community.', 'Located within Elliot County, Ordinary is on Kentucky Route 32.', 'Ordinary is located northwest of Sandy Hook.']	['UnincorporatedCommunity(ordinary)', 'In(ordinary, elliotcounty) ∧ On(ordinary, kentuckyroute32)', 'NorthwestOf(ordinary, sandyhook)']	True	wiki
348	926	Susan is a college student.	['All young adults go on a diet.', 'All college students are young adults.', 'All Yale students are college students.', 'Someone is either a Yale student or a Harvard student.', 'All Harvard students are diligent.', 'If Susan is a Harvard student, then she is a young adult.', 'If Susan is a Yale student, then she does not go on a diet.']	['∀x (YoungAdult(x) → GoOnDiet(x))', '∀x (CollegeStudent(x) → YoungAdult(x))', '∀x (YaleStudent(x) → CollegeStudent(x))', '∀x (YaleStudent(x) ∨ HarvardStudent(x))', '∀x (HarvardStudent(x) → Diligent(x))', 'HarvardStudent(susan) → YoungAdult(susan)', 'YaleStudent(susan) → ¬GoOnDiet(susan)']	Unknown	hyb
348	927	Susan goes on a diet and is diligent.	['All young adults go on a diet.', 'All college students are young adults.', 'All Yale students are college students.', 'Someone is either a Yale student or a Harvard student.', 'All Harvard students are diligent.', 'If Susan is a Harvard student, then she is a young adult.', 'If Susan is a Yale student, then she does not go on a diet.']	['∀x (YoungAdult(x) → GoOnDiet(x))', '∀x (CollegeStudent(x) → YoungAdult(x))', '∀x (YaleStudent(x) → CollegeStudent(x))', '∀x (YaleStudent(x) ∨ HarvardStudent(x))', '∀x (HarvardStudent(x) → Diligent(x))', 'HarvardStudent(susan) → YoungAdult(susan)', 'YaleStudent(susan) → ¬GoOnDiet(susan)']	True	hyb
348	928	Susan does not go on a diet and is diligent.	['All young adults go on a diet.', 'All college students are young adults.', 'All Yale students are college students.', 'Someone is either a Yale student or a Harvard student.', 'All Harvard students are diligent.', 'If Susan is a Harvard student, then she is a young adult.', 'If Susan is a Yale student, then she does not go on a diet.']	['∀x (YoungAdult(x) → GoOnDiet(x))', '∀x (CollegeStudent(x) → YoungAdult(x))', '∀x (YaleStudent(x) → CollegeStudent(x))', '∀x (YaleStudent(x) ∨ HarvardStudent(x))', '∀x (HarvardStudent(x) → Diligent(x))', 'HarvardStudent(susan) → YoungAdult(susan)', 'YaleStudent(susan) → ¬GoOnDiet(susan)']	False	hyb
147	432	Inside Out was a punk band.	['Vic DiCara plays guitar and bass.', 'The only style of music Vic DiCara plays is punk music.', 'Vic DiCara played in the band Inside Out.']	['Play(vicdicara, guitar) ∧ Play(vicdicara, bass)', '¬(∃x (Music (vicdicara, punk) ∧ Music (vicdicara, x)))', 'Band(vicdicara, insideOut)']	Unknown	wiki
147	433	A musician of Inside Out plays bass.	['Vic DiCara plays guitar and bass.', 'The only style of music Vic DiCara plays is punk music.', 'Vic DiCara played in the band Inside Out.']	['Play(vicdicara, guitar) ∧ Play(vicdicara, bass)', '¬(∃x (Music (vicdicara, punk) ∧ Music (vicdicara, x)))', 'Band(vicdicara, insideOut)']	True	wiki
346	918	Amy is an athlete.	['All athletes are good at sports.', 'All Olympic gold medal winners are good athletes.', 'No scientists are good at sports.', 'All Nobel laureates are scientists.', 'Amy is good at sports or Amy is an Olympic gold medal winner.', 'If Amy is not a Nobel laureate, then Amy is not an Olympic gold medal winner.']	['∀x (Athlete(x) → GoodAtSports(x))', '∀x (OlympicGoldMedalWinner(x) → Athlete(x))', '∀x (Scientist(x) → ¬GoodAtSports(x))', '∀x (NobelLaureate(x) → Scientist(x))', 'GoodAtSports(amy) ∨ OlympicGoldMedalWinner(amy)', '¬NobelLaureate(amy) → ¬OlympicGoldMedalWinner(amy)']	Unknown	hyb
346	919	Amy is neither a scientist nor an Olympic gold medal winner.	['All athletes are good at sports.', 'All Olympic gold medal winners are good athletes.', 'No scientists are good at sports.', 'All Nobel laureates are scientists.', 'Amy is good at sports or Amy is an Olympic gold medal winner.', 'If Amy is not a Nobel laureate, then Amy is not an Olympic gold medal winner.']	['∀x (Athlete(x) → GoodAtSports(x))', '∀x (OlympicGoldMedalWinner(x) → Athlete(x))', '∀x (Scientist(x) → ¬GoodAtSports(x))', '∀x (NobelLaureate(x) → Scientist(x))', 'GoodAtSports(amy) ∨ OlympicGoldMedalWinner(amy)', '¬NobelLaureate(amy) → ¬OlympicGoldMedalWinner(amy)']	True	hyb
346	920	If Amy is not an Olympic gold medal winner, then Amy is a Nobel laureate.	['All athletes are good at sports.', 'All Olympic gold medal winners are good athletes.', 'No scientists are good at sports.', 'All Nobel laureates are scientists.', 'Amy is good at sports or Amy is an Olympic gold medal winner.', 'If Amy is not a Nobel laureate, then Amy is not an Olympic gold medal winner.']	['∀x (Athlete(x) → GoodAtSports(x))', '∀x (OlympicGoldMedalWinner(x) → Athlete(x))', '∀x (Scientist(x) → ¬GoodAtSports(x))', '∀x (NobelLaureate(x) → Scientist(x))', 'GoodAtSports(amy) ∨ OlympicGoldMedalWinner(amy)', '¬NobelLaureate(amy) → ¬OlympicGoldMedalWinner(amy)']	False	hyb
409	1147	K is an apple.	['All fruits with the color red contain a large amount of vitamin C.', 'All apples are fruits with the color red.', 'All fruits containing a large amount of vitamin C are beneficial to people. ', 'No fruits that are beneficial to people are on a warning list.', 'If K is not beneficial to people and also not an apple, then it is a fruit with the color red.']	['∀x (RedFruit(x) → VC(x))', '∀x (Apple(x) → RedFruit(x))', '∀x (VC(x) → Benefit(x))', '∀x (Benefit(x) → ¬WarningList(x))', '¬(Benefit(k) ∧ Apple(k)) → RedFruit(k)']	Unknown	hyb
409	1148	K either contains a large amount of vitamin C or is on a warning list.	['All fruits with the color red contain a large amount of vitamin C.', 'All apples are fruits with the color red.', 'All fruits containing a large amount of vitamin C are beneficial to people. ', 'No fruits that are beneficial to people are on a warning list.', 'If K is not beneficial to people and also not an apple, then it is a fruit with the color red.']	['∀x (RedFruit(x) → VC(x))', '∀x (Apple(x) → RedFruit(x))', '∀x (VC(x) → Benefit(x))', '∀x (Benefit(x) → ¬WarningList(x))', '¬(Benefit(k) ∧ Apple(k)) → RedFruit(k)']	True	hyb
409	1149	K is either on a warning list or with the color red.	['All fruits with the color red contain a large amount of vitamin C.', 'All apples are fruits with the color red.', 'All fruits containing a large amount of vitamin C are beneficial to people. ', 'No fruits that are beneficial to people are on a warning list.', 'If K is not beneficial to people and also not an apple, then it is a fruit with the color red.']	['∀x (RedFruit(x) → VC(x))', '∀x (Apple(x) → RedFruit(x))', '∀x (VC(x) → Benefit(x))', '∀x (Benefit(x) → ¬WarningList(x))', '¬(Benefit(k) ∧ Apple(k)) → RedFruit(k)']	True	hyb
409	1150	If K is either beneficial to people or on a warning list, then it is not red.	['All fruits with the color red contain a large amount of vitamin C.', 'All apples are fruits with the color red.', 'All fruits containing a large amount of vitamin C are beneficial to people. ', 'No fruits that are beneficial to people are on a warning list.', 'If K is not beneficial to people and also not an apple, then it is a fruit with the color red.']	['∀x (RedFruit(x) → VC(x))', '∀x (Apple(x) → RedFruit(x))', '∀x (VC(x) → Benefit(x))', '∀x (Benefit(x) → ¬WarningList(x))', '¬(Benefit(k) ∧ Apple(k)) → RedFruit(k)']	False	hyb
409	1151	If K is either on a warning list or with the color red, then it is not beneficial to people and does not contain a large amount of vitamin C.	['All fruits with the color red contain a large amount of vitamin C.', 'All apples are fruits with the color red.', 'All fruits containing a large amount of vitamin C are beneficial to people. ', 'No fruits that are beneficial to people are on a warning list.', 'If K is not beneficial to people and also not an apple, then it is a fruit with the color red.']	['∀x (RedFruit(x) → VC(x))', '∀x (Apple(x) → RedFruit(x))', '∀x (VC(x) → Benefit(x))', '∀x (Benefit(x) → ¬WarningList(x))', '¬(Benefit(k) ∧ Apple(k)) → RedFruit(k)']	False	hyb
425	1207	James has a high income.	['Everyone working at Meta has a high income. ', 'If a person has a high income, then he/she will not take a bus to their destination.', 'People will either take a bus or drive to their destination. ', 'Everyone who has a car will choose to drive to their destination. ', 'No students drive to their destination. ', 'James has a car or works at Meta.']	['∀x (Meta(x) → HighIncome(x))', '∀x (HighIncome(x) → ¬Bus(x))', '∀x (Bus(x) ∨ Drive(x))', '∀x (HaveCars(x) → Drive(x))', '∀x (Student(x) → ¬Drive(x))', 'HaveCars(james) ∨ Meta(james)']	Unknown	hyb
425	1208	James does not have a high income.	['Everyone working at Meta has a high income. ', 'If a person has a high income, then he/she will not take a bus to their destination.', 'People will either take a bus or drive to their destination. ', 'Everyone who has a car will choose to drive to their destination. ', 'No students drive to their destination. ', 'James has a car or works at Meta.']	['∀x (Meta(x) → HighIncome(x))', '∀x (HighIncome(x) → ¬Bus(x))', '∀x (Bus(x) ∨ Drive(x))', '∀x (HaveCars(x) → Drive(x))', '∀x (Student(x) → ¬Drive(x))', 'HaveCars(james) ∨ Meta(james)']	Unknown	hyb
425	1209	James is a student.	['Everyone working at Meta has a high income. ', 'If a person has a high income, then he/she will not take a bus to their destination.', 'People will either take a bus or drive to their destination. ', 'Everyone who has a car will choose to drive to their destination. ', 'No students drive to their destination. ', 'James has a car or works at Meta.']	['∀x (Meta(x) → HighIncome(x))', '∀x (HighIncome(x) → ¬Bus(x))', '∀x (Bus(x) ∨ Drive(x))', '∀x (HaveCars(x) → Drive(x))', '∀x (Student(x) → ¬Drive(x))', 'HaveCars(james) ∨ Meta(james)']	False	hyb
425	1210	James drives to his destination or he is a student.	['Everyone working at Meta has a high income. ', 'If a person has a high income, then he/she will not take a bus to their destination.', 'People will either take a bus or drive to their destination. ', 'Everyone who has a car will choose to drive to their destination. ', 'No students drive to their destination. ', 'James has a car or works at Meta.']	['∀x (Meta(x) → HighIncome(x))', '∀x (HighIncome(x) → ¬Bus(x))', '∀x (Bus(x) ∨ Drive(x))', '∀x (HaveCars(x) → Drive(x))', '∀x (Student(x) → ¬Drive(x))', 'HaveCars(james) ∨ Meta(james)']	True	hyb
425	1211	James either drives to their destination or is a student.	['Everyone working at Meta has a high income. ', 'If a person has a high income, then he/she will not take a bus to their destination.', 'People will either take a bus or drive to their destination. ', 'Everyone who has a car will choose to drive to their destination. ', 'No students drive to their destination. ', 'James has a car or works at Meta.']	['∀x (Meta(x) → HighIncome(x))', '∀x (HighIncome(x) → ¬Bus(x))', '∀x (Bus(x) ∨ Drive(x))', '∀x (HaveCars(x) → Drive(x))', '∀x (Student(x) → ¬Drive(x))', 'HaveCars(james) ∨ Meta(james)']	True	hyb
425	1212	If James either drives to his destination or is a student, then he has a high income and is a student.	['Everyone working at Meta has a high income. ', 'If a person has a high income, then he/she will not take a bus to their destination.', 'People will either take a bus or drive to their destination. ', 'Everyone who has a car will choose to drive to their destination. ', 'No students drive to their destination. ', 'James has a car or works at Meta.']	['∀x (Meta(x) → HighIncome(x))', '∀x (HighIncome(x) → ¬Bus(x))', '∀x (Bus(x) ∨ Drive(x))', '∀x (HaveCars(x) → Drive(x))', '∀x (Student(x) → ¬Drive(x))', 'HaveCars(james) ∨ Meta(james)']	False	hyb
423	1202	James is in summer camp.	['Students either go to the park or go to the movies. ', 'No student who enjoys nature has free time during the weekend. ', 'All students who go to the movies enjoy nature. ', 'All students who do not have class during the weekend have free time during the weekend. ', 'All students not in summer camp do not have class during the weekend. ', 'James does not have class during the weekend.']	['∀x (Park(x) ⊕ Movies(x))', '∀x (Nature(x) → ¬FreeTime(x))', '∀x (Movies(x) → Nature(x))', '∀x (NoClass(x) → FreeTime(x))', '∀x (SummerCamp(x) → NoClass(x))', 'NoClass(james)']	Unknown	hyb
423	1203	James goes to the park or is in summer camp.	['Students either go to the park or go to the movies. ', 'No student who enjoys nature has free time during the weekend. ', 'All students who go to the movies enjoy nature. ', 'All students who do not have class during the weekend have free time during the weekend. ', 'All students not in summer camp do not have class during the weekend. ', 'James does not have class during the weekend.']	['∀x (Park(x) ⊕ Movies(x))', '∀x (Nature(x) → ¬FreeTime(x))', '∀x (Movies(x) → Nature(x))', '∀x (NoClass(x) → FreeTime(x))', '∀x (SummerCamp(x) → NoClass(x))', 'NoClass(james)']	True	hyb
264	713	All television stars have good business sense.	['No television stars are certified public accountants.', 'All certified public accountants have good business sense.']	['∀x (TelevisionStar(x) → ¬CertifiedPublicAccoutant(x))', '∀x (CertifiedPublicAccoutant(x) → GoodBusinessSense(x))']	Unknown	wiki
416	1174	James is good at planning.	['Some students good at math are good at chemistry.', 'All students good at chemistry enjoy conducting experiments. ', 'All students that enjoy conducting experiments are good at planning. ', "No student good at planning is awarded the Dean's List. ", "James is either good at chemistry and awarded the Dean's List, or neither good at chemistry nor awarded the Dean's List."]	['∃x (Math(x) ∧ Chemistry(x))', '∀x (Chemistry(x) → Experiment(x))', '∀x (Experiment(x) → Planning(x))', '∀x (Planning(x) → ¬Award(x))', '¬(Chemistry(james) ⊕ Award(james))']	Unknown	hyb
416	1175	James is either good at planning or good at math.	['Some students good at math are good at chemistry.', 'All students good at chemistry enjoy conducting experiments. ', 'All students that enjoy conducting experiments are good at planning. ', "No student good at planning is awarded the Dean's List. ", "James is either good at chemistry and awarded the Dean's List, or neither good at chemistry nor awarded the Dean's List."]	['∃x (Math(x) ∧ Chemistry(x))', '∀x (Chemistry(x) → Experiment(x))', '∀x (Experiment(x) → Planning(x))', '∀x (Planning(x) → ¬Award(x))', '¬(Chemistry(james) ⊕ Award(james))']	False	hyb
416	1176	James is either good at chemistry or good at math.	['Some students good at math are good at chemistry.', 'All students good at chemistry enjoy conducting experiments. ', 'All students that enjoy conducting experiments are good at planning. ', "No student good at planning is awarded the Dean's List. ", "James is either good at chemistry and awarded the Dean's List, or neither good at chemistry nor awarded the Dean's List."]	['∃x (Math(x) ∧ Chemistry(x))', '∀x (Chemistry(x) → Experiment(x))', '∀x (Experiment(x) → Planning(x))', '∀x (Planning(x) → ¬Award(x))', '¬(Chemistry(james) ⊕ Award(james))']	False	hyb
416	1177	If James is good at Chemistry or gets awarded the Dean's List, then James is either good at planning or good at math.	['Some students good at math are good at chemistry.', 'All students good at chemistry enjoy conducting experiments. ', 'All students that enjoy conducting experiments are good at planning. ', "No student good at planning is awarded the Dean's List. ", "James is either good at chemistry and awarded the Dean's List, or neither good at chemistry nor awarded the Dean's List."]	['∃x (Math(x) ∧ Chemistry(x))', '∀x (Chemistry(x) → Experiment(x))', '∀x (Experiment(x) → Planning(x))', '∀x (Planning(x) → ¬Award(x))', '¬(Chemistry(james) ⊕ Award(james))']	True	hyb
24	69	2Sum is a Leetcode problem with an easy level.	['If a Leetcode problem is at the easy level, then its AC rate is lower than 20 percent. ', 'All Leetcode problems that are recommended to novices are easy. ', 'A Leetode problem is either easy or hard.', 'Leetcode problems that are starred by more than 1 thousand users are hard.', '2Sum is recommended to novices. ', '4Sum is starred by more than 1 thousand users.']	['∀x (Easy(x) → LowerAC(x))', '∀x (Recommended(x) → Easy(x))', '∀x (Easy(x) ⊕ Hard(x))', '∀x (Starred(x) → Hard(x))', 'Recommended(twosum) ', 'Starred(foursum)']	True	wiki
24	70	4Sum is a Leetcode problem recommended to the novice.	['If a Leetcode problem is at the easy level, then its AC rate is lower than 20 percent. ', 'All Leetcode problems that are recommended to novices are easy. ', 'A Leetode problem is either easy or hard.', 'Leetcode problems that are starred by more than 1 thousand users are hard.', '2Sum is recommended to novices. ', '4Sum is starred by more than 1 thousand users.']	['∀x (Easy(x) → LowerAC(x))', '∀x (Recommended(x) → Easy(x))', '∀x (Easy(x) ⊕ Hard(x))', '∀x (Starred(x) → Hard(x))', 'Recommended(twosum) ', 'Starred(foursum)']	False	wiki
24	71	2Sum has an AC rate higher than 20 percent.	['If a Leetcode problem is at the easy level, then its AC rate is lower than 20 percent. ', 'All Leetcode problems that are recommended to novices are easy. ', 'A Leetode problem is either easy or hard.', 'Leetcode problems that are starred by more than 1 thousand users are hard.', '2Sum is recommended to novices. ', '4Sum is starred by more than 1 thousand users.']	['∀x (Easy(x) → LowerAC(x))', '∀x (Recommended(x) → Easy(x))', '∀x (Easy(x) ⊕ Hard(x))', '∀x (Starred(x) → Hard(x))', 'Recommended(twosum) ', 'Starred(foursum)']	False	wiki
244	692	Sarah will spend money this weekend.	['All rental cars cost the renter money.', 'Whenever Sarah goes to Vermont, Sarah drives there.', 'For someone who does not own a car to drive somewhere, they must either borrow a car or rent a car.', 'Sarah doesn’t own a car.', 'Sarah never borrows a car to go camping.', 'Sarah is going to go camping in Vermont this weekend.', 'To go camping somewhere, you must go to that place.']	['∀x (Rent(x, car) → Spend(x, money))', 'GoesTo(sarah, vermont) → DriveTo(sarah, vermont)', '∀x ∀y (¬Own(x, car) ∧ DriveTo(x, y) → Borrow(x, car) ⊕ Rent(x, car))', '¬Own(sarah, car)', '∀x (Camping(sarah, x) → ¬(Borrow(sarah, car)))', 'Camping(sarah, vermont)', '∀x ∀y (Camping(x, y) → GoesTo(x, y))']	True	wiki
378	1013	Carol is outgoing and very spirited.	['All people who attend weddings are getting married or have friends who are getting married.', 'No preteens and other young children are getting married or have friends who are getting married.', 'If people enjoy celebrating life milestone events with other people, then they attend weddings.', 'If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.', 'All people who are outgoing and very spirited are fond of large organized group functions.', 'If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  ']	['∀x Weddings(x) → GettingMarried(x)', '∀x PreTeen(x) → ¬GettingMarried(x)', '∀x Celebrating(x) → Weddings(x)', '∀x LargeGathering(x) → Celebrating(x)', '∀x Outgoing(x) → LargeGathering(x)', '¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)']	False	hyb
378	1014	Carol is either a preteen or other young child.	['All people who attend weddings are getting married or have friends who are getting married.', 'No preteens and other young children are getting married or have friends who are getting married.', 'If people enjoy celebrating life milestone events with other people, then they attend weddings.', 'If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.', 'All people who are outgoing and very spirited are fond of large organized group functions.', 'If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  ']	['∀x Weddings(x) → GettingMarried(x)', '∀x PreTeen(x) → ¬GettingMarried(x)', '∀x Celebrating(x) → Weddings(x)', '∀x LargeGathering(x) → Celebrating(x)', '∀x Outgoing(x) → LargeGathering(x)', '¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)']	Unknown	hyb
378	1015	Carol neither enjoys celebrating life milestone events with other people nor is outgoing and very spirited.	['All people who attend weddings are getting married or have friends who are getting married.', 'No preteens and other young children are getting married or have friends who are getting married.', 'If people enjoy celebrating life milestone events with other people, then they attend weddings.', 'If people are fond of large organized group functions, then they enjoy celebrating life milestone events with other people.', 'All people who are outgoing and very spirited are fond of large organized group functions.', 'If Carol is not both a pre-teen or other young child and attends weddings, then Carol is not getting married or has friends who are getting married.  ']	['∀x Weddings(x) → GettingMarried(x)', '∀x PreTeen(x) → ¬GettingMarried(x)', '∀x Celebrating(x) → Weddings(x)', '∀x LargeGathering(x) → Celebrating(x)', '∀x Outgoing(x) → LargeGathering(x)', '¬(PreTeen(Carol) ∧ Weddings(Carol)) → ¬GettingMarried(Carol)']	True	hyb
395	1073	A U.S government official is a Democrat.	['All Republicans are anti-abortion.', 'Either Republicans or Democrats. ', 'No Democrats are conservative.', 'Either conservative or liberal. ', 'A U.S government official is either conservative or a Republican.']	['∀x (Republicans(x) → Anti-abortion(x))', ' ∀x (Republicans(x) ∨ Democrats(x))', ' ∀x (Democrats(x) → ¬Conservative(x))', ' ∀x (Conservative(x) ∨ Liberal(x))', ' Conservative(anU.SGovernmentOfficial) ⊕ Republicans(anU.SGovernmentOfficial)']	Unknown	hyb
395	1074	A U.S government official is anti-abortion and a liberal.	['All Republicans are anti-abortion.', 'Either Republicans or Democrats. ', 'No Democrats are conservative.', 'Either conservative or liberal. ', 'A U.S government official is either conservative or a Republican.']	['∀x (Republicans(x) → Anti-abortion(x))', ' ∀x (Republicans(x) ∨ Democrats(x))', ' ∀x (Democrats(x) → ¬Conservative(x))', ' ∀x (Conservative(x) ∨ Liberal(x))', ' Conservative(anU.SGovernmentOfficial) ⊕ Republicans(anU.SGovernmentOfficial)']	True	hyb
395	1075	A U.S government official is either anti-abortion or a liberal.	['All Republicans are anti-abortion.', 'Either Republicans or Democrats. ', 'No Democrats are conservative.', 'Either conservative or liberal. ', 'A U.S government official is either conservative or a Republican.']	['∀x (Republicans(x) → Anti-abortion(x))', ' ∀x (Republicans(x) ∨ Democrats(x))', ' ∀x (Democrats(x) → ¬Conservative(x))', ' ∀x (Conservative(x) ∨ Liberal(x))', ' Conservative(anU.SGovernmentOfficial) ⊕ Republicans(anU.SGovernmentOfficial)']	False	hyb
395	1076	If a U.S government official is not anti-abortion and a Republican, then a U.S government official is neither anti-abortion nor a liberal.	['All Republicans are anti-abortion.', 'Either Republicans or Democrats. ', 'No Democrats are conservative.', 'Either conservative or liberal. ', 'A U.S government official is either conservative or a Republican.']	['∀x (Republicans(x) → Anti-abortion(x))', ' ∀x (Republicans(x) ∨ Democrats(x))', ' ∀x (Democrats(x) → ¬Conservative(x))', ' ∀x (Conservative(x) ∨ Liberal(x))', ' Conservative(anU.SGovernmentOfficial) ⊕ Republicans(anU.SGovernmentOfficial)']	True	hyb
395	1077	If a U.S government official is anti-abortion and a liberal, then a U.S government official is either a Republican or a liberal.	['All Republicans are anti-abortion.', 'Either Republicans or Democrats. ', 'No Democrats are conservative.', 'Either conservative or liberal. ', 'A U.S government official is either conservative or a Republican.']	['∀x (Republicans(x) → Anti-abortion(x))', ' ∀x (Republicans(x) ∨ Democrats(x))', ' ∀x (Democrats(x) → ¬Conservative(x))', ' ∀x (Conservative(x) ∨ Liberal(x))', ' Conservative(anU.SGovernmentOfficial) ⊕ Republicans(anU.SGovernmentOfficial)']	False	hyb
395	1078	If a U.S government official is either a conservative or anti-abortion, then a U.S government official is either a conservative and a liberal or neither a conservative nor a liberal.	['All Republicans are anti-abortion.', 'Either Republicans or Democrats. ', 'No Democrats are conservative.', 'Either conservative or liberal. ', 'A U.S government official is either conservative or a Republican.']	['∀x (Republicans(x) → Anti-abortion(x))', ' ∀x (Republicans(x) ∨ Democrats(x))', ' ∀x (Democrats(x) → ¬Conservative(x))', ' ∀x (Conservative(x) ∨ Liberal(x))', ' Conservative(anU.SGovernmentOfficial) ⊕ Republicans(anU.SGovernmentOfficial)']	Unknown	hyb
395	1079	If a U.S government official is either a conservative or anti-abortion, then a U.S government official is neither a Democrat or a liberal.	['All Republicans are anti-abortion.', 'Either Republicans or Democrats. ', 'No Democrats are conservative.', 'Either conservative or liberal. ', 'A U.S government official is either conservative or a Republican.']	['∀x (Republicans(x) → Anti-abortion(x))', ' ∀x (Republicans(x) ∨ Democrats(x))', ' ∀x (Democrats(x) → ¬Conservative(x))', ' ∀x (Conservative(x) ∨ Liberal(x))', ' Conservative(anU.SGovernmentOfficial) ⊕ Republicans(anU.SGovernmentOfficial)']	Unknown	hyb
395	1080	If an U.S government official is anti-abortion or a liberal, then a U.S government official is either anti-abortion or a liberal.	['All Republicans are anti-abortion.', 'Either Republicans or Democrats. ', 'No Democrats are conservative.', 'Either conservative or liberal. ', 'A U.S government official is either conservative or a Republican.']	['∀x (Republicans(x) → Anti-abortion(x))', ' ∀x (Republicans(x) ∨ Democrats(x))', ' ∀x (Democrats(x) → ¬Conservative(x))', ' ∀x (Conservative(x) ∨ Liberal(x))', ' Conservative(anU.SGovernmentOfficial) ⊕ Republicans(anU.SGovernmentOfficial)']	False	hyb
265	714	Some conservatives are advocates of high tariff rates.	['All advocates of high tariff rates are Republicans.', 'Some Republicans are not conservatives.']	['∀x (AdvocateOfHighTariff(x) → Republican(x))', '∃x (Republican(x) ∧ ¬Conservative(x))']	Unknown	wiki
337	886	Jim is a Knicks player.	['No athletes are slow runners. ', 'All professional basketball players are athletes. ', 'All NBA players are professional basketball players. ', 'All Knicks players are NBA players. ', 'Jim is either not a professional basketball player or not a slow runner. ']	['∀x (Athlete(x) → ¬SlowRunner(x))', '∀x (ProfessionalBasketballPlayer(x) → Athlete(x))', '∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))', '∀x (KnicksPlayer(x) → NBAPlayer(x))', '¬(ProfessionalBasketballPlayer(jim) ⊕ SlowRunner(jim))']	False	hyb
337	887	Jim is not a Knicks player.	['No athletes are slow runners. ', 'All professional basketball players are athletes. ', 'All NBA players are professional basketball players. ', 'All Knicks players are NBA players. ', 'Jim is either not a professional basketball player or not a slow runner. ']	['∀x (Athlete(x) → ¬SlowRunner(x))', '∀x (ProfessionalBasketballPlayer(x) → Athlete(x))', '∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))', '∀x (KnicksPlayer(x) → NBAPlayer(x))', '¬(ProfessionalBasketballPlayer(jim) ⊕ SlowRunner(jim))']	True	hyb
337	888	Jim is an athlete.	['No athletes are slow runners. ', 'All professional basketball players are athletes. ', 'All NBA players are professional basketball players. ', 'All Knicks players are NBA players. ', 'Jim is either not a professional basketball player or not a slow runner. ']	['∀x (Athlete(x) → ¬SlowRunner(x))', '∀x (ProfessionalBasketballPlayer(x) → Athlete(x))', '∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))', '∀x (KnicksPlayer(x) → NBAPlayer(x))', '¬(ProfessionalBasketballPlayer(jim) ⊕ SlowRunner(jim))']	Unknown	hyb
345	915	Nancy is a pirate.	['All kids love animals.', 'All toddlers are kids.', 'If someone loves animals, then they are not bad.', 'All pirates are bad.', 'If Nancy is not a pirate, then Nancy loves animals.', 'If Nancy is not a toddler, then Nancy is bad.']	['∀x (Kid(x) → LoveAnimals(x))', '∀x (Toddler(x) → Kid(x))', '∀x (LoveAnimals(x) → ¬Bad(x))', '∀x (Pirate(x) → Bad(x))', '¬Pirate(nancy) → LoveAnimals(nancy)', '¬Toddler(nancy) → Bad(nancy)']	Unknown	hyb
345	916	Nancy is not a pirate or a toddler.	['All kids love animals.', 'All toddlers are kids.', 'If someone loves animals, then they are not bad.', 'All pirates are bad.', 'If Nancy is not a pirate, then Nancy loves animals.', 'If Nancy is not a toddler, then Nancy is bad.']	['∀x (Kid(x) → LoveAnimals(x))', '∀x (Toddler(x) → Kid(x))', '∀x (LoveAnimals(x) → ¬Bad(x))', '∀x (Pirate(x) → Bad(x))', '¬Pirate(nancy) → LoveAnimals(nancy)', '¬Toddler(nancy) → Bad(nancy)']	False	hyb
345	917	If Nancy is not a pirate or a toddler, then she loves animals and is a kid.	['All kids love animals.', 'All toddlers are kids.', 'If someone loves animals, then they are not bad.', 'All pirates are bad.', 'If Nancy is not a pirate, then Nancy loves animals.', 'If Nancy is not a toddler, then Nancy is bad.']	['∀x (Kid(x) → LoveAnimals(x))', '∀x (Toddler(x) → Kid(x))', '∀x (LoveAnimals(x) → ¬Bad(x))', '∀x (Pirate(x) → Bad(x))', '¬Pirate(nancy) → LoveAnimals(nancy)', '¬Toddler(nancy) → Bad(nancy)']	True	hyb
68	202	Lana Wilson is a US filmmaker.	['Lana Wilson directed After Tiller, The Departure, and Miss Americana.', 'If a film is directedy by a person, the person is a filmmaker.', 'After Tiller is a documentary.', 'The documentary is a type of films.', 'Lana Wilson is from Kirkland.', 'Kirkland is a US city.', 'If a person is from a city in a country, the person is from the country.', 'After Tiller is nominated for the Independent Spirit Award for Best Documentary.']	['DirectedBy(after_Tiller, lana_Wilson) ∧ DirectedBy(the_Departure, lana_Wilson) ∧ DirectedBy(miss_Americana, lana_Wilson)', '∀x ∃y (DirectedBy(y, x) → Filmmaker(x))', 'IsDocumentary(after_Tiller)', '∀x (IsDocumentary(x) → IsFilm(x))', 'FromCity(lana_Wilson, kirkland)', 'CityCountry(kirkland, us)', '∀x ∀y ∀z (FromCity(x, y) ∧ CityCountry(y, z) → FromCountry(x, z))', 'Nomination(after_Tiller, the_Independent_Spirit_Award_for_Best_Documentary)']	True	wiki
68	203	Miss Americana is not directed by a filmmaker from Kirkland.	['Lana Wilson directed After Tiller, The Departure, and Miss Americana.', 'If a film is directedy by a person, the person is a filmmaker.', 'After Tiller is a documentary.', 'The documentary is a type of films.', 'Lana Wilson is from Kirkland.', 'Kirkland is a US city.', 'If a person is from a city in a country, the person is from the country.', 'After Tiller is nominated for the Independent Spirit Award for Best Documentary.']	['DirectedBy(after_Tiller, lana_Wilson) ∧ DirectedBy(the_Departure, lana_Wilson) ∧ DirectedBy(miss_Americana, lana_Wilson)', '∀x ∃y (DirectedBy(y, x) → Filmmaker(x))', 'IsDocumentary(after_Tiller)', '∀x (IsDocumentary(x) → IsFilm(x))', 'FromCity(lana_Wilson, kirkland)', 'CityCountry(kirkland, us)', '∀x ∀y ∀z (FromCity(x, y) ∧ CityCountry(y, z) → FromCountry(x, z))', 'Nomination(after_Tiller, the_Independent_Spirit_Award_for_Best_Documentary)']	False	wiki
68	204	Lana Wilson has won the Independent Spirit Award.	['Lana Wilson directed After Tiller, The Departure, and Miss Americana.', 'If a film is directedy by a person, the person is a filmmaker.', 'After Tiller is a documentary.', 'The documentary is a type of films.', 'Lana Wilson is from Kirkland.', 'Kirkland is a US city.', 'If a person is from a city in a country, the person is from the country.', 'After Tiller is nominated for the Independent Spirit Award for Best Documentary.']	['DirectedBy(after_Tiller, lana_Wilson) ∧ DirectedBy(the_Departure, lana_Wilson) ∧ DirectedBy(miss_Americana, lana_Wilson)', '∀x ∃y (DirectedBy(y, x) → Filmmaker(x))', 'IsDocumentary(after_Tiller)', '∀x (IsDocumentary(x) → IsFilm(x))', 'FromCity(lana_Wilson, kirkland)', 'CityCountry(kirkland, us)', '∀x ∀y ∀z (FromCity(x, y) ∧ CityCountry(y, z) → FromCountry(x, z))', 'Nomination(after_Tiller, the_Independent_Spirit_Award_for_Best_Documentary)']	Unknown	wiki
281	730	Not all bears are wild.	['All bears in zoos are not wild. ', 'Some bears are in zoos. ']	['∀x ((Bear(x) ∧ InZoo(x)) → ¬Wild(x))', '∃x (Bear(x) ∧ InZoo(x)) ']	True	wiki
56	166	Elizabeth is a king.	['If a person is the leader of a country for life, that person is in a monarchy. ', 'Leaders are either a king or a queen.', 'Queens are female.', 'Kings are male. ', 'Elizabeth is a queen.', 'Elizabeth is a leader']	['∀x (Leader(x) → InMonarchy(x))', '∀x (Leader(x) → King(x) ⊕ Queen(x))', '∀x (Queen(x) → Female(x))', '∀x (King(x) → Male(x))', 'Queen(elizabeth)', 'Leader(elizabeth)']	False	wiki
56	167	Elizabeth is in a monarchy.	['If a person is the leader of a country for life, that person is in a monarchy. ', 'Leaders are either a king or a queen.', 'Queens are female.', 'Kings are male. ', 'Elizabeth is a queen.', 'Elizabeth is a leader']	['∀x (Leader(x) → InMonarchy(x))', '∀x (Leader(x) → King(x) ⊕ Queen(x))', '∀x (Queen(x) → Female(x))', '∀x (King(x) → Male(x))', 'Queen(elizabeth)', 'Leader(elizabeth)']	True	wiki
56	168	Elizabeth is a leader of a country.	['If a person is the leader of a country for life, that person is in a monarchy. ', 'Leaders are either a king or a queen.', 'Queens are female.', 'Kings are male. ', 'Elizabeth is a queen.', 'Elizabeth is a leader']	['∀x (Leader(x) → InMonarchy(x))', '∀x (Leader(x) → King(x) ⊕ Queen(x))', '∀x (Queen(x) → Female(x))', '∀x (King(x) → Male(x))', 'Queen(elizabeth)', 'Leader(elizabeth)']	True	wiki
367	981	Clay does not have a regular 9-5 job.	['If people make their own matcha teas every morning with ceremonial-grade matcha powder, then they do not wake up late and start their schedules past noon regularly.', 'If people live in California and attend yoga classes regularly, then they make their own matcha teas every morning with ceremonial-grade matcha powder.', 'If people work in the entertainment industry as high-profile celebrities, then they wake up late and start their schedules past noon regularly.', 'If people do not have regular 9-5 jobs, then they work in the entertainment industry as high-profile celebrities.', 'All people who prefer working at home over going to the office every day do not have regular 9-5 jobs.', 'Clay either both prefers to work at home over going to the office every day and makes his own matcha teas every morning with ceremonial-grade matcha powder, or he neither prefers to work at home over going to the office every day nor makes his own matcha teas every morning with ceremonial-grade matcha powder.']	['∀x (Matcha(x) → ¬Late(x))', '∀x (California(x) → Matcha(x))', '∀x (Celebrities(x) → Late(x))', '∀x (Jobs(x) → Celebrities(x))', '∀x (WorkHome(x) → Jobs(x))', '(WorkHome(clay) ∧ Matcha(clay)) ⊕ (¬WorkHome(clay) ∧ ¬Matcha(clay))']	Unknown	hyb
367	982	Clay lives in California and attends yoga classes regularly.	['If people make their own matcha teas every morning with ceremonial-grade matcha powder, then they do not wake up late and start their schedules past noon regularly.', 'If people live in California and attend yoga classes regularly, then they make their own matcha teas every morning with ceremonial-grade matcha powder.', 'If people work in the entertainment industry as high-profile celebrities, then they wake up late and start their schedules past noon regularly.', 'If people do not have regular 9-5 jobs, then they work in the entertainment industry as high-profile celebrities.', 'All people who prefer working at home over going to the office every day do not have regular 9-5 jobs.', 'Clay either both prefers to work at home over going to the office every day and makes his own matcha teas every morning with ceremonial-grade matcha powder, or he neither prefers to work at home over going to the office every day nor makes his own matcha teas every morning with ceremonial-grade matcha powder.']	['∀x (Matcha(x) → ¬Late(x))', '∀x (California(x) → Matcha(x))', '∀x (Celebrities(x) → Late(x))', '∀x (Jobs(x) → Celebrities(x))', '∀x (WorkHome(x) → Jobs(x))', '(WorkHome(clay) ∧ Matcha(clay)) ⊕ (¬WorkHome(clay) ∧ ¬Matcha(clay))']	False	hyb
367	983	Clay neither prefers working at home over going to the office every day nor lives in California and attends yoga classes regularly.	['If people make their own matcha teas every morning with ceremonial-grade matcha powder, then they do not wake up late and start their schedules past noon regularly.', 'If people live in California and attend yoga classes regularly, then they make their own matcha teas every morning with ceremonial-grade matcha powder.', 'If people work in the entertainment industry as high-profile celebrities, then they wake up late and start their schedules past noon regularly.', 'If people do not have regular 9-5 jobs, then they work in the entertainment industry as high-profile celebrities.', 'All people who prefer working at home over going to the office every day do not have regular 9-5 jobs.', 'Clay either both prefers to work at home over going to the office every day and makes his own matcha teas every morning with ceremonial-grade matcha powder, or he neither prefers to work at home over going to the office every day nor makes his own matcha teas every morning with ceremonial-grade matcha powder.']	['∀x (Matcha(x) → ¬Late(x))', '∀x (California(x) → Matcha(x))', '∀x (Celebrities(x) → Late(x))', '∀x (Jobs(x) → Celebrities(x))', '∀x (WorkHome(x) → Jobs(x))', '(WorkHome(clay) ∧ Matcha(clay)) ⊕ (¬WorkHome(clay) ∧ ¬Matcha(clay))']	True	hyb
19	54	Thomas Barber played in the Football League for Bolton Wanderers	['Thomas Barber was an English professional footballer.', 'Thomas Barber played in the Football League for Aston Villa.', 'Thomas Barber played as a half back and inside left.', 'Thomas Barber scored the winning goal in the 1913 FA Cup Final.']	['English(thomasBarber) ∧ ProfessionalFootballer(thomasBarber)', 'PlayedInTheFootballLeagueFor(thomasBarber, astonVilla)', 'PlayedAs(thomasBarber, aHalfBack) ∧ PlayedAs(thomasBarber, anInsideLeft)', 'ScoredTheWinningGoalIn(thomasBarber, facupfinal1913)']	Unknown	wiki
19	55	Thomas Barber played as an inside left.	['Thomas Barber was an English professional footballer.', 'Thomas Barber played in the Football League for Aston Villa.', 'Thomas Barber played as a half back and inside left.', 'Thomas Barber scored the winning goal in the 1913 FA Cup Final.']	['English(thomasBarber) ∧ ProfessionalFootballer(thomasBarber)', 'PlayedInTheFootballLeagueFor(thomasBarber, astonVilla)', 'PlayedAs(thomasBarber, aHalfBack) ∧ PlayedAs(thomasBarber, anInsideLeft)', 'ScoredTheWinningGoalIn(thomasBarber, facupfinal1913)']	True	wiki
19	56	An English professional footballer scored the winning goal in the 1913 FA Cup Final.	['Thomas Barber was an English professional footballer.', 'Thomas Barber played in the Football League for Aston Villa.', 'Thomas Barber played as a half back and inside left.', 'Thomas Barber scored the winning goal in the 1913 FA Cup Final.']	['English(thomasBarber) ∧ ProfessionalFootballer(thomasBarber)', 'PlayedInTheFootballLeagueFor(thomasBarber, astonVilla)', 'PlayedAs(thomasBarber, aHalfBack) ∧ PlayedAs(thomasBarber, anInsideLeft)', 'ScoredTheWinningGoalIn(thomasBarber, facupfinal1913)']	True	wiki
162	467	Oliver plays piano in the concert.	['If people play the instrument in the concert, then he is good at playing this kind of instrument.', 'Peter plays piano, violin, and saxophone.', 'Peter was invited to play piano at the concert hall.', 'Oliver and Peter were both invited to perform in the concert.', 'Oliver plays a different musical instrument from Peter in the concert.']	['∀y (∀x (PlayInConcert(y, x) → GoodAt(y, x)))', 'Play(peter, piano) ∧Play(peter, violin)', 'PlayInConcert(peter, piano)', 'PlayerInConcert(peter) ∧ PlayerInConcert(oliver)', '¬PlayInConcert(oliver, piano)']	False	wiki
162	468	Oliver plays violin in the concert.	['If people play the instrument in the concert, then he is good at playing this kind of instrument.', 'Peter plays piano, violin, and saxophone.', 'Peter was invited to play piano at the concert hall.', 'Oliver and Peter were both invited to perform in the concert.', 'Oliver plays a different musical instrument from Peter in the concert.']	['∀y (∀x (PlayInConcert(y, x) → GoodAt(y, x)))', 'Play(peter, piano) ∧Play(peter, violin)', 'PlayInConcert(peter, piano)', 'PlayerInConcert(peter) ∧ PlayerInConcert(oliver)', '¬PlayInConcert(oliver, piano)']	Unknown	wiki
162	469	Peter is good at playing piano.	['If people play the instrument in the concert, then he is good at playing this kind of instrument.', 'Peter plays piano, violin, and saxophone.', 'Peter was invited to play piano at the concert hall.', 'Oliver and Peter were both invited to perform in the concert.', 'Oliver plays a different musical instrument from Peter in the concert.']	['∀y (∀x (PlayInConcert(y, x) → GoodAt(y, x)))', 'Play(peter, piano) ∧Play(peter, violin)', 'PlayInConcert(peter, piano)', 'PlayerInConcert(peter) ∧ PlayerInConcert(oliver)', '¬PlayInConcert(oliver, piano)']	True	wiki
454	1312	George enjoys basking in the sun.	['If something can go underwater, then it enjoys water.', 'All animals that can swim can go underwater.', 'Either an animal can swim or it can walk.', 'Animals that can walk travel on land.', 'Animals that enjoy water splash water around.', 'Every animal that travels on land enjoys basking in the sun.', 'George splashes water around and can swim.', 'Liam is either an animal that can walk and enjoys water, or is neither an animal that can walk nor enjoys water.']	['∀x (GoesUnderwater(x) → EnjoysWater(x))', '∀x (CanSwim(x) → GoesUnderwater(x))', '∀x (CanSwim(x) ∨ CanWalk(x))', '∀x (CanWalk(x) → TravelsOnLand(x))', '∀x (EnjoysWater(x) → Splashes(x))', '∀x (TravelsOnLand(x) → EnjoysBasking(x))', 'Splashes(george) ∧ CanSwim(george)', '(CanWalk(liam) ∧ EnjoysWater(liam)) ∨ (¬CanWalk(liam) ∧ ¬EnjoysWater(liam))']	Unknown	hyb
454	1313	Liam enjoys basking in the sun and splashing water around.	['If something can go underwater, then it enjoys water.', 'All animals that can swim can go underwater.', 'Either an animal can swim or it can walk.', 'Animals that can walk travel on land.', 'Animals that enjoy water splash water around.', 'Every animal that travels on land enjoys basking in the sun.', 'George splashes water around and can swim.', 'Liam is either an animal that can walk and enjoys water, or is neither an animal that can walk nor enjoys water.']	['∀x (GoesUnderwater(x) → EnjoysWater(x))', '∀x (CanSwim(x) → GoesUnderwater(x))', '∀x (CanSwim(x) ∨ CanWalk(x))', '∀x (CanWalk(x) → TravelsOnLand(x))', '∀x (EnjoysWater(x) → Splashes(x))', '∀x (TravelsOnLand(x) → EnjoysBasking(x))', 'Splashes(george) ∧ CanSwim(george)', '(CanWalk(liam) ∧ EnjoysWater(liam)) ∨ (¬CanWalk(liam) ∧ ¬EnjoysWater(liam))']	True	hyb
454	1314	Liam neither enjoys basking in the sun nor splashing water around.	['If something can go underwater, then it enjoys water.', 'All animals that can swim can go underwater.', 'Either an animal can swim or it can walk.', 'Animals that can walk travel on land.', 'Animals that enjoy water splash water around.', 'Every animal that travels on land enjoys basking in the sun.', 'George splashes water around and can swim.', 'Liam is either an animal that can walk and enjoys water, or is neither an animal that can walk nor enjoys water.']	['∀x (GoesUnderwater(x) → EnjoysWater(x))', '∀x (CanSwim(x) → GoesUnderwater(x))', '∀x (CanSwim(x) ∨ CanWalk(x))', '∀x (CanWalk(x) → TravelsOnLand(x))', '∀x (EnjoysWater(x) → Splashes(x))', '∀x (TravelsOnLand(x) → EnjoysBasking(x))', 'Splashes(george) ∧ CanSwim(george)', '(CanWalk(liam) ∧ EnjoysWater(liam)) ∨ (¬CanWalk(liam) ∧ ¬EnjoysWater(liam))']	False	hyb
236	673	Cancer researchers tend to use the cancer effect size to determine the relative importance of the genetic alterations that confer selective advantage to cancer cells.	['Cancer biology is finding genetic alterations that confer selective advantage to cancer cells. ', 'Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.', 'P values are thresholds for belief, not metrics of effect. ']	['FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)', ' PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)', ' ∀x (PValue(x) → ThresholdsForBelief(x) ∧ ¬MetricsOfEffect(x))']	Unknown	wiki
236	674	P value represents the selection intensity for somatic variants in cancer cell lineages.	['Cancer biology is finding genetic alterations that confer selective advantage to cancer cells. ', 'Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.', 'P values are thresholds for belief, not metrics of effect. ']	['FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)', ' PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)', ' ∀x (PValue(x) → ThresholdsForBelief(x) ∧ ¬MetricsOfEffect(x))']	Unknown	wiki
236	675	Cancer effect size is a metric that is preferred by the majority of cancer researchers.	['Cancer biology is finding genetic alterations that confer selective advantage to cancer cells. ', 'Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.', 'P values are thresholds for belief, not metrics of effect. ']	['FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)', ' PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)', ' ∀x (PValue(x) → ThresholdsForBelief(x) ∧ ¬MetricsOfEffect(x))']	Unknown	wiki
236	676	P value doesn't represent metrics of effect.	['Cancer biology is finding genetic alterations that confer selective advantage to cancer cells. ', 'Cancer researchers have frequently ranked the importance of substitutions to cancer growth by P value.', 'P values are thresholds for belief, not metrics of effect. ']	['FindingGeneticAlterationsConferSelectiveAdvantageCancerCells(cancerBiology)', ' PValue(cancerResearchers, theImportanceOfSubstitutionsToCancerGrowth)', ' ∀x (PValue(x) → ThresholdsForBelief(x) ∧ ¬MetricsOfEffect(x))']	True	wiki
481	1407	A worksheet is dispensable.	['All dispensable things are environment-friendly. ', 'All woodware is dispensable.', 'All paper is woodware. ', 'No good things are bad. ', 'All environment-friendly things are good.', 'A worksheet is either paper or is environment-friendly.']	['∀x (Dispensable(x) → EnvironmentFriendly(x))', '∀x (Woodware(x) → Dispensable(x))', '∀x (Paper(x) → Woodware(x))', '∀x (Good(x) → ¬Bad(x))', '∀x (EnvironmentFriendly(x) → Good(x))', 'Paper(worksheet) ⊕ EnvironmentFriendly(worksheet)']	Unknown	hyb
481	1408	A worksheet is not dispensable.	['All dispensable things are environment-friendly. ', 'All woodware is dispensable.', 'All paper is woodware. ', 'No good things are bad. ', 'All environment-friendly things are good.', 'A worksheet is either paper or is environment-friendly.']	['∀x (Dispensable(x) → EnvironmentFriendly(x))', '∀x (Woodware(x) → Dispensable(x))', '∀x (Paper(x) → Woodware(x))', '∀x (Good(x) → ¬Bad(x))', '∀x (EnvironmentFriendly(x) → Good(x))', 'Paper(worksheet) ⊕ EnvironmentFriendly(worksheet)']	Unknown	hyb
481	1409	A worksheet is bad.	['All dispensable things are environment-friendly. ', 'All woodware is dispensable.', 'All paper is woodware. ', 'No good things are bad. ', 'All environment-friendly things are good.', 'A worksheet is either paper or is environment-friendly.']	['∀x (Dispensable(x) → EnvironmentFriendly(x))', '∀x (Woodware(x) → Dispensable(x))', '∀x (Paper(x) → Woodware(x))', '∀x (Good(x) → ¬Bad(x))', '∀x (EnvironmentFriendly(x) → Good(x))', 'Paper(worksheet) ⊕ EnvironmentFriendly(worksheet)']	False	hyb
481	1410	A worksheet is not bad.	['All dispensable things are environment-friendly. ', 'All woodware is dispensable.', 'All paper is woodware. ', 'No good things are bad. ', 'All environment-friendly things are good.', 'A worksheet is either paper or is environment-friendly.']	['∀x (Dispensable(x) → EnvironmentFriendly(x))', '∀x (Woodware(x) → Dispensable(x))', '∀x (Paper(x) → Woodware(x))', '∀x (Good(x) → ¬Bad(x))', '∀x (EnvironmentFriendly(x) → Good(x))', 'Paper(worksheet) ⊕ EnvironmentFriendly(worksheet)']	True	hyb
253	702	Some snake has fur.	['No reptile has fur.', 'All snakes are reptiles.']	['∀x (Reptile(x) → ¬HasFur(x))', '∀x (Snake(x) → Reptile(x))']	False	wiki
60	178	Tower A is low.	['All buildings in New Haven are low. ', 'All buildings managed by the Yale Housing are located in New Haven. ', 'All buildings in Manhattans are high. ', 'All buildings owned by Bloomberg are located in Manhattans. ', 'All buildings with the Bloomberg logo are owned by Bloomberg. ', 'Tower A is managed by the Yale Housing.', 'Tower B is with the Bloomberg logo.']	['∀x (Located(newhaven, x) → ¬High(x))', '∀x (YaleHousing(x) → Located(newhaven, x))', '∀x (Located(manhattans, x) → High(x))', '∀x (Bloomberg(x) → Located(manhattans, x))', '∀x (BloombergLogo(x) → Bloomberg(x))', 'YaleHousing(tower-a)', 'BloombergLogo(tower-b)']	True	wiki
60	179	Tower B is not located in Manhattans.	['All buildings in New Haven are low. ', 'All buildings managed by the Yale Housing are located in New Haven. ', 'All buildings in Manhattans are high. ', 'All buildings owned by Bloomberg are located in Manhattans. ', 'All buildings with the Bloomberg logo are owned by Bloomberg. ', 'Tower A is managed by the Yale Housing.', 'Tower B is with the Bloomberg logo.']	['∀x (Located(newhaven, x) → ¬High(x))', '∀x (YaleHousing(x) → Located(newhaven, x))', '∀x (Located(manhattans, x) → High(x))', '∀x (Bloomberg(x) → Located(manhattans, x))', '∀x (BloombergLogo(x) → Bloomberg(x))', 'YaleHousing(tower-a)', 'BloombergLogo(tower-b)']	False	wiki
60	180	Tower B is located in New Haven.	['All buildings in New Haven are low. ', 'All buildings managed by the Yale Housing are located in New Haven. ', 'All buildings in Manhattans are high. ', 'All buildings owned by Bloomberg are located in Manhattans. ', 'All buildings with the Bloomberg logo are owned by Bloomberg. ', 'Tower A is managed by the Yale Housing.', 'Tower B is with the Bloomberg logo.']	['∀x (Located(newhaven, x) → ¬High(x))', '∀x (YaleHousing(x) → Located(newhaven, x))', '∀x (Located(manhattans, x) → High(x))', '∀x (Bloomberg(x) → Located(manhattans, x))', '∀x (BloombergLogo(x) → Bloomberg(x))', 'YaleHousing(tower-a)', 'BloombergLogo(tower-b)']	False	wiki
453	1309	Ron is a lizard.	['No cold-blooded animals are birds.', 'All reptiles are cold-blooded.', 'Either an animal is a bird or it eats other animals.', 'If an animal eats other animals, then it is a carnivore.', 'Ron is neither a cold-blooded animal nor a carnivore.', 'Henry is neither a carnivore nor a lizard.']	['∀x (ColdBlooded(x) → ¬Bird(x))', '∀x (Reptile(x) → ColdBlooded(x))', '∀x (Bird(x) ∨ EatOtherAnimals(x))', '∀x (EatOtherAnimals(x) → Carnivore(x))', '¬ColdBlooded(ron) ∧ ¬Carnivore(ron)', '¬Carnivore(henry) ∧ ¬Lizard(henry)']	Unknown	hyb
453	1310	Either Henry is a reptile or Ron eats other animals.	['No cold-blooded animals are birds.', 'All reptiles are cold-blooded.', 'Either an animal is a bird or it eats other animals.', 'If an animal eats other animals, then it is a carnivore.', 'Ron is neither a cold-blooded animal nor a carnivore.', 'Henry is neither a carnivore nor a lizard.']	['∀x (ColdBlooded(x) → ¬Bird(x))', '∀x (Reptile(x) → ColdBlooded(x))', '∀x (Bird(x) ∨ EatOtherAnimals(x))', '∀x (EatOtherAnimals(x) → Carnivore(x))', '¬ColdBlooded(ron) ∧ ¬Carnivore(ron)', '¬Carnivore(henry) ∧ ¬Lizard(henry)']	False	hyb
453	1311	It is not true that Ron is a reptile or that Henry is cold-blooded.	['No cold-blooded animals are birds.', 'All reptiles are cold-blooded.', 'Either an animal is a bird or it eats other animals.', 'If an animal eats other animals, then it is a carnivore.', 'Ron is neither a cold-blooded animal nor a carnivore.', 'Henry is neither a carnivore nor a lizard.']	['∀x (ColdBlooded(x) → ¬Bird(x))', '∀x (Reptile(x) → ColdBlooded(x))', '∀x (Bird(x) ∨ EatOtherAnimals(x))', '∀x (EatOtherAnimals(x) → Carnivore(x))', '¬ColdBlooded(ron) ∧ ¬Carnivore(ron)', '¬Carnivore(henry) ∧ ¬Lizard(henry)']	True	hyb
73	222	Yevgeny Kurochkin discovered a new bird genus.	['Ambiortus is a prehistoric bird genus.', 'Ambiorus Dementjevi is the only known species of Ambiortus.', 'The Mongol region was where Ambiorus Dementjevi lived.', 'Yevgeny Kurochkin was the discoverer of Ambiortus.']	['Prehistoric(ambiortus) ∧ BirdGenus(ambiortus)', '∀x (Species(x, ambiortus) → AmbiortusDementjevi(x))', '∀x (AmbiortusDementjevi(x) → Lived(x, mongolregion))', 'Discovered(yevgenykurochkin, ambiortus)']	True	wiki
73	223	There is a species of Ambiortus that doesn't live in the Mongol region.	['Ambiortus is a prehistoric bird genus.', 'Ambiorus Dementjevi is the only known species of Ambiortus.', 'The Mongol region was where Ambiorus Dementjevi lived.', 'Yevgeny Kurochkin was the discoverer of Ambiortus.']	['Prehistoric(ambiortus) ∧ BirdGenus(ambiortus)', '∀x (Species(x, ambiortus) → AmbiortusDementjevi(x))', '∀x (AmbiortusDementjevi(x) → Lived(x, mongolregion))', 'Discovered(yevgenykurochkin, ambiortus)']	False	wiki
73	224	Yevgeny Kurochkin lived in the Mongol region.	['Ambiortus is a prehistoric bird genus.', 'Ambiorus Dementjevi is the only known species of Ambiortus.', 'The Mongol region was where Ambiorus Dementjevi lived.', 'Yevgeny Kurochkin was the discoverer of Ambiortus.']	['Prehistoric(ambiortus) ∧ BirdGenus(ambiortus)', '∀x (Species(x, ambiortus) → AmbiortusDementjevi(x))', '∀x (AmbiortusDementjevi(x) → Lived(x, mongolregion))', 'Discovered(yevgenykurochkin, ambiortus)']	Unknown	wiki
73	225	All species of Ambiortus live in the Mongol region.	['Ambiortus is a prehistoric bird genus.', 'Ambiorus Dementjevi is the only known species of Ambiortus.', 'The Mongol region was where Ambiorus Dementjevi lived.', 'Yevgeny Kurochkin was the discoverer of Ambiortus.']	['Prehistoric(ambiortus) ∧ BirdGenus(ambiortus)', '∀x (Species(x, ambiortus) → AmbiortusDementjevi(x))', '∀x (AmbiortusDementjevi(x) → Lived(x, mongolregion))', 'Discovered(yevgenykurochkin, ambiortus)']	True	wiki
448	1294	Jack plays football.	['Everyone that uses a football can throw a football.', 'If someone plays football, then they use a football.', 'Either someone is a football player or a basketball player.', 'Every basketball player is tall.', 'Everyone that can throw a football can throw a football with a spiral.', 'If someone is tall, then they are in shape.', 'If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football.']	['∀x (UseFootball(x) → ThrowFootball(x))', '∀x (PlayFootball(x) → UseFootball(x))', '∀x (BasketballPlayer(x) ∨ PlayFootball(x))', '∀x (BasketballPlayer(x) → Tall(x))', '∀x (ThrowFootball(x) → ThrowFootballSpiral(x))', '∀x (Tall(x) → InShape(x))', '¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack)']	Unknown	hyb
448	1295	Jack is in shape.	['Everyone that uses a football can throw a football.', 'If someone plays football, then they use a football.', 'Either someone is a football player or a basketball player.', 'Every basketball player is tall.', 'Everyone that can throw a football can throw a football with a spiral.', 'If someone is tall, then they are in shape.', 'If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football.']	['∀x (UseFootball(x) → ThrowFootball(x))', '∀x (PlayFootball(x) → UseFootball(x))', '∀x (BasketballPlayer(x) ∨ PlayFootball(x))', '∀x (BasketballPlayer(x) → Tall(x))', '∀x (ThrowFootball(x) → ThrowFootballSpiral(x))', '∀x (Tall(x) → InShape(x))', '¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack)']	True	hyb
448	1296	Jack is not in shape.	['Everyone that uses a football can throw a football.', 'If someone plays football, then they use a football.', 'Either someone is a football player or a basketball player.', 'Every basketball player is tall.', 'Everyone that can throw a football can throw a football with a spiral.', 'If someone is tall, then they are in shape.', 'If Jack is neither tall nor a basketball player,  then Jack is neither tall nor can throw a football.']	['∀x (UseFootball(x) → ThrowFootball(x))', '∀x (PlayFootball(x) → UseFootball(x))', '∀x (BasketballPlayer(x) ∨ PlayFootball(x))', '∀x (BasketballPlayer(x) → Tall(x))', '∀x (ThrowFootball(x) → ThrowFootballSpiral(x))', '∀x (Tall(x) → InShape(x))', '¬Tall(jack) ∧ ¬BasketballPlayer(jack) → ¬Tall(jack) ∧ ¬ThrowFootball(jack)']	False	hyb
3	7	Pierre de Rigaud de Vaudreuil built a fort in New France.	['Fort Ticonderoga is the current name for Fort Carillon.', 'Pierre de Rigaud de Vaudreuil built Fort Carillon.', 'Fort Carillon was located in New France.', 'New France is not in Europe.']	['CurrentName(fortticonderoga, fortcarillon)', 'Built(pierrederigauddevaudreuil, fortcarillon)', 'LocatedIn(fortcarillon, newfrance)', '¬LocatedIn(newfrance, europe)']	True	wiki
3	8	Pierre de Rigaud de Vaudreuil built a fort in New England.	['Fort Ticonderoga is the current name for Fort Carillon.', 'Pierre de Rigaud de Vaudreuil built Fort Carillon.', 'Fort Carillon was located in New France.', 'New France is not in Europe.']	['CurrentName(fortticonderoga, fortcarillon)', 'Built(pierrederigauddevaudreuil, fortcarillon)', 'LocatedIn(fortcarillon, newfrance)', '¬LocatedIn(newfrance, europe)']	Unknown	wiki
3	9	Fort Carillon was located in Europe.	['Fort Ticonderoga is the current name for Fort Carillon.', 'Pierre de Rigaud de Vaudreuil built Fort Carillon.', 'Fort Carillon was located in New France.', 'New France is not in Europe.']	['CurrentName(fortticonderoga, fortcarillon)', 'Built(pierrederigauddevaudreuil, fortcarillon)', 'LocatedIn(fortcarillon, newfrance)', '¬LocatedIn(newfrance, europe)']	Unknown	wiki
328	845	Stephen Curry is an NBA player.	['No soccer players are professional basketball players.', 'All NBA players are professional basketball players.', 'All defenders are soccer players.', 'All centerback players are defenders.', 'If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player.']	['¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))', '∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))', '∀x (Defender(x) → SoccerPlayer(x))', '∀x (Centerback(x) → Defender(x))', '(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)']	Unknown	hyb
328	846	Stephen Curry is a centerback player.	['No soccer players are professional basketball players.', 'All NBA players are professional basketball players.', 'All defenders are soccer players.', 'All centerback players are defenders.', 'If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player.']	['¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))', '∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))', '∀x (Defender(x) → SoccerPlayer(x))', '∀x (Centerback(x) → Defender(x))', '(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)']	False	hyb
328	847	Stephen Curry is not a centerback player.	['No soccer players are professional basketball players.', 'All NBA players are professional basketball players.', 'All defenders are soccer players.', 'All centerback players are defenders.', 'If Stephen Curry is an NBA player or a soccer player, then he is a professional basketball player.']	['¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))', '∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))', '∀x (Defender(x) → SoccerPlayer(x))', '∀x (Centerback(x) → Defender(x))', '(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry)) → ProfessionalBasketballPlayer(stephencurry)']	True	hyb
484	1420	Inception is a folk song.	['No songs are visual. ', 'All folk songs are songs. ', 'All videos are visual. ', 'All movies are videos.', 'All sci-fi movies are movies.', 'Inception is a sci-fi movie.', 'Mac is neither a folk song nor a sci-fi movie.']	['∀x (Song(x) → ¬Visual(x))', '∀x (FolkSong(x) → Song(x))', '∀x (Video(x) → Visual(x))', '∀x (Movie(x) → Video(x))', '∀x (ScifiMovie(x) → Movie(x))', 'ScifiMovie(inception)', '¬FolkSong(mac) ∧ ¬ScifiMovie(mac)']	False	hyb
484	1421	Inception is not a folk song.	['No songs are visual. ', 'All folk songs are songs. ', 'All videos are visual. ', 'All movies are videos.', 'All sci-fi movies are movies.', 'Inception is a sci-fi movie.', 'Mac is neither a folk song nor a sci-fi movie.']	['∀x (Song(x) → ¬Visual(x))', '∀x (FolkSong(x) → Song(x))', '∀x (Video(x) → Visual(x))', '∀x (Movie(x) → Video(x))', '∀x (ScifiMovie(x) → Movie(x))', 'ScifiMovie(inception)', '¬FolkSong(mac) ∧ ¬ScifiMovie(mac)']	True	hyb
484	1422	Inception is either a video or a folk song.	['No songs are visual. ', 'All folk songs are songs. ', 'All videos are visual. ', 'All movies are videos.', 'All sci-fi movies are movies.', 'Inception is a sci-fi movie.', 'Mac is neither a folk song nor a sci-fi movie.']	['∀x (Song(x) → ¬Visual(x))', '∀x (FolkSong(x) → Song(x))', '∀x (Video(x) → Visual(x))', '∀x (Movie(x) → Video(x))', '∀x (ScifiMovie(x) → Movie(x))', 'ScifiMovie(inception)', '¬FolkSong(mac) ∧ ¬ScifiMovie(mac)']	True	hyb
484	1423	Mac is a video.	['No songs are visual. ', 'All folk songs are songs. ', 'All videos are visual. ', 'All movies are videos.', 'All sci-fi movies are movies.', 'Inception is a sci-fi movie.', 'Mac is neither a folk song nor a sci-fi movie.']	['∀x (Song(x) → ¬Visual(x))', '∀x (FolkSong(x) → Song(x))', '∀x (Video(x) → Visual(x))', '∀x (Movie(x) → Video(x))', '∀x (ScifiMovie(x) → Movie(x))', 'ScifiMovie(inception)', '¬FolkSong(mac) ∧ ¬ScifiMovie(mac)']	Unknown	hyb
393	1065	Jeff is a shy and reticent person.	['All extroverts are overtly expressive.', 'People are either extroverts or introverts.', 'If someone is an introvert, then they are shy and reticent. ', 'No shy and reticent person likes to talk to strangers.', 'Jeff is not an extrovert and someone who likes to talk to strangers.']	['∀x (Extroverts(x) → OvertlyExpressive(x))', ' ∀x (Extroverts(x) ∨ Introverts(x)) ', ' ∀x (Introverts(x) → ShyAndReticentPerson(x))', ' ∀x (ShyAndReticentPerson(x) → ¬LikeToTalkToStrangers(x))', ' ¬Extroverts(jeff) ∧ ¬LikeToTalkToStrangers(jeff)']	Unknown	hyb
393	1066	Jeff is overtly expressive and likes to talk to strangers.	['All extroverts are overtly expressive.', 'People are either extroverts or introverts.', 'If someone is an introvert, then they are shy and reticent. ', 'No shy and reticent person likes to talk to strangers.', 'Jeff is not an extrovert and someone who likes to talk to strangers.']	['∀x (Extroverts(x) → OvertlyExpressive(x))', ' ∀x (Extroverts(x) ∨ Introverts(x)) ', ' ∀x (Introverts(x) → ShyAndReticentPerson(x))', ' ∀x (ShyAndReticentPerson(x) → ¬LikeToTalkToStrangers(x))', ' ¬Extroverts(jeff) ∧ ¬LikeToTalkToStrangers(jeff)']	False	hyb
393	1067	If Jeff is either overtly expressive and likes to talk to strangers or neither overtly expressive nor likes to talk to strangers, then Jeff is neither an extrovert nor likes to talk to strangers.	['All extroverts are overtly expressive.', 'People are either extroverts or introverts.', 'If someone is an introvert, then they are shy and reticent. ', 'No shy and reticent person likes to talk to strangers.', 'Jeff is not an extrovert and someone who likes to talk to strangers.']	['∀x (Extroverts(x) → OvertlyExpressive(x))', ' ∀x (Extroverts(x) ∨ Introverts(x)) ', ' ∀x (Introverts(x) → ShyAndReticentPerson(x))', ' ∀x (ShyAndReticentPerson(x) → ¬LikeToTalkToStrangers(x))', ' ¬Extroverts(jeff) ∧ ¬LikeToTalkToStrangers(jeff)']	True	hyb
408	1138	Candace is a top player in the league.	['No low-scoring players are top players in the league.', 'Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.', 'All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.', 'No players who are solid at shooting 2-pointers are bad at mid-range shots.', 'Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers.']	['∀x (LowScore(x) → ¬TopPlayer(x))', '∀x (TopPlayer(x) ∨ ThreePointer(x))', '∀x (ThreePointer(x) → TwoPointer(x))', '∀x (TwoPointer(x) → ¬BadMid(x))', 'LowScore(candace) ⊕ ThreePointer(candace)']	Unknown	hyb
408	1139	Candace is bad at mid-range shots.	['No low-scoring players are top players in the league.', 'Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.', 'All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.', 'No players who are solid at shooting 2-pointers are bad at mid-range shots.', 'Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers.']	['∀x (LowScore(x) → ¬TopPlayer(x))', '∀x (TopPlayer(x) ∨ ThreePointer(x))', '∀x (ThreePointer(x) → TwoPointer(x))', '∀x (TwoPointer(x) → ¬BadMid(x))', 'LowScore(candace) ⊕ ThreePointer(candace)']	False	hyb
408	1140	Candace is solid at shooting 2-pointers or bad at mid-range shots.	['No low-scoring players are top players in the league.', 'Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.', 'All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.', 'No players who are solid at shooting 2-pointers are bad at mid-range shots.', 'Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers.']	['∀x (LowScore(x) → ¬TopPlayer(x))', '∀x (TopPlayer(x) ∨ ThreePointer(x))', '∀x (ThreePointer(x) → TwoPointer(x))', '∀x (TwoPointer(x) → ¬BadMid(x))', 'LowScore(candace) ⊕ ThreePointer(candace)']	True	hyb
408	1141	Candace is either solid at shooting 2-pointers or bad at mid-range shots.	['No low-scoring players are top players in the league.', 'Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.', 'All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.', 'No players who are solid at shooting 2-pointers are bad at mid-range shots.', 'Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers.']	['∀x (LowScore(x) → ¬TopPlayer(x))', '∀x (TopPlayer(x) ∨ ThreePointer(x))', '∀x (ThreePointer(x) → TwoPointer(x))', '∀x (TwoPointer(x) → ¬BadMid(x))', 'LowScore(candace) ⊕ ThreePointer(candace)']	True	hyb
408	1142	Candace is a low-scoring player or bad at mid-range shots.	['No low-scoring players are top players in the league.', 'Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.', 'All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.', 'No players who are solid at shooting 2-pointers are bad at mid-range shots.', 'Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers.']	['∀x (LowScore(x) → ¬TopPlayer(x))', '∀x (TopPlayer(x) ∨ ThreePointer(x))', '∀x (ThreePointer(x) → TwoPointer(x))', '∀x (TwoPointer(x) → ¬BadMid(x))', 'LowScore(candace) ⊕ ThreePointer(candace)']	False	hyb
408	1143	Candace is either a low-scoring player or bad at mid-range shots.	['No low-scoring players are top players in the league.', 'Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.', 'All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.', 'No players who are solid at shooting 2-pointers are bad at mid-range shots.', 'Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers.']	['∀x (LowScore(x) → ¬TopPlayer(x))', '∀x (TopPlayer(x) ∨ ThreePointer(x))', '∀x (ThreePointer(x) → TwoPointer(x))', '∀x (TwoPointer(x) → ¬BadMid(x))', 'LowScore(candace) ⊕ ThreePointer(candace)']	False	hyb
408	1144	Candace is either a player who successfully shoots a high percentage of 3-pointers or is bad at mid-range shots.	['No low-scoring players are top players in the league.', 'Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.', 'All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.', 'No players who are solid at shooting 2-pointers are bad at mid-range shots.', 'Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers.']	['∀x (LowScore(x) → ¬TopPlayer(x))', '∀x (TopPlayer(x) ∨ ThreePointer(x))', '∀x (ThreePointer(x) → TwoPointer(x))', '∀x (TwoPointer(x) → ¬BadMid(x))', 'LowScore(candace) ⊕ ThreePointer(candace)']	True	hyb
408	1145	If Candace is not solid at shooting 2-pointers and bad at mid-range shots, then Candace is not solid at shooting 2-pointers and is a player who successfully shoots a high percentage of 3-pointers.	['No low-scoring players are top players in the league.', 'Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.', 'All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.', 'No players who are solid at shooting 2-pointers are bad at mid-range shots.', 'Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers.']	['∀x (LowScore(x) → ¬TopPlayer(x))', '∀x (TopPlayer(x) ∨ ThreePointer(x))', '∀x (ThreePointer(x) → TwoPointer(x))', '∀x (TwoPointer(x) → ¬BadMid(x))', 'LowScore(candace) ⊕ ThreePointer(candace)']	False	hyb
408	1146	If Candace is solid at shooting 2-pointers or successfully shoots a high percentage of 3-pointers, then Candace is a top player in the league and bad at mid-range shots.	['No low-scoring players are top players in the league.', 'Basketball players are either top players in the league or successfully shoot a high percentage of 3-pointers.', 'All players who successfully shoot a high percentage of 3-pointers are solid at shooting 2-pointers.', 'No players who are solid at shooting 2-pointers are bad at mid-range shots.', 'Candace is either a low-scoring player or successfully shoots a high percentage of 3-pointers.']	['∀x (LowScore(x) → ¬TopPlayer(x))', '∀x (TopPlayer(x) ∨ ThreePointer(x))', '∀x (ThreePointer(x) → TwoPointer(x))', '∀x (TwoPointer(x) → ¬BadMid(x))', 'LowScore(candace) ⊕ ThreePointer(candace)']	False	hyb
271	720	No plants are mushrooms.	['No plants are fungi.', 'Mushrooms are fungi.']	['∀x (Plant(x) → ¬Fungi(x))', '∀x (Mushroom(x) → Fungi(x))']	True	wiki
291	740	Some streets are clean	['No road is clean.', 'And some streets are roads.']	['∀x (Road(x) → ¬Clean(x))', '∃x (Street(x) ∧ Road(x))']	Unknown	wiki
222	632	Some people flying from New York City to Seattle will be uncomfortable.	['New York City is on the East Coast. ', 'Seattle is on the West Coast. ', 'If a person from a city on the East coast is traveling to a city on the west coast, they will be on a long flight.', 'Most passengers on flights to Seattle from New York City are not in first class.', "People on long flights are uncomfortable unless they're in first class"]	['On(newyorkcity, eastcoast)', 'On(seattle, westcoast)', '∀x ∀y ∀z ((TravelingFrom(x, y) ∧ On(y, eastcoast) ∧ TravelingTo(x, z) ∧ On(z, westcoast)) → OnLongFlight(x))', '∃x (¬InFirstClass(x) ∧ TravelingFrom(x, newyorkcity) ∧ TravelingTo(x, seattle))', '∀x (OnLongFlight(x) ∧ ¬InFirstClass(x) → Uncomfortable(x))']	False	wiki
118	356	Singh Kaur makes a lot of money.	['Musicians have very busy lives.', 'Singh Kaur is a musician and famous.', 'If a musician is not famous, that musician will not make a lot of money.', 'A musician can be a singer or a writer.']	['∀x (Musician(x) → Busy(x))', 'Musician(singhKaur) ∧ Famous(singhKaur)', '∀x (Musician(x) ∧ ¬Famous(x) → ¬MakeMoney(x))', '∃x (Musician(x) ∧ Singer(x) ∨ Writer(x))']	Unknown	wiki
118	357	Singh Kaur is a writer.	['Musicians have very busy lives.', 'Singh Kaur is a musician and famous.', 'If a musician is not famous, that musician will not make a lot of money.', 'A musician can be a singer or a writer.']	['∀x (Musician(x) → Busy(x))', 'Musician(singhKaur) ∧ Famous(singhKaur)', '∀x (Musician(x) ∧ ¬Famous(x) → ¬MakeMoney(x))', '∃x (Musician(x) ∧ Singer(x) ∨ Writer(x))']	Unknown	wiki
118	358	Singh Kaur has a very busy life.	['Musicians have very busy lives.', 'Singh Kaur is a musician and famous.', 'If a musician is not famous, that musician will not make a lot of money.', 'A musician can be a singer or a writer.']	['∀x (Musician(x) → Busy(x))', 'Musician(singhKaur) ∧ Famous(singhKaur)', '∀x (Musician(x) ∧ ¬Famous(x) → ¬MakeMoney(x))', '∃x (Musician(x) ∧ Singer(x) ∨ Writer(x))']	True	wiki
284	733	All buildings are magnificent.	['Each building is tall. ', 'Everything tall has  height.']	['∀x (Building(x) → ¬Tall(x))', '∀x (Tall(x) → HasHeight(x))']	Unknown	wiki
126	376	The main character of the film Garfield is childish and possessive.	['A cat named Garfield, which is the main character of the film Garfield, is orange and fat and likes having lasagna. ', 'Garfield and Odie, who is another pet of Jon, share the same home. ', 'Garfield hates Odie.', 'A pet who hates the pet with whom he shares the same owner is childish and possessive.', 'Cats are pets. ']	['Cat(garfield) ∧ MainCharacterGarfield(garfield) ∧ BeOrange(garfield) ∧ BeFat(garfield) ∧ LikeLasagna(garfield)', 'Pet(garfield, jon) ∧ Pet(odie, jon) ∧ ShareHome(garfield, odie)', 'Hate(garfield, odie)', '∀x ∀y ∃z (Pet(x, z) ∧ Pet(y, z) ∧ Hate(x, y) → BeChildish(x) ∧ BePossessive(x))', '∀x ∃y (Cat(x) → Pet(x, y))']	True	wiki
474	1377	Hulu eats.	['All humans eat.', 'If something eats, then it is not a plant.', 'A thing is either plant or animal.', 'All goats are animals.', 'No dirt is an animal.', 'Hulu is a goat or a human.']	['∀x (Human(x) → Eat(x))', '∀x (Eat(x) → ¬Plant(x))', '∀x (Plant(x) ∨ Animal(x))', '∀x (Goat(x) → Animal(x))', '∀x (Dirt(x) → ¬Animal(x))', 'Goat(hulu) ∨ Human(hulu)']	Unknown	hyb
474	1378	Hulu does not eat.	['All humans eat.', 'If something eats, then it is not a plant.', 'A thing is either plant or animal.', 'All goats are animals.', 'No dirt is an animal.', 'Hulu is a goat or a human.']	['∀x (Human(x) → Eat(x))', '∀x (Eat(x) → ¬Plant(x))', '∀x (Plant(x) ∨ Animal(x))', '∀x (Goat(x) → Animal(x))', '∀x (Dirt(x) → ¬Animal(x))', 'Goat(hulu) ∨ Human(hulu)']	Unknown	hyb
474	1379	Hulu is dirt.	['All humans eat.', 'If something eats, then it is not a plant.', 'A thing is either plant or animal.', 'All goats are animals.', 'No dirt is an animal.', 'Hulu is a goat or a human.']	['∀x (Human(x) → Eat(x))', '∀x (Eat(x) → ¬Plant(x))', '∀x (Plant(x) ∨ Animal(x))', '∀x (Goat(x) → Animal(x))', '∀x (Dirt(x) → ¬Animal(x))', 'Goat(hulu) ∨ Human(hulu)']	False	hyb
474	1380	Hulu is an animal or dirt.	['All humans eat.', 'If something eats, then it is not a plant.', 'A thing is either plant or animal.', 'All goats are animals.', 'No dirt is an animal.', 'Hulu is a goat or a human.']	['∀x (Human(x) → Eat(x))', '∀x (Eat(x) → ¬Plant(x))', '∀x (Plant(x) ∨ Animal(x))', '∀x (Goat(x) → Animal(x))', '∀x (Dirt(x) → ¬Animal(x))', 'Goat(hulu) ∨ Human(hulu)']	True	hyb
474	1381	Hulu is either an animal or dirt.	['All humans eat.', 'If something eats, then it is not a plant.', 'A thing is either plant or animal.', 'All goats are animals.', 'No dirt is an animal.', 'Hulu is a goat or a human.']	['∀x (Human(x) → Eat(x))', '∀x (Eat(x) → ¬Plant(x))', '∀x (Plant(x) ∨ Animal(x))', '∀x (Goat(x) → Animal(x))', '∀x (Dirt(x) → ¬Animal(x))', 'Goat(hulu) ∨ Human(hulu)']	True	hyb
474	1382	If Hulu is either an animal or dirt, then Hulu eats and is dirt.	['All humans eat.', 'If something eats, then it is not a plant.', 'A thing is either plant or animal.', 'All goats are animals.', 'No dirt is an animal.', 'Hulu is a goat or a human.']	['∀x (Human(x) → Eat(x))', '∀x (Eat(x) → ¬Plant(x))', '∀x (Plant(x) ∨ Animal(x))', '∀x (Goat(x) → Animal(x))', '∀x (Dirt(x) → ¬Animal(x))', 'Goat(hulu) ∨ Human(hulu)']	False	hyb
47	136	The Controlled Substances Act prevents harmful things.	['A controlled substance is a drug.', 'There exist both harmful and beneficial controlled substances.', 'If a child is exposed to a controlled substance, he or she is in chemical endangerment.', 'Chemical Endangerment is harmful. ', 'The Controlled Substances Act was an act passed in 1971.', 'Some Acts prevent harmful things.']	['∀x (ControlledSubstances(x) → Drugs(x))', '∃x ∃x (ControlledSubstances(x) ∧ ControlledSubstances(y) ∧ Beneficial(x) ∧ Harmful(y))', '∀x ∀y (ExposedToControlledSubstance(x, y) → ChemicalEndangerment(x))', '∀x (ChemicalEndangerment(x) → Harmful(x))', 'PassedIn(controlledSubstancesAct, year1971) ∧ Act(controlledSubstancesAct)', '∃x (Act(x) ∧ PreventsHarm(x))']	Unknown	wiki
47	137	Some drugs are beneficial.	['A controlled substance is a drug.', 'There exist both harmful and beneficial controlled substances.', 'If a child is exposed to a controlled substance, he or she is in chemical endangerment.', 'Chemical Endangerment is harmful. ', 'The Controlled Substances Act was an act passed in 1971.', 'Some Acts prevent harmful things.']	['∀x (ControlledSubstances(x) → Drugs(x))', '∃x ∃x (ControlledSubstances(x) ∧ ControlledSubstances(y) ∧ Beneficial(x) ∧ Harmful(y))', '∀x ∀y (ExposedToControlledSubstance(x, y) → ChemicalEndangerment(x))', '∀x (ChemicalEndangerment(x) → Harmful(x))', 'PassedIn(controlledSubstancesAct, year1971) ∧ Act(controlledSubstancesAct)', '∃x (Act(x) ∧ PreventsHarm(x))']	True	wiki
47	138	A child in chemical endangerment is in harm.	['A controlled substance is a drug.', 'There exist both harmful and beneficial controlled substances.', 'If a child is exposed to a controlled substance, he or she is in chemical endangerment.', 'Chemical Endangerment is harmful. ', 'The Controlled Substances Act was an act passed in 1971.', 'Some Acts prevent harmful things.']	['∀x (ControlledSubstances(x) → Drugs(x))', '∃x ∃x (ControlledSubstances(x) ∧ ControlledSubstances(y) ∧ Beneficial(x) ∧ Harmful(y))', '∀x ∀y (ExposedToControlledSubstance(x, y) → ChemicalEndangerment(x))', '∀x (ChemicalEndangerment(x) → Harmful(x))', 'PassedIn(controlledSubstancesAct, year1971) ∧ Act(controlledSubstancesAct)', '∃x (Act(x) ∧ PreventsHarm(x))']	True	wiki
321	821	Mark Zuckerberg is an entrepreneur.	['No people who work at corporate jobs are starting a new company.', 'All entrepreneurs are starting a new company.', 'All risk-averse people are people who work at corporate jobs.', 'All people who hate working for others are entrepreneurs.', 'If Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse person.']	['∀x (WorkAtCorporateJobs(x) → ¬StartingANewCompany(x))', ' ∀x (Entrepreneurs(x) → StartingANewCompany(x))', ' ∀x (Risk-averse(x) → WorkAtCorporateJobs(x))', ' ∀x (HateWorkingForOthers(x) → Entrepreneurs(x))', ' ¬Entrepreneurs(markZuckerberg) ∨ ¬HateWorkingForOthers(markZuckerberg) → ¬Risk-averse(markZuckerberg)']	Unknown	hyb
321	822	Mark Zuckerberg is a risk-averse person.	['No people who work at corporate jobs are starting a new company.', 'All entrepreneurs are starting a new company.', 'All risk-averse people are people who work at corporate jobs.', 'All people who hate working for others are entrepreneurs.', 'If Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse person.']	['∀x (WorkAtCorporateJobs(x) → ¬StartingANewCompany(x))', ' ∀x (Entrepreneurs(x) → StartingANewCompany(x))', ' ∀x (Risk-averse(x) → WorkAtCorporateJobs(x))', ' ∀x (HateWorkingForOthers(x) → Entrepreneurs(x))', ' ¬Entrepreneurs(markZuckerberg) ∨ ¬HateWorkingForOthers(markZuckerberg) → ¬Risk-averse(markZuckerberg)']	False	hyb
321	823	Mark Zuckerberg is not a risk-averse person.	['No people who work at corporate jobs are starting a new company.', 'All entrepreneurs are starting a new company.', 'All risk-averse people are people who work at corporate jobs.', 'All people who hate working for others are entrepreneurs.', 'If Mark Zuckerberg is neither an entrepreneur nor a person who hates working for others, then Mark Zuckerberg is not a risk-averse person.']	['∀x (WorkAtCorporateJobs(x) → ¬StartingANewCompany(x))', ' ∀x (Entrepreneurs(x) → StartingANewCompany(x))', ' ∀x (Risk-averse(x) → WorkAtCorporateJobs(x))', ' ∀x (HateWorkingForOthers(x) → Entrepreneurs(x))', ' ¬Entrepreneurs(markZuckerberg) ∨ ¬HateWorkingForOthers(markZuckerberg) → ¬Risk-averse(markZuckerberg)']	True	hyb
200	573	If someone is cooking downstairs, it will always cause the first floor to become smokey.	['There are two kitchens in the house: the upstairs kitchen and the downstairs kitchen.', 'When someone is cooking in the downstairs kitchen, the first floor becomes smokey unless the air conditioner is running.', 'If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor.']	['∀x (Kitchen(x) → Up(x) ⊕ Down(x))', '(Cook(downstairs) ∧ ¬Run(ac)) → Smokey(firstFloor)', '(Cook(downstairs) ∧ Run(ac)) → Smokey(secondFloor)']	Unknown	wiki
200	574	If someone is cooking upstairs, the first floor will become smokey.	['There are two kitchens in the house: the upstairs kitchen and the downstairs kitchen.', 'When someone is cooking in the downstairs kitchen, the first floor becomes smokey unless the air conditioner is running.', 'If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor.']	['∀x (Kitchen(x) → Up(x) ⊕ Down(x))', '(Cook(downstairs) ∧ ¬Run(ac)) → Smokey(firstFloor)', '(Cook(downstairs) ∧ Run(ac)) → Smokey(secondFloor)']	Unknown	wiki
200	575	If someone is cooking downstairs and the air conditioner is running, there will be smoke upstairs.	['There are two kitchens in the house: the upstairs kitchen and the downstairs kitchen.', 'When someone is cooking in the downstairs kitchen, the first floor becomes smokey unless the air conditioner is running.', 'If the air conditioner is running and someone is cooking in the downstairs kitchen, all the smoke travels to the second floor.']	['∀x (Kitchen(x) → Up(x) ⊕ Down(x))', '(Cook(downstairs) ∧ ¬Run(ac)) → Smokey(firstFloor)', '(Cook(downstairs) ∧ Run(ac)) → Smokey(secondFloor)']	True	wiki
127	377	A highly developed city is located in the western hemisphere of the earth.	['New York City is Located in the United States of America.', 'United States of America is part of North America.', 'North America is in the western hemisphere of the earth.', 'New York City is a highly developed city.', 'If place A is located in place B and place B is located in place C, then place A is located in place C.']	['Locate(nyc, usa)', 'Locate(usa, northAmerica)', 'Locate(northAmerica, westHemisphere)', 'HighlyDeveloped(nyc)', '∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))']	True	wiki
127	378	USA is not located in western hemisphere of the earth.	['New York City is Located in the United States of America.', 'United States of America is part of North America.', 'North America is in the western hemisphere of the earth.', 'New York City is a highly developed city.', 'If place A is located in place B and place B is located in place C, then place A is located in place C.']	['Locate(nyc, usa)', 'Locate(usa, northAmerica)', 'Locate(northAmerica, westHemisphere)', 'HighlyDeveloped(nyc)', '∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))']	False	wiki
127	379	New York City is located in the New York State.	['New York City is Located in the United States of America.', 'United States of America is part of North America.', 'North America is in the western hemisphere of the earth.', 'New York City is a highly developed city.', 'If place A is located in place B and place B is located in place C, then place A is located in place C.']	['Locate(nyc, usa)', 'Locate(usa, northAmerica)', 'Locate(northAmerica, westHemisphere)', 'HighlyDeveloped(nyc)', '∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))']	Unknown	wiki
146	429	There exists a poem written by an ancient Roman writer with a strong analogy of human aging.	['Callus 4 is a poem that was written by the ancient Roman writer Catullus.', 'Callus 4 is a story about the retirement of a well-traveled ship.', 'There is a strong analogy of human aging in the poem Callus 4.', 'Callus 4 is written in an unusual iambic trimeter to convey a sense of speed over the waves.']	['Poem(callus4) ∧ WrittenBy(callus4, catullus) ∧ Roman(catullus)', 'RetirementShip(callus4)', 'Poem(callus4) → AgingAnalogy(callus4)', 'Poem(callus4) → Lambic(callus4) ∧ Waves(callus4)']	True	wiki
146	430	There exists a poem written by an ancient Roman writer written in iambic petameter.	['Callus 4 is a poem that was written by the ancient Roman writer Catullus.', 'Callus 4 is a story about the retirement of a well-traveled ship.', 'There is a strong analogy of human aging in the poem Callus 4.', 'Callus 4 is written in an unusual iambic trimeter to convey a sense of speed over the waves.']	['Poem(callus4) ∧ WrittenBy(callus4, catullus) ∧ Roman(catullus)', 'RetirementShip(callus4)', 'Poem(callus4) → AgingAnalogy(callus4)', 'Poem(callus4) → Lambic(callus4) ∧ Waves(callus4)']	Unknown	wiki
146	431	Callus 4 is written in an unusual iambic trimeter to convey a strong analogy of human aging.	['Callus 4 is a poem that was written by the ancient Roman writer Catullus.', 'Callus 4 is a story about the retirement of a well-traveled ship.', 'There is a strong analogy of human aging in the poem Callus 4.', 'Callus 4 is written in an unusual iambic trimeter to convey a sense of speed over the waves.']	['Poem(callus4) ∧ WrittenBy(callus4, catullus) ∧ Roman(catullus)', 'RetirementShip(callus4)', 'Poem(callus4) → AgingAnalogy(callus4)', 'Poem(callus4) → Lambic(callus4) ∧ Waves(callus4)']	False	wiki
235	671	Michael Crichton has directed a film about robots.	['Westworld is an American science fiction-thriller TV series.', 'In 2016, a new television series named Westworld debuted on HBO.', 'The TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton.', 'The 1973 film Westworld is about robots that malfunction and begin killing the human visitors.']	['TVSeries(westworld) ∧ American(westworld) ∧ ScienceFictionThriller(westworld)', 'Debut(westworld, year2016)', '∃x (Adapt(westworld, x) ∧ Produce(x, year1973) ∧ Write(michael, x) ∧ Direct(michael, x))', 'About(westworld, robots)']	Unknown	wiki
235	672	An American TV series debuted in 2016.	['Westworld is an American science fiction-thriller TV series.', 'In 2016, a new television series named Westworld debuted on HBO.', 'The TV series Westworld is adapted from the original film in 1973, which was written and directed by Michael Crichton.', 'The 1973 film Westworld is about robots that malfunction and begin killing the human visitors.']	['TVSeries(westworld) ∧ American(westworld) ∧ ScienceFictionThriller(westworld)', 'Debut(westworld, year2016)', '∃x (Adapt(westworld, x) ∧ Produce(x, year1973) ∧ Write(michael, x) ∧ Direct(michael, x))', 'About(westworld, robots)']	True	wiki
231	659	Russia did not win fewer gold medals than China.	['The 2008 Summer Olympics were held in Beijing, China.', 'The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.', 'China won the most gold medals (48) in the 2008 Summer Olympics.', 'The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.', 'The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.', 'If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.', '87 countries won at least one medal during the 2008 Games.']	['HeldIn(summer2008olympics, beijingchina)', 'SecondToBe(summer2008olympics, heldincommuniststate)', 'Won(china, mostgoldmedals)', 'Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)', 'Placed(russia, thirdingoldmedals)', '∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))', '∃x (Country(x) ∧ Won(x, medal))']	False	wiki
231	660	The United States won fewer gold medals than China.	['The 2008 Summer Olympics were held in Beijing, China.', 'The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.', 'China won the most gold medals (48) in the 2008 Summer Olympics.', 'The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.', 'The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.', 'If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.', '87 countries won at least one medal during the 2008 Games.']	['HeldIn(summer2008olympics, beijingchina)', 'SecondToBe(summer2008olympics, heldincommuniststate)', 'Won(china, mostgoldmedals)', 'Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)', 'Placed(russia, thirdingoldmedals)', '∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))', '∃x (Country(x) ∧ Won(x, medal))']	Unknown	wiki
231	661	Russia won fewer gold medals than China.	['The 2008 Summer Olympics were held in Beijing, China.', 'The 2008 Summer Olympics were the second Summer Olympic Games to be held in a communist state.', 'China won the most gold medals (48) in the 2008 Summer Olympics.', 'The United States placed second in the gold medal tally but won the highest number of medals overall (112) in the 2008 Summer Olympics.', 'The third place in the gold medal tally was achieved by Russia in the 2008 Summer Olympics.', 'If a country places third in gold medals, then they had fewer gold medals than the team that won the most gold medals.', '87 countries won at least one medal during the 2008 Games.']	['HeldIn(summer2008olympics, beijingchina)', 'SecondToBe(summer2008olympics, heldincommuniststate)', 'Won(china, mostgoldmedals)', 'Placed(unitedstates, secondingoldmedals) ∧ Won(unitedstates, highestnumberofmedals)', 'Placed(russia, thirdingoldmedals)', '∀x ∀y (Placed(x, thirdingoldmedals) ∧ Won(y, mostgoldmedals) → FewerGoldMedalsThan(x, y))', '∃x (Country(x) ∧ Won(x, medal))']	True	wiki
27	78	Xiangshan and Diecai are districts in the same city.	['Xiufeng, Xiangshan, Diecai, Qixing are districts in the city of Guilin.', 'Yangshuo is not a district in Guilin. ']	['DistrictIn(xiufeng, guilin) ∧ DistrictIn(xiangshan, guilin) ∧ DistrictIn(diecai, guilin) ∧ DistrictIn(qixing, guilin) ∧ City(guilin)', '¬DistrictIn(yangshuo, guilin)']	True	wiki
27	79	Xiufeng is in Guilin.	['Xiufeng, Xiangshan, Diecai, Qixing are districts in the city of Guilin.', 'Yangshuo is not a district in Guilin. ']	['DistrictIn(xiufeng, guilin) ∧ DistrictIn(xiangshan, guilin) ∧ DistrictIn(diecai, guilin) ∧ DistrictIn(qixing, guilin) ∧ City(guilin)', '¬DistrictIn(yangshuo, guilin)']	True	wiki
27	80	Kowloon District is in Hong Kong.	['Xiufeng, Xiangshan, Diecai, Qixing are districts in the city of Guilin.', 'Yangshuo is not a district in Guilin. ']	['DistrictIn(xiufeng, guilin) ∧ DistrictIn(xiangshan, guilin) ∧ DistrictIn(diecai, guilin) ∧ DistrictIn(qixing, guilin) ∧ City(guilin)', '¬DistrictIn(yangshuo, guilin)']	Unknown	wiki
375	1004	Michael enjoys going out often to restaurants with friends.	['All people who grow their own fresh vegetables in their home garden also have ample space.', 'If people are young working professionals who live in large cities, then they do not have ample space.', 'If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.', 'If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.', 'If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. ', 'Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food.']	['∀x (Garden(x) → Space(x))', '∀x (Professional(x) → ¬Space(x))', '∀x (Takeout(x) → Garden(x))', '∀x (GoingOut(x) → Takeout(x))', '∀x (Homecooked(x) → GoingOut(x))', 'Garden(michael) ∨ Homecooked(michael)']	Unknown	hyb
375	1005	Michael is a young working professional who lives in large cities.	['All people who grow their own fresh vegetables in their home garden also have ample space.', 'If people are young working professionals who live in large cities, then they do not have ample space.', 'If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.', 'If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.', 'If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. ', 'Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food.']	['∀x (Garden(x) → Space(x))', '∀x (Professional(x) → ¬Space(x))', '∀x (Takeout(x) → Garden(x))', '∀x (GoingOut(x) → Takeout(x))', '∀x (Homecooked(x) → GoingOut(x))', 'Garden(michael) ∨ Homecooked(michael)']	False	hyb
375	1006	Michael grows his own fresh vegetables in their home garden or is a young working professional who lives in large cities.	['All people who grow their own fresh vegetables in their home garden also have ample space.', 'If people are young working professionals who live in large cities, then they do not have ample space.', 'If people order takeout from delivery services often, then they grow their own fresh vegetables in their home garden.', 'If people enjoy going out often to restaurants with friends, then they order takeout from delivery services often.', 'If people regularly tout the benefits of homegrown and homecooked meals over fast food, then they enjoy going out often to restaurants with friends. ', 'Michael grows his own fresh vegetables in his home garden or regularly touts the benefits of homegrown and homecooked meals over fast food.']	['∀x (Garden(x) → Space(x))', '∀x (Professional(x) → ¬Space(x))', '∀x (Takeout(x) → Garden(x))', '∀x (GoingOut(x) → Takeout(x))', '∀x (Homecooked(x) → GoingOut(x))', 'Garden(michael) ∨ Homecooked(michael)']	True	hyb
62	184	iPod1 is easy to operate.	['All devices belonging to the company are connected to Google Home. ', "All devices belonging to employees are connected to the company's wifi. ", 'All devices connected to Google Home are controlled by the managers. ', "All devices that connect to the company's wifi are easy to operate. ", 'IPod1 belongs to employees. ']	['∀x (Company(x) → GoogleHome(x))', '∀x (Employee(x) → Wifi(x))', '∀x (GoogleHome(x) → Controlled(x))', '∀x (Wifi(x) → EasyToOperate(x))', 'Employee(iPod1)']	True	wiki
62	185	iPod1 is controlled by managers.	['All devices belonging to the company are connected to Google Home. ', "All devices belonging to employees are connected to the company's wifi. ", 'All devices connected to Google Home are controlled by the managers. ', "All devices that connect to the company's wifi are easy to operate. ", 'IPod1 belongs to employees. ']	['∀x (Company(x) → GoogleHome(x))', '∀x (Employee(x) → Wifi(x))', '∀x (GoogleHome(x) → Controlled(x))', '∀x (Wifi(x) → EasyToOperate(x))', 'Employee(iPod1)']	Unknown	wiki
62	186	iPod1 is connected to Google Home.	['All devices belonging to the company are connected to Google Home. ', "All devices belonging to employees are connected to the company's wifi. ", 'All devices connected to Google Home are controlled by the managers. ', "All devices that connect to the company's wifi are easy to operate. ", 'IPod1 belongs to employees. ']	['∀x (Company(x) → GoogleHome(x))', '∀x (Employee(x) → Wifi(x))', '∀x (GoogleHome(x) → Controlled(x))', '∀x (Wifi(x) → EasyToOperate(x))', 'Employee(iPod1)']	Unknown	wiki
407	1135	Ryan is interesting as an individual performer.	['No touring musicians are permanent members of an orchestra.', 'Musicians are either permanent members of an orchestra or have a unique musical voice or style.', 'All musicians who have a unique musical voice or style are interesting as individual performers.', 'All musicians who are interesting as individual performers are capable of attracting large audiences.', 'If Ryan is interesting as an individual performer and has a unique musical voice or style, then Ryan is either a touring soloist musician and capable of attracting large audiences, or neither a touring soloist musician nor capable of attracting large audiences.']	['∀x (Orchestra(x) → ¬Touring(x))', '∀x (Orchestra(x) ⊕ Unique(x))', '∀x (Unique(x) → Interesting(x))', '∀x (Interesting(x) → Capable(x))', '(Interesting(ryan) ∧ Unique(ryan)) → ¬(Touring(ryan) ⊕ Capable(ryan))']	Unknown	hyb
407	1136	Ryan is either a permanent member of an orchestra or a touring soloist musician.	['No touring musicians are permanent members of an orchestra.', 'Musicians are either permanent members of an orchestra or have a unique musical voice or style.', 'All musicians who have a unique musical voice or style are interesting as individual performers.', 'All musicians who are interesting as individual performers are capable of attracting large audiences.', 'If Ryan is interesting as an individual performer and has a unique musical voice or style, then Ryan is either a touring soloist musician and capable of attracting large audiences, or neither a touring soloist musician nor capable of attracting large audiences.']	['∀x (Orchestra(x) → ¬Touring(x))', '∀x (Orchestra(x) ⊕ Unique(x))', '∀x (Unique(x) → Interesting(x))', '∀x (Interesting(x) → Capable(x))', '(Interesting(ryan) ∧ Unique(ryan)) → ¬(Touring(ryan) ⊕ Capable(ryan))']	True	hyb
407	1137	Ryan is either a permanent member of an orchestra or has a unique musical voice or style.	['No touring musicians are permanent members of an orchestra.', 'Musicians are either permanent members of an orchestra or have a unique musical voice or style.', 'All musicians who have a unique musical voice or style are interesting as individual performers.', 'All musicians who are interesting as individual performers are capable of attracting large audiences.', 'If Ryan is interesting as an individual performer and has a unique musical voice or style, then Ryan is either a touring soloist musician and capable of attracting large audiences, or neither a touring soloist musician nor capable of attracting large audiences.']	['∀x (Orchestra(x) → ¬Touring(x))', '∀x (Orchestra(x) ⊕ Unique(x))', '∀x (Unique(x) → Interesting(x))', '∀x (Interesting(x) → Capable(x))', '(Interesting(ryan) ∧ Unique(ryan)) → ¬(Touring(ryan) ⊕ Capable(ryan))']	True	hyb
482	1411	Harry is cool.	['If someone yells, then they are not cool.', 'If someone is angry, then they yell.', 'If someone flies, then they are cool.', 'Every person that knows magic can fly.', 'All wizards know magic.', 'Harry either yells and flies, or neither yells nor flies.', 'Potter is a wizard and flies.']	['∀x (Yell(x) → ¬Cool(x))', '∀x (Angry(x) → Yell(x))', '∀x (Fly(x) → Cool(x))', '∀x (KnowMagic(x) → Fly(x))', '∀x (Wizard(x) → KnowMagic(x))', '(Yell(harry) ∧ Fly(harry)) ⊕ (¬Yell(harry) ∧ ¬Fly(harry))', 'Wizard(potter) ∧ Fly(potter)']	Unknown	hyb
482	1412	Harry is not cool.	['If someone yells, then they are not cool.', 'If someone is angry, then they yell.', 'If someone flies, then they are cool.', 'Every person that knows magic can fly.', 'All wizards know magic.', 'Harry either yells and flies, or neither yells nor flies.', 'Potter is a wizard and flies.']	['∀x (Yell(x) → ¬Cool(x))', '∀x (Angry(x) → Yell(x))', '∀x (Fly(x) → Cool(x))', '∀x (KnowMagic(x) → Fly(x))', '∀x (Wizard(x) → KnowMagic(x))', '(Yell(harry) ∧ Fly(harry)) ⊕ (¬Yell(harry) ∧ ¬Fly(harry))', 'Wizard(potter) ∧ Fly(potter)']	Unknown	hyb
482	1413	Harry is a wizard or angry.	['If someone yells, then they are not cool.', 'If someone is angry, then they yell.', 'If someone flies, then they are cool.', 'Every person that knows magic can fly.', 'All wizards know magic.', 'Harry either yells and flies, or neither yells nor flies.', 'Potter is a wizard and flies.']	['∀x (Yell(x) → ¬Cool(x))', '∀x (Angry(x) → Yell(x))', '∀x (Fly(x) → Cool(x))', '∀x (KnowMagic(x) → Fly(x))', '∀x (Wizard(x) → KnowMagic(x))', '(Yell(harry) ∧ Fly(harry)) ⊕ (¬Yell(harry) ∧ ¬Fly(harry))', 'Wizard(potter) ∧ Fly(potter)']	False	hyb
482	1414	Harry is neither a wizard nor angry.	['If someone yells, then they are not cool.', 'If someone is angry, then they yell.', 'If someone flies, then they are cool.', 'Every person that knows magic can fly.', 'All wizards know magic.', 'Harry either yells and flies, or neither yells nor flies.', 'Potter is a wizard and flies.']	['∀x (Yell(x) → ¬Cool(x))', '∀x (Angry(x) → Yell(x))', '∀x (Fly(x) → Cool(x))', '∀x (KnowMagic(x) → Fly(x))', '∀x (Wizard(x) → KnowMagic(x))', '(Yell(harry) ∧ Fly(harry)) ⊕ (¬Yell(harry) ∧ ¬Fly(harry))', 'Wizard(potter) ∧ Fly(potter)']	True	hyb
436	1253	G-910 is displayed on the homepage.	['Products are either produced in China or the US. ', 'All produced in China are labeled. ', 'All produced in the US are sold in the US. ', 'If labeled, then the product is cheaper. ', 'All sold in the US are sold in Walmart. ', 'All displayed on the homepage are sold in Walmart. ', 'No products returned by customers are sold in Walmart. ', 'G-910 is either displayed on the homepage or cheaper.']	['∀x (China(x) ⊕ US(x))', '∀x (China(x) → Labeled(x))', '∀x (US(x) → SoldInUS(x))', '∀x (Labeled(x) → Cheaper(x))', '∀x (SoldInUS(x) → SoldInWalmart(x))', '∀x (DisplayedInHomepage(x) → SoldInWalmart(x))', '∀x (ReturnedByCustomer(x) → ¬SoldInWalmart(x))', '¬(DisplayedInHomepage(g910) ⊕ Cheaper(g910))']	Unknown	hyb
436	1254	G-910 is not displayed on the homepage.	['Products are either produced in China or the US. ', 'All produced in China are labeled. ', 'All produced in the US are sold in the US. ', 'If labeled, then the product is cheaper. ', 'All sold in the US are sold in Walmart. ', 'All displayed on the homepage are sold in Walmart. ', 'No products returned by customers are sold in Walmart. ', 'G-910 is either displayed on the homepage or cheaper.']	['∀x (China(x) ⊕ US(x))', '∀x (China(x) → Labeled(x))', '∀x (US(x) → SoldInUS(x))', '∀x (Labeled(x) → Cheaper(x))', '∀x (SoldInUS(x) → SoldInWalmart(x))', '∀x (DisplayedInHomepage(x) → SoldInWalmart(x))', '∀x (ReturnedByCustomer(x) → ¬SoldInWalmart(x))', '¬(DisplayedInHomepage(g910) ⊕ Cheaper(g910))']	Unknown	hyb
436	1255	G-910 is a product returned by customers.	['Products are either produced in China or the US. ', 'All produced in China are labeled. ', 'All produced in the US are sold in the US. ', 'If labeled, then the product is cheaper. ', 'All sold in the US are sold in Walmart. ', 'All displayed on the homepage are sold in Walmart. ', 'No products returned by customers are sold in Walmart. ', 'G-910 is either displayed on the homepage or cheaper.']	['∀x (China(x) ⊕ US(x))', '∀x (China(x) → Labeled(x))', '∀x (US(x) → SoldInUS(x))', '∀x (Labeled(x) → Cheaper(x))', '∀x (SoldInUS(x) → SoldInWalmart(x))', '∀x (DisplayedInHomepage(x) → SoldInWalmart(x))', '∀x (ReturnedByCustomer(x) → ¬SoldInWalmart(x))', '¬(DisplayedInHomepage(g910) ⊕ Cheaper(g910))']	False	hyb
436	1256	G-910 is a product returned by customers or sold in Walmart.	['Products are either produced in China or the US. ', 'All produced in China are labeled. ', 'All produced in the US are sold in the US. ', 'If labeled, then the product is cheaper. ', 'All sold in the US are sold in Walmart. ', 'All displayed on the homepage are sold in Walmart. ', 'No products returned by customers are sold in Walmart. ', 'G-910 is either displayed on the homepage or cheaper.']	['∀x (China(x) ⊕ US(x))', '∀x (China(x) → Labeled(x))', '∀x (US(x) → SoldInUS(x))', '∀x (Labeled(x) → Cheaper(x))', '∀x (SoldInUS(x) → SoldInWalmart(x))', '∀x (DisplayedInHomepage(x) → SoldInWalmart(x))', '∀x (ReturnedByCustomer(x) → ¬SoldInWalmart(x))', '¬(DisplayedInHomepage(g910) ⊕ Cheaper(g910))']	True	hyb
436	1257	G-910 is either returned by customers or sold in Walmart.	['Products are either produced in China or the US. ', 'All produced in China are labeled. ', 'All produced in the US are sold in the US. ', 'If labeled, then the product is cheaper. ', 'All sold in the US are sold in Walmart. ', 'All displayed on the homepage are sold in Walmart. ', 'No products returned by customers are sold in Walmart. ', 'G-910 is either displayed on the homepage or cheaper.']	['∀x (China(x) ⊕ US(x))', '∀x (China(x) → Labeled(x))', '∀x (US(x) → SoldInUS(x))', '∀x (Labeled(x) → Cheaper(x))', '∀x (SoldInUS(x) → SoldInWalmart(x))', '∀x (DisplayedInHomepage(x) → SoldInWalmart(x))', '∀x (ReturnedByCustomer(x) → ¬SoldInWalmart(x))', '¬(DisplayedInHomepage(g910) ⊕ Cheaper(g910))']	True	hyb
354	944	Marcy either orders a lot of Amazon packages or saves a lot of money.	['People either order a lot of Amazon packages or are environmentally conscious.', 'If people order a lot of Amazon packages, then they get a lot of daily mail delivered.', 'If people are environmentally conscious, then they have solar panels in their homes.', 'If people get a lot of daily mail delivered, then they are very involved with their neighborhood.', 'If people have solar panels in their homes, then they save a lot of money.', 'If Marcy either gets a lot of mail and is very involved with her neighborhood or if she does not order a lot of Amazon packages nor is very involved with her neighborhood, then Marcy does not both get a lot of daily mail and order a lot of Amazon packages. ']	['∀x (Amazon(x) ⊕ Environmental(x))', '∀x (Amazon(x) → DailyMail(x))', '∀x (Environmental(x) → Solar(x))', '∀x (DailyMail(x) → Neighborhood(x))', '∀x (Solar(x) → SaveMoney(x))', '¬(DailyMail(marcy) ⊕ Neighborhood(marcy)) → (¬DailyMail(marcy) ∨ ¬Amazon(marcy))']	True	hyb
354	945	If Marcy is not a person who orders a lot of Amazon packages and is very environmentally conscious, then Taylor is not someone who saves a lot of money and is environmentally conscious.	['People either order a lot of Amazon packages or are environmentally conscious.', 'If people order a lot of Amazon packages, then they get a lot of daily mail delivered.', 'If people are environmentally conscious, then they have solar panels in their homes.', 'If people get a lot of daily mail delivered, then they are very involved with their neighborhood.', 'If people have solar panels in their homes, then they save a lot of money.', 'If Marcy either gets a lot of mail and is very involved with her neighborhood or if she does not order a lot of Amazon packages nor is very involved with her neighborhood, then Marcy does not both get a lot of daily mail and order a lot of Amazon packages. ']	['∀x (Amazon(x) ⊕ Environmental(x))', '∀x (Amazon(x) → DailyMail(x))', '∀x (Environmental(x) → Solar(x))', '∀x (DailyMail(x) → Neighborhood(x))', '∀x (Solar(x) → SaveMoney(x))', '¬(DailyMail(marcy) ⊕ Neighborhood(marcy)) → (¬DailyMail(marcy) ∨ ¬Amazon(marcy))']	False	hyb
172	497	When the police complete investigations, the prosecutor will prosecute the offender at an appropriate court.	['Indonesia is a country.', 'In Indonesia, the prosecutor only personally investigates cases of some special crimes.', 'Corruption is a type of crime.', 'Once the police complete investigations of a crime, they hand the evidence to the prosecutor. ', 'Evidence can be either satisfactory or unsatisfactory.', 'If the police hand the evidence to the prosecutor and the evidence is satisfactory, the prosecutor will prosecute the offender in an appropriate court.']	['Country(indonesia)', '∃x ∃y (Country(indonesia) ∧ Prosecutor(x) ∧ Crime(y) → InvestigatePersonally(x, y))', 'Crime(corruption)', '∀x ∀y (Crime(y) ∧ PoliceCompInves(y) ∧ Prosecutor(x) → Evidence(y) ∧ HandToProsecutor(x, y))', '∀x (Crime(x) ∧ Evidence(x) ∧ (Satisfactory(x) ⊕ Unsatisfactory(x)))', '∀x ∀y (Evidence(y) ∧ HandToProsecutor(x, y) ∧ Satisfactory(y) → ProsecuteTheOffender(x, y))']	Unknown	wiki
172	498	In Indonesia, the prosecutor personally investigates cases of corruption.	['Indonesia is a country.', 'In Indonesia, the prosecutor only personally investigates cases of some special crimes.', 'Corruption is a type of crime.', 'Once the police complete investigations of a crime, they hand the evidence to the prosecutor. ', 'Evidence can be either satisfactory or unsatisfactory.', 'If the police hand the evidence to the prosecutor and the evidence is satisfactory, the prosecutor will prosecute the offender in an appropriate court.']	['Country(indonesia)', '∃x ∃y (Country(indonesia) ∧ Prosecutor(x) ∧ Crime(y) → InvestigatePersonally(x, y))', 'Crime(corruption)', '∀x ∀y (Crime(y) ∧ PoliceCompInves(y) ∧ Prosecutor(x) → Evidence(y) ∧ HandToProsecutor(x, y))', '∀x (Crime(x) ∧ Evidence(x) ∧ (Satisfactory(x) ⊕ Unsatisfactory(x)))', '∀x ∀y (Evidence(y) ∧ HandToProsecutor(x, y) ∧ Satisfactory(y) → ProsecuteTheOffender(x, y))']	Unknown	wiki
172	499	When the police complete investigations, the prosecutor investigates in personally.	['Indonesia is a country.', 'In Indonesia, the prosecutor only personally investigates cases of some special crimes.', 'Corruption is a type of crime.', 'Once the police complete investigations of a crime, they hand the evidence to the prosecutor. ', 'Evidence can be either satisfactory or unsatisfactory.', 'If the police hand the evidence to the prosecutor and the evidence is satisfactory, the prosecutor will prosecute the offender in an appropriate court.']	['Country(indonesia)', '∃x ∃y (Country(indonesia) ∧ Prosecutor(x) ∧ Crime(y) → InvestigatePersonally(x, y))', 'Crime(corruption)', '∀x ∀y (Crime(y) ∧ PoliceCompInves(y) ∧ Prosecutor(x) → Evidence(y) ∧ HandToProsecutor(x, y))', '∀x (Crime(x) ∧ Evidence(x) ∧ (Satisfactory(x) ⊕ Unsatisfactory(x)))', '∀x ∀y (Evidence(y) ∧ HandToProsecutor(x, y) ∧ Satisfactory(y) → ProsecuteTheOffender(x, y))']	Unknown	wiki
341	901	Moonwatch is a mechanical watch.	['No watch that is battery-powered is automatic.', 'All digital watches are battery-powered.', 'Some mechanical watches are automatic.', 'All smart watches are digital.', 'Moonwatch is not a digital watch or an automatic.']	['∀x (BatteryPoweredWatch(x) → ¬AutomaticWatch(x))', '∀x (DigitalWatch(x) → BatteryPoweredWatch(x))', '∃x (MechanicalWatch(x) ∧ AutomaticWatch(x))', '∀x (SmartWatch(x) → DigitalWatch(x))', '¬DigitalWatch(moonwatch) ⊕ AutomaticWatch(moonwatch)']	Unknown	hyb
341	902	Moonwatch is a smartwatch and a mechanical watch.	['No watch that is battery-powered is automatic.', 'All digital watches are battery-powered.', 'Some mechanical watches are automatic.', 'All smart watches are digital.', 'Moonwatch is not a digital watch or an automatic.']	['∀x (BatteryPoweredWatch(x) → ¬AutomaticWatch(x))', '∀x (DigitalWatch(x) → BatteryPoweredWatch(x))', '∃x (MechanicalWatch(x) ∧ AutomaticWatch(x))', '∀x (SmartWatch(x) → DigitalWatch(x))', '¬DigitalWatch(moonwatch) ⊕ AutomaticWatch(moonwatch)']	False	hyb
341	903	If Moonwatch is a smartwatch and a mechanical watch, then Moonwatch is not a mechanical watch.	['No watch that is battery-powered is automatic.', 'All digital watches are battery-powered.', 'Some mechanical watches are automatic.', 'All smart watches are digital.', 'Moonwatch is not a digital watch or an automatic.']	['∀x (BatteryPoweredWatch(x) → ¬AutomaticWatch(x))', '∀x (DigitalWatch(x) → BatteryPoweredWatch(x))', '∃x (MechanicalWatch(x) ∧ AutomaticWatch(x))', '∀x (SmartWatch(x) → DigitalWatch(x))', '¬DigitalWatch(moonwatch) ⊕ AutomaticWatch(moonwatch)']	True	hyb
341	904	If Moonwatch is a mechanical or battery-powered watch, then Moonwatch is not a smartwatch.	['No watch that is battery-powered is automatic.', 'All digital watches are battery-powered.', 'Some mechanical watches are automatic.', 'All smart watches are digital.', 'Moonwatch is not a digital watch or an automatic.']	['∀x (BatteryPoweredWatch(x) → ¬AutomaticWatch(x))', '∀x (DigitalWatch(x) → BatteryPoweredWatch(x))', '∃x (MechanicalWatch(x) ∧ AutomaticWatch(x))', '∀x (SmartWatch(x) → DigitalWatch(x))', '¬DigitalWatch(moonwatch) ⊕ AutomaticWatch(moonwatch)']	True	hyb
243	691	John cannot use different condiments to cook.	['If a person can distinguish the taste of different condiments, then he/she can also use different condiments to cook.', 'People who have the talent of cooking can distinguish the taste of different condiments.', 'Only people with the talent of cooking can make delicious meals.', 'If the meal is popular at the party, then it is delicious.', 'John can make meals which are popular at the party.']	['∀x (People(x) ∧ DistinguishCondiments(x) → UseDiffCondiments(x)) ∧ (∃x (People(x) ∧ ¬DistinguishCondiments(x) ∧ UseDiffCondiments(x))) ∧ ¬(∀x (People(x) ∧ DistinguishCondiments(x)))', '∀x (People(x) ∧ TalentCooking(x) → DistinguishCondiments(x))', '∀x ∀y (MakeMeal(x, y) ∧ Delicious(y) ∧ People(x) → TalentCooking(x)) ', '∀x ∀y (MakeMeal(x, y) ∧ People(x) ∧ Popular(y) → Delicious(y))', '∃x (People(john) ∧ MakeMeal(john, x) ∧ Popular(x) ∧ People(peter) ∧ ¬UseDiffCondiments(peter))']	False	wiki
252	701	In Russia, an effective monetary policy is possible.	['Effective monetary policy is possible with successful inflation control and a strong national currency.', 'A country cannot simultaneously regulate the exchange rate and successfully control inflation.', 'The introduction of an embargo on foreign trade goods in a country leads to a sharp decrease in exports.', 'If exports fall sharply, the national currency cannot be in this country.', 'Regulation of the exchange rate is required to have a strong national currency. ', 'There is an embargo on Russian foreign trade goods.']	['∀x (EffMonPolicy(x) → InfControl(x) ∧ StongCurr(x))', '¬(∀x (InfControl(x) ∧ ExRate(x)))', '∀x (Embargo(x) → ExportFall(x))', '∀x (ExportFall(x) → ¬StongCurr(x))', '∀x (ExRate(x) → StongCurr(x))', 'Embargo(russia)']	False	wiki
143	421	Viewers send in funny videos to the French broadcast channel that are in French.	['Video Gag is a French television series that airs weekly.', 'Video Gag airs on the French broadcast channel TF1. ', 'If viewers send in funny videos to the French broadcast channel, then Video Gag airs them on television.', 'All videos aired on Video Gag are in French.']	['∀x (VideoGag(x) → FrenchTelevision(x) ∧ AirsWeekly(x))', '∀x (VideoGag(x) → ChannelTF1(x))', '∀x (FunnyVideos(x) → AirsWeekly(x))', '∀x (VideoGag(x) → AirsWeekly(x) ∧ French(x))']	Unknown	wiki
143	422	Viewers send in funny videos to the French broadcast channel that are in English.	['Video Gag is a French television series that airs weekly.', 'Video Gag airs on the French broadcast channel TF1. ', 'If viewers send in funny videos to the French broadcast channel, then Video Gag airs them on television.', 'All videos aired on Video Gag are in French.']	['∀x (VideoGag(x) → FrenchTelevision(x) ∧ AirsWeekly(x))', '∀x (VideoGag(x) → ChannelTF1(x))', '∀x (FunnyVideos(x) → AirsWeekly(x))', '∀x (VideoGag(x) → AirsWeekly(x) ∧ French(x))']	Unknown	wiki
476	1386	Jack is a thing.	['All phones are things.', 'All cellphones are phones. ', 'All iPhones are cellphones. ', 'All engineers are workers.', 'All workers are human. ', 'Jack is either an engineer or a worker.', 'Jack is is either a human or a phone.']	['∀x (Phone(x) → Thing(x))', '∀x (Cellphone(x) → Phone(x))', '∀x (Iphone(x) → Cellphone(x))', '∀x (Engineer(x) → Worker(x))', '∀x (Worker(x) → Human(x))', 'Engineer(jack) ⊕ Worker(jack) ', 'Human(jack) ⊕ Phone(jack)']	Unknown	hyb
476	1387	Jack is not a thing.	['All phones are things.', 'All cellphones are phones. ', 'All iPhones are cellphones. ', 'All engineers are workers.', 'All workers are human. ', 'Jack is either an engineer or a worker.', 'Jack is is either a human or a phone.']	['∀x (Phone(x) → Thing(x))', '∀x (Cellphone(x) → Phone(x))', '∀x (Iphone(x) → Cellphone(x))', '∀x (Engineer(x) → Worker(x))', '∀x (Worker(x) → Human(x))', 'Engineer(jack) ⊕ Worker(jack) ', 'Human(jack) ⊕ Phone(jack)']	Unknown	hyb
476	1388	Jack is a thing and an iPhone.	['All phones are things.', 'All cellphones are phones. ', 'All iPhones are cellphones. ', 'All engineers are workers.', 'All workers are human. ', 'Jack is either an engineer or a worker.', 'Jack is is either a human or a phone.']	['∀x (Phone(x) → Thing(x))', '∀x (Cellphone(x) → Phone(x))', '∀x (Iphone(x) → Cellphone(x))', '∀x (Engineer(x) → Worker(x))', '∀x (Worker(x) → Human(x))', 'Engineer(jack) ⊕ Worker(jack) ', 'Human(jack) ⊕ Phone(jack)']	False	hyb
476	1389	Jack is not both a thing and an iPhone.	['All phones are things.', 'All cellphones are phones. ', 'All iPhones are cellphones. ', 'All engineers are workers.', 'All workers are human. ', 'Jack is either an engineer or a worker.', 'Jack is is either a human or a phone.']	['∀x (Phone(x) → Thing(x))', '∀x (Cellphone(x) → Phone(x))', '∀x (Iphone(x) → Cellphone(x))', '∀x (Engineer(x) → Worker(x))', '∀x (Worker(x) → Human(x))', 'Engineer(jack) ⊕ Worker(jack) ', 'Human(jack) ⊕ Phone(jack)']	True	hyb
289	738	No phones are electronic.	['All iPhones are electronic.', 'Some phones are iPhones.']	['∀x (IPhone(x) → Electronic(x))', '∃x (Phone(x) ∧ IPhone(x))']	False	wiki
38	111	A museum in NYC includes Byzantine and Islamic Art.	['Metropolitan Museum of Art is a museum in NYC.', 'Whitney Museum of American Art is a museum in NYC.', 'Museum of Modern Art (MoMA) is a museum if NYC. ', 'Metropolitan Museum of Art includes Bytantine and Islamic Art. ', 'Whitney Museum of American Art includes American art.']	['Museum(metropolitanMuseumofArt) ∧ InNYC(metropolitanMuseumofArt)', 'Museum(whitneyMuseumofAmericanArt) ∧ InNYC(whitneyMuseumofAmericanArt)', 'Museum(museumofModernArt) ∧ InNYC(museumofModernArt)', 'Include(metropolitanMuseumofArt, byzantineArt) ∧ Include(metropolitanMuseumofArt, islamicArt)', 'Include(whitneyMuseumofAmericanArt, americanArt)']	True	wiki
38	112	A museum in NYC includes American art.	['Metropolitan Museum of Art is a museum in NYC.', 'Whitney Museum of American Art is a museum in NYC.', 'Museum of Modern Art (MoMA) is a museum if NYC. ', 'Metropolitan Museum of Art includes Bytantine and Islamic Art. ', 'Whitney Museum of American Art includes American art.']	['Museum(metropolitanMuseumofArt) ∧ InNYC(metropolitanMuseumofArt)', 'Museum(whitneyMuseumofAmericanArt) ∧ InNYC(whitneyMuseumofAmericanArt)', 'Museum(museumofModernArt) ∧ InNYC(museumofModernArt)', 'Include(metropolitanMuseumofArt, byzantineArt) ∧ Include(metropolitanMuseumofArt, islamicArt)', 'Include(whitneyMuseumofAmericanArt, americanArt)']	True	wiki
38	113	A museum in NYC includes Greek art.	['Metropolitan Museum of Art is a museum in NYC.', 'Whitney Museum of American Art is a museum in NYC.', 'Museum of Modern Art (MoMA) is a museum if NYC. ', 'Metropolitan Museum of Art includes Bytantine and Islamic Art. ', 'Whitney Museum of American Art includes American art.']	['Museum(metropolitanMuseumofArt) ∧ InNYC(metropolitanMuseumofArt)', 'Museum(whitneyMuseumofAmericanArt) ∧ InNYC(whitneyMuseumofAmericanArt)', 'Museum(museumofModernArt) ∧ InNYC(museumofModernArt)', 'Include(metropolitanMuseumofArt, byzantineArt) ∧ Include(metropolitanMuseumofArt, islamicArt)', 'Include(whitneyMuseumofAmericanArt, americanArt)']	Unknown	wiki
403	1122	Benji is a person who likes eating cheese.	['A person either likes eating cheese or is a francophile.', 'No francophiles are people who like Spain as their favorite country.', 'A person likes Spain as their favorite country or likes eating cheese.', 'Benji is not a person who likes eating cheese and a person who studies Spanish.', 'If Benji is neither a person who studies Spanish nor a person that studies French, then Benji is a person who studies Spanish or a person that studies French.']	['∀x (Spanish(x) ∨ Francophile(x))', '∀x (Francophile(x) → ¬SpainFav(x))', '∀x (SpainFav(x) ∨ Cheese(x))', '¬(Cheese(benji) ∧ Spanish(benji))', '¬(Spanish(benji) ∨ French(benji)) → ¬(Cheese(benji) ⊕ French(benji))']	Unknown	hyb
403	1123	If Benji is either a person who likes eating cheese or a francophile, then Benji is neither a person who studies Spanish nor a person who studies French.	['A person either likes eating cheese or is a francophile.', 'No francophiles are people who like Spain as their favorite country.', 'A person likes Spain as their favorite country or likes eating cheese.', 'Benji is not a person who likes eating cheese and a person who studies Spanish.', 'If Benji is neither a person who studies Spanish nor a person that studies French, then Benji is a person who studies Spanish or a person that studies French.']	['∀x (Spanish(x) ∨ Francophile(x))', '∀x (Francophile(x) → ¬SpainFav(x))', '∀x (SpainFav(x) ∨ Cheese(x))', '¬(Cheese(benji) ∧ Spanish(benji))', '¬(Spanish(benji) ∨ French(benji)) → ¬(Cheese(benji) ⊕ French(benji))']	True	hyb
403	1124	If Benji is a person who likes Spain as their favorite country or studies French, then Benji is either a person who studies Spanish or a person who likes Spain as their favorite country.	['A person either likes eating cheese or is a francophile.', 'No francophiles are people who like Spain as their favorite country.', 'A person likes Spain as their favorite country or likes eating cheese.', 'Benji is not a person who likes eating cheese and a person who studies Spanish.', 'If Benji is neither a person who studies Spanish nor a person that studies French, then Benji is a person who studies Spanish or a person that studies French.']	['∀x (Spanish(x) ∨ Francophile(x))', '∀x (Francophile(x) → ¬SpainFav(x))', '∀x (SpainFav(x) ∨ Cheese(x))', '¬(Cheese(benji) ∧ Spanish(benji))', '¬(Spanish(benji) ∨ French(benji)) → ¬(Cheese(benji) ⊕ French(benji))']	False	hyb
29	84	Gasteren is a Dutch village.	['Gasteren is village located in the province of Drenthe.', 'Drenthe is a Dutch province. ', 'No cities are villages.', 'The population of a village in Drenthe was 155 people.']	['Village(gasteren) ∧ Province(drenthe) ∧ LocatedIn(gasteren, drenthe)', 'Province(drenthe) ∧ Dutch(drenthe)', '∀x (City(x) → ¬Village(x))', '∃x (Population155(x) ∧ Village(x) ∧ LocatedIn(x, drenthe))']	Unknown	wiki
29	85	Gasteren is a city.	['Gasteren is village located in the province of Drenthe.', 'Drenthe is a Dutch province. ', 'No cities are villages.', 'The population of a village in Drenthe was 155 people.']	['Village(gasteren) ∧ Province(drenthe) ∧ LocatedIn(gasteren, drenthe)', 'Province(drenthe) ∧ Dutch(drenthe)', '∀x (City(x) → ¬Village(x))', '∃x (Population155(x) ∧ Village(x) ∧ LocatedIn(x, drenthe))']	False	wiki
29	86	Gasteren has a population of 155.	['Gasteren is village located in the province of Drenthe.', 'Drenthe is a Dutch province. ', 'No cities are villages.', 'The population of a village in Drenthe was 155 people.']	['Village(gasteren) ∧ Province(drenthe) ∧ LocatedIn(gasteren, drenthe)', 'Province(drenthe) ∧ Dutch(drenthe)', '∀x (City(x) → ¬Village(x))', '∃x (Population155(x) ∧ Village(x) ∧ LocatedIn(x, drenthe))']	Unknown	wiki
210	603	Hyraxes lay eggs.	['The only types of mammals that lay eggs are platypuses and echidnas.', 'Platypuses are not hyrax.', 'Echidnas are not hyrax.', 'No mammals are invertebrates.', 'All animals are either vertebrates or invertebrates.', 'Mammals are animals.', 'Hyraxes are mammals.', 'Grebes lay eggs.', 'Grebes are not platypuses and also not echidnas.']	['∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypuses(x) ⊕ Echidnas(x)))', '∀x (Platypuses(x) → ¬Hyrax(x))', '∀x (Echidnas(x) → ¬Hyrax(x))', '∀x (Mammal(x) → ¬Invertebrate(x))', '∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))', '∀x (Mammal(x) → Animal(x))', '∀x (Hyrax(x) → Mammal(x))', '∀x (Grebes(x) → LayEgg(x))', '∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))']	False	wiki
210	604	Grebes are not mammals.	['The only types of mammals that lay eggs are platypuses and echidnas.', 'Platypuses are not hyrax.', 'Echidnas are not hyrax.', 'No mammals are invertebrates.', 'All animals are either vertebrates or invertebrates.', 'Mammals are animals.', 'Hyraxes are mammals.', 'Grebes lay eggs.', 'Grebes are not platypuses and also not echidnas.']	['∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypuses(x) ⊕ Echidnas(x)))', '∀x (Platypuses(x) → ¬Hyrax(x))', '∀x (Echidnas(x) → ¬Hyrax(x))', '∀x (Mammal(x) → ¬Invertebrate(x))', '∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))', '∀x (Mammal(x) → Animal(x))', '∀x (Hyrax(x) → Mammal(x))', '∀x (Grebes(x) → LayEgg(x))', '∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))']	True	wiki
210	605	Platypuses are vertebrates.	['The only types of mammals that lay eggs are platypuses and echidnas.', 'Platypuses are not hyrax.', 'Echidnas are not hyrax.', 'No mammals are invertebrates.', 'All animals are either vertebrates or invertebrates.', 'Mammals are animals.', 'Hyraxes are mammals.', 'Grebes lay eggs.', 'Grebes are not platypuses and also not echidnas.']	['∀x ((Mammal(x) ∧ LayEgg(x)) → (Platypuses(x) ⊕ Echidnas(x)))', '∀x (Platypuses(x) → ¬Hyrax(x))', '∀x (Echidnas(x) → ¬Hyrax(x))', '∀x (Mammal(x) → ¬Invertebrate(x))', '∀x (Animal(x) → Invertebrate(x) ⊕ Vertebrate(x))', '∀x (Mammal(x) → Animal(x))', '∀x (Hyrax(x) → Mammal(x))', '∀x (Grebes(x) → LayEgg(x))', '∀x (Grebes(x) → (¬Platypuses(x) ∧ ¬Echidnas(x)))']	Unknown	wiki
89	271	Bobby Flynn is an Australian citizen.	['Bobby Flynn is a singer-songwriter. ', 'Bobby Flynn finished 7th while competing on Australian Idol.', 'Australian Idol competitors are Australian citizens.', 'The Omega Three band made a nationwide tour in 2007.', 'Bobby Flynn is a member of The Omega Three band.', 'Bobby Flynn was born in Queensland.']	['Singer(bobbyFlynn) ∧ SongWriter(bobbyFlynn)', 'Finished7th(bobbyFlynn) ∧ CompetedOnAustralianIdol(bobbyFlynn)', '∀x (CompetedOnAustralianIdol(x) → AustralianCitizen(x))', 'MadeNationWideTour2007(theOmegaThreeBand) ', 'IsMember(bobbyFlynn, theOmegaThreeBand)', 'BornIn(bobbyFlynn, queensland)']	True	wiki
89	272	Bobby Flynn flew to America in 2007.	['Bobby Flynn is a singer-songwriter. ', 'Bobby Flynn finished 7th while competing on Australian Idol.', 'Australian Idol competitors are Australian citizens.', 'The Omega Three band made a nationwide tour in 2007.', 'Bobby Flynn is a member of The Omega Three band.', 'Bobby Flynn was born in Queensland.']	['Singer(bobbyFlynn) ∧ SongWriter(bobbyFlynn)', 'Finished7th(bobbyFlynn) ∧ CompetedOnAustralianIdol(bobbyFlynn)', '∀x (CompetedOnAustralianIdol(x) → AustralianCitizen(x))', 'MadeNationWideTour2007(theOmegaThreeBand) ', 'IsMember(bobbyFlynn, theOmegaThreeBand)', 'BornIn(bobbyFlynn, queensland)']	Unknown	wiki
89	273	Bobby Flynn was born in Queens.	['Bobby Flynn is a singer-songwriter. ', 'Bobby Flynn finished 7th while competing on Australian Idol.', 'Australian Idol competitors are Australian citizens.', 'The Omega Three band made a nationwide tour in 2007.', 'Bobby Flynn is a member of The Omega Three band.', 'Bobby Flynn was born in Queensland.']	['Singer(bobbyFlynn) ∧ SongWriter(bobbyFlynn)', 'Finished7th(bobbyFlynn) ∧ CompetedOnAustralianIdol(bobbyFlynn)', '∀x (CompetedOnAustralianIdol(x) → AustralianCitizen(x))', 'MadeNationWideTour2007(theOmegaThreeBand) ', 'IsMember(bobbyFlynn, theOmegaThreeBand)', 'BornIn(bobbyFlynn, queensland)']	Unknown	wiki
269	718	All enzymes are proteins.	['All proteins are organic compounds.', 'All enzymes are organic compounds.']	['∀x (Protein(x) → OrganicCompound(x))', '∀x (Enzyme(x) → OrganicCompound(x))']	Unknown	wiki
98	296	There is a series by ABC that was developed by the showrunner of Witches of East End.	['One American screenwriter and producer is Maggie Friedman.', 'Maggie Friedman was the showrunner and executive producer of the lifetime television series Witches of East End.', 'Witches of East End is a fantasy-drama series.', 'Maggie Friedman produced and developed Eastwick.', 'Eastwick is a series by ABC.']	['American(maggiefriedman) ∧ Screenwriter(maggiefriedman) ∧ Producer(maggiefriedman)', 'ShowRunnerOf(maggiefriedman, witchesofeastend) ∧ ExecutiveProducerOf(maggiefriedman, witchesofeastend) ∧ LifetimeTelevisionSeries(maggiefriedman)', 'Fantasy-Drama(witchesofeastend) ∧ Series(witchesofeastend)', 'Produced(maggiefriedman, eastwick) ∧ Developed(maggiefriedman, eastwick)', 'Series(eastwick) ∧ By(eastwick, abc)']	True	wiki
98	297	There isn't a series by ABC that was developed by the showrunner of Witches of East End.	['One American screenwriter and producer is Maggie Friedman.', 'Maggie Friedman was the showrunner and executive producer of the lifetime television series Witches of East End.', 'Witches of East End is a fantasy-drama series.', 'Maggie Friedman produced and developed Eastwick.', 'Eastwick is a series by ABC.']	['American(maggiefriedman) ∧ Screenwriter(maggiefriedman) ∧ Producer(maggiefriedman)', 'ShowRunnerOf(maggiefriedman, witchesofeastend) ∧ ExecutiveProducerOf(maggiefriedman, witchesofeastend) ∧ LifetimeTelevisionSeries(maggiefriedman)', 'Fantasy-Drama(witchesofeastend) ∧ Series(witchesofeastend)', 'Produced(maggiefriedman, eastwick) ∧ Developed(maggiefriedman, eastwick)', 'Series(eastwick) ∧ By(eastwick, abc)']	False	wiki
98	298	Maggie Friedman developed Witches of East End.	['One American screenwriter and producer is Maggie Friedman.', 'Maggie Friedman was the showrunner and executive producer of the lifetime television series Witches of East End.', 'Witches of East End is a fantasy-drama series.', 'Maggie Friedman produced and developed Eastwick.', 'Eastwick is a series by ABC.']	['American(maggiefriedman) ∧ Screenwriter(maggiefriedman) ∧ Producer(maggiefriedman)', 'ShowRunnerOf(maggiefriedman, witchesofeastend) ∧ ExecutiveProducerOf(maggiefriedman, witchesofeastend) ∧ LifetimeTelevisionSeries(maggiefriedman)', 'Fantasy-Drama(witchesofeastend) ∧ Series(witchesofeastend)', 'Produced(maggiefriedman, eastwick) ∧ Developed(maggiefriedman, eastwick)', 'Series(eastwick) ∧ By(eastwick, abc)']	Unknown	wiki
119	359	IBM has an office in London or Zurich.	['Evangelos Eleftheriou is a Greek electrical engineer.', 'Evangelos Eleftheriou worked for IBM in Zurich.', 'If a company has employees working for them somewhere, then they have an office there.', 'IBM is a company.']	['Greek(evangeloseleftheriou) ∧ ElectricalEngineer(evangeloseleftheriou)', 'WorkedFor(evangeloseleftheriou, ibm) ∧ WorkedIn(evangeloseleftheriou, zurich)', '∀x ∀x ∀z (Company(x) ∧ WorkedFor(y, x) ∧ WorkedIn(y, z) → HasOfficeIn(x, z))', 'Company(ibm)']	True	wiki
119	360	No Greeks have worked for IBM.	['Evangelos Eleftheriou is a Greek electrical engineer.', 'Evangelos Eleftheriou worked for IBM in Zurich.', 'If a company has employees working for them somewhere, then they have an office there.', 'IBM is a company.']	['Greek(evangeloseleftheriou) ∧ ElectricalEngineer(evangeloseleftheriou)', 'WorkedFor(evangeloseleftheriou, ibm) ∧ WorkedIn(evangeloseleftheriou, zurich)', '∀x ∀x ∀z (Company(x) ∧ WorkedFor(y, x) ∧ WorkedIn(y, z) → HasOfficeIn(x, z))', 'Company(ibm)']	False	wiki
148	434	"Hooray! Hooray! It's a Holi-Holiday!" was a #1 hit in Germany.	['Before releasing their single, "Hooray! Hooray! It\'s a Holi-Holiday!", Boney M. had had seven consecutive German #1 singles.', '"Hooray! Hooray! It\'s a Holi-Holiday!" was a big hit all over Europe.', 'Nevertheless, "Hooray! Hooray! It\'s a Holi-Holiday!" broke Boney M\'s streak of consecutive German #1 singles.', 'A song that peaks below #1 on the german charts is also a song that is not the #1 single']	['∃x (Song(x) ∧ By(x, boneym) ∧ N1GermanSingle(x))', 'Song(hooray) ∧ HitEurope(hooray)', 'Song(hooray) ∧ ¬N1GermanSingle(hooray)', '∀x (PeaksBelowN1(x) ↔ ¬N1GermanSingle(x))']	False	wiki
148	435	"Hooray! Hooray! It's a Holi-Holiday!" peaked below #1 on the German charts.	['Before releasing their single, "Hooray! Hooray! It\'s a Holi-Holiday!", Boney M. had had seven consecutive German #1 singles.', '"Hooray! Hooray! It\'s a Holi-Holiday!" was a big hit all over Europe.', 'Nevertheless, "Hooray! Hooray! It\'s a Holi-Holiday!" broke Boney M\'s streak of consecutive German #1 singles.', 'A song that peaks below #1 on the german charts is also a song that is not the #1 single']	['∃x (Song(x) ∧ By(x, boneym) ∧ N1GermanSingle(x))', 'Song(hooray) ∧ HitEurope(hooray)', 'Song(hooray) ∧ ¬N1GermanSingle(hooray)', '∀x (PeaksBelowN1(x) ↔ ¬N1GermanSingle(x))']	True	wiki
148	436	"Hooray! Hooray! It's a Holi-Holiday!" peaked at #3 on the UK charts.	['Before releasing their single, "Hooray! Hooray! It\'s a Holi-Holiday!", Boney M. had had seven consecutive German #1 singles.', '"Hooray! Hooray! It\'s a Holi-Holiday!" was a big hit all over Europe.', 'Nevertheless, "Hooray! Hooray! It\'s a Holi-Holiday!" broke Boney M\'s streak of consecutive German #1 singles.', 'A song that peaks below #1 on the german charts is also a song that is not the #1 single']	['∃x (Song(x) ∧ By(x, boneym) ∧ N1GermanSingle(x))', 'Song(hooray) ∧ HitEurope(hooray)', 'Song(hooray) ∧ ¬N1GermanSingle(hooray)', '∀x (PeaksBelowN1(x) ↔ ¬N1GermanSingle(x))']	Unknown	wiki
249	697	Luke can make a good breakfast.	['Every chef can cook.', 'Some people who aren’t chefs can cook.', 'People who cook can make scrambled eggs and pasta.', 'If someone can make cookies and muffins, they are a baker.', 'Bakers who can also make scrambled eggs can make a good breakfast.', 'Luke can make cookies, scrambled eggs, and muffins, but not pasta.']	['∀x (Chef(x) → Cook(x))', '∃x (¬Chef(x) ∧ Cook(x))', '∀x (Cook(x) → (MakeScrambledEggs(x) ∧ MakePasta(x)))', '∀x (MakeCookies(x) ∧ MakeMuffins(x) → Baker(x))', '∀x ((Baker(x) ∧ MakeScrambledEggs(x)) → MakeGoodBreakfast(x))', 'MakeCookies(luke) ∧ MakeScrambledEggs(luke) ∧ MakeMuffins(luke) ∧ ¬MakePasta(luke)']	True	wiki
249	698	Luke is a chef.	['Every chef can cook.', 'Some people who aren’t chefs can cook.', 'People who cook can make scrambled eggs and pasta.', 'If someone can make cookies and muffins, they are a baker.', 'Bakers who can also make scrambled eggs can make a good breakfast.', 'Luke can make cookies, scrambled eggs, and muffins, but not pasta.']	['∀x (Chef(x) → Cook(x))', '∃x (¬Chef(x) ∧ Cook(x))', '∀x (Cook(x) → (MakeScrambledEggs(x) ∧ MakePasta(x)))', '∀x (MakeCookies(x) ∧ MakeMuffins(x) → Baker(x))', '∀x ((Baker(x) ∧ MakeScrambledEggs(x)) → MakeGoodBreakfast(x))', 'MakeCookies(luke) ∧ MakeScrambledEggs(luke) ∧ MakeMuffins(luke) ∧ ¬MakePasta(luke)']	False	wiki
196	561	ETS develops assessments for K-12 statewide as well as entry to US tertiary and quaternary education institutions.	['ETS develops various standardized tests primarily in the United States for K-12 and higher education. ', 'ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.', 'Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ', 'ETS also develops K-12 statewide assessments used for accountability testing in many states.']	['∃x (Develops(ets, x) ∧ StandardizedTest(x) ∧ In(x, unitedstates) ∧ For(x, k-12andhighereducation))', '∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))', '∃x (Develops(ets, x) ∧ AssociatedWith(x, entrytouseducationinstitutions))', '∃x (Develops(ets, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilitytesting))']	True	wiki
196	562	ETS doesn't administer tests internationally.	['ETS develops various standardized tests primarily in the United States for K-12 and higher education. ', 'ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.', 'Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ', 'ETS also develops K-12 statewide assessments used for accountability testing in many states.']	['∃x (Develops(ets, x) ∧ StandardizedTest(x) ∧ In(x, unitedstates) ∧ For(x, k-12andhighereducation))', '∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))', '∃x (Develops(ets, x) ∧ AssociatedWith(x, entrytouseducationinstitutions))', '∃x (Develops(ets, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilitytesting))']	False	wiki
196	563	ETS administers international tests including the TOEFL, GRE and subject tests in China.	['ETS develops various standardized tests primarily in the United States for K-12 and higher education. ', 'ETS administers international tests including the TOEFL, TOEIC, GRE and subject tests in more than 180 countries.', 'Many of the assessments ETS develops are associated with entry to the US tertiary and quaternary education institutions. ', 'ETS also develops K-12 statewide assessments used for accountability testing in many states.']	['∃x (Develops(ets, x) ∧ StandardizedTest(x) ∧ In(x, unitedstates) ∧ For(x, k-12andhighereducation))', '∃x (Administers(ets, x) ∧ InternationalTest(x) ∧ (TOEFL(x) ∨ TOEIC(x) ∨ GRE(x) ∨ SubjectTests(x)))', '∃x (Develops(ets, x) ∧ AssociatedWith(x, entrytouseducationinstitutions))', '∃x (Develops(ets, x) ∧ StateWideAssesment(x) ∧ UsedFor(x, accountabilitytesting))']	Unknown	wiki
373	998	Robert can resist the hallmark delectable drinks and desserts that are famed in Italy.	['All people who enjoy eating gelato ice cream would enjoy a vacation to Italy.', 'There are no people who can resist the hallmark delectable drinks and desserts that are famed in Italy.', 'People either enjoy eating gelato ice cream or love to travel and vacation often.', 'If people often take study abroad semesters to Europe, then they do not regret their college experiences.', 'If people love to travel and vacation often, then they often take study abroad semesters to Europe.', 'Robert either enjoys eating gelato ice cream and loves to travel and vacation often, or he neither enjoys eating gelato ice cream nor loves to travel and vacation often.']	['∀x (Gelato(x) → Italy(x))', '∀x (¬Resist(x))', '∀x (Gelato(x) ∨ Travel(x))', '∀x (Europe(x) → ¬Regret(x))', '∀x (Travel(x) → Europe(x))', '(Gelato(robert) ∧ Travel(robert)) ∨ (¬Gelato(robert) ∧ ¬Travel(robert))']	False	hyb
373	999	If Robert either would both enjoy a vacation to Italy and regrets his college experiences or neither would enjoy a vacation to Italy nor regrets his college experiences, then Robert would either enjoy a vacation to Italy or, if not, then he can resist the hallmark delectable drinks and desserts that are famed in Italy.	['All people who enjoy eating gelato ice cream would enjoy a vacation to Italy.', 'There are no people who can resist the hallmark delectable drinks and desserts that are famed in Italy.', 'People either enjoy eating gelato ice cream or love to travel and vacation often.', 'If people often take study abroad semesters to Europe, then they do not regret their college experiences.', 'If people love to travel and vacation often, then they often take study abroad semesters to Europe.', 'Robert either enjoys eating gelato ice cream and loves to travel and vacation often, or he neither enjoys eating gelato ice cream nor loves to travel and vacation often.']	['∀x (Gelato(x) → Italy(x))', '∀x (¬Resist(x))', '∀x (Gelato(x) ∨ Travel(x))', '∀x (Europe(x) → ¬Regret(x))', '∀x (Travel(x) → Europe(x))', '(Gelato(robert) ∧ Travel(robert)) ∨ (¬Gelato(robert) ∧ ¬Travel(robert))']	True	hyb
373	1000	If Robert is not both a person who can resist the hallmark delectable drinks and desserts that are famed in Italy and regrets his college experiences, then Robert either enjoys eating gelato ice cream or would enjoy a vacation to Italy.	['All people who enjoy eating gelato ice cream would enjoy a vacation to Italy.', 'There are no people who can resist the hallmark delectable drinks and desserts that are famed in Italy.', 'People either enjoy eating gelato ice cream or love to travel and vacation often.', 'If people often take study abroad semesters to Europe, then they do not regret their college experiences.', 'If people love to travel and vacation often, then they often take study abroad semesters to Europe.', 'Robert either enjoys eating gelato ice cream and loves to travel and vacation often, or he neither enjoys eating gelato ice cream nor loves to travel and vacation often.']	['∀x (Gelato(x) → Italy(x))', '∀x (¬Resist(x))', '∀x (Gelato(x) ∨ Travel(x))', '∀x (Europe(x) → ¬Regret(x))', '∀x (Travel(x) → Europe(x))', '(Gelato(robert) ∧ Travel(robert)) ∨ (¬Gelato(robert) ∧ ¬Travel(robert))']	False	hyb
312	781	Tom is a PhD graduate.	['To get a student visa, you must be full-time enrolled in an academic program.', 'Those who are full-time enrolled in an academic program can not work full-time.', 'Everyone who wants to study abroad needs to have a student visa.', 'All PhD graduates can work full time. ', 'If Tom does not want to study abroad, he is full-time enrolled in an educational program.']	['∀x (StudentVisa(x) → FullTimeAcademic(x))', '∀x (FullTimeAcademic(x) → ¬WorkFullTime(x))', '∀x (StudyAbroad(x) → StudentVisa(x))', '∀x (PhdGraduate(x) → WorkFullTime(x))', '¬StudyAbroad(tom) → FullTimeAcademic(tom)']	False	hyb
312	782	Tom is not a PhD graduate.	['To get a student visa, you must be full-time enrolled in an academic program.', 'Those who are full-time enrolled in an academic program can not work full-time.', 'Everyone who wants to study abroad needs to have a student visa.', 'All PhD graduates can work full time. ', 'If Tom does not want to study abroad, he is full-time enrolled in an educational program.']	['∀x (StudentVisa(x) → FullTimeAcademic(x))', '∀x (FullTimeAcademic(x) → ¬WorkFullTime(x))', '∀x (StudyAbroad(x) → StudentVisa(x))', '∀x (PhdGraduate(x) → WorkFullTime(x))', '¬StudyAbroad(tom) → FullTimeAcademic(tom)']	True	hyb
312	783	Tom wants to study abroad.	['To get a student visa, you must be full-time enrolled in an academic program.', 'Those who are full-time enrolled in an academic program can not work full-time.', 'Everyone who wants to study abroad needs to have a student visa.', 'All PhD graduates can work full time. ', 'If Tom does not want to study abroad, he is full-time enrolled in an educational program.']	['∀x (StudentVisa(x) → FullTimeAcademic(x))', '∀x (FullTimeAcademic(x) → ¬WorkFullTime(x))', '∀x (StudyAbroad(x) → StudentVisa(x))', '∀x (PhdGraduate(x) → WorkFullTime(x))', '¬StudyAbroad(tom) → FullTimeAcademic(tom)']	Unknown	hyb
134	396	Sally's company utilizes the installment sales method.	['The installment sales method is the approach to recognize revenue under the US GAAP.', 'In accrual accounting, revenues are recognized when they are realized.', 'In cash accounting, revenues are recognized when cash is received.', 'The US GAAP is the accounting standard developed and used by the US Securities and Exchange Commission.', 'Sally works for the US Securities and Exchange Commission.']	['∀x (UsesGAAP(x) → UsesInstallmentMethod(x))', '∀x (UsesAccruralAccounting(x) → RecognizedWhen(revenues, realized))', '∀x (UsesCashAccounting(x) → RecognizedWhen(revenues, cashrecieved))', 'DevelopedBy(usgaap, ussecuritiesandexchangecommission) ∧ UsesGAAP(ussecuritiesandexchangecommission)', 'WorksFor(sally, ussecuritiesandexchangecommission)']	True	wiki
134	397	The company Sally works for performs accrual accounting.	['The installment sales method is the approach to recognize revenue under the US GAAP.', 'In accrual accounting, revenues are recognized when they are realized.', 'In cash accounting, revenues are recognized when cash is received.', 'The US GAAP is the accounting standard developed and used by the US Securities and Exchange Commission.', 'Sally works for the US Securities and Exchange Commission.']	['∀x (UsesGAAP(x) → UsesInstallmentMethod(x))', '∀x (UsesAccruralAccounting(x) → RecognizedWhen(revenues, realized))', '∀x (UsesCashAccounting(x) → RecognizedWhen(revenues, cashrecieved))', 'DevelopedBy(usgaap, ussecuritiesandexchangecommission) ∧ UsesGAAP(ussecuritiesandexchangecommission)', 'WorksFor(sally, ussecuritiesandexchangecommission)']	Unknown	wiki
134	398	Sally does not work for a company that uses the GAAP.	['The installment sales method is the approach to recognize revenue under the US GAAP.', 'In accrual accounting, revenues are recognized when they are realized.', 'In cash accounting, revenues are recognized when cash is received.', 'The US GAAP is the accounting standard developed and used by the US Securities and Exchange Commission.', 'Sally works for the US Securities and Exchange Commission.']	['∀x (UsesGAAP(x) → UsesInstallmentMethod(x))', '∀x (UsesAccruralAccounting(x) → RecognizedWhen(revenues, realized))', '∀x (UsesCashAccounting(x) → RecognizedWhen(revenues, cashrecieved))', 'DevelopedBy(usgaap, ussecuritiesandexchangecommission) ∧ UsesGAAP(ussecuritiesandexchangecommission)', 'WorksFor(sally, ussecuritiesandexchangecommission)']	False	wiki
427	1216	James contributes to the country.	['All people who are respected by others are people who contribute to the country. ', 'If a person is respected by others, then he/she contributes to the country. ', 'All people available to have a visit without any fees are those respected by others. ', 'All Customers who once served in the army are available to have a visit without any fees. ', 'All people who once were sentenced for thief stayed in prison for some time. ', 'All people who once stayed in prison for some time have a bad record in the local state. ', 'James was either once sentenced for thief or stayed in prison for some time. ', 'James is either with a bad record in the local state or respected by others. ']	['∀x (Respected(x) → ContributeToCountry(x))', '∀x (Respected(x) → ContributeToCountry(x))', '∀x (HaveVisitWithoutAnyFees(x) → Respected(x))', '∀x (Army(x) → HaveVisitWithoutAnyFees(x))', '∀x (Thief(x) → Prison(x))', '∀x (Prison(x) → BadRecord(x))', 'Thief(james) ⊕ Prison(james) ', 'BadRecord(james) ⊕ Respected(james)']	Unknown	hyb
427	1217	James does not contribute to the country.	['All people who are respected by others are people who contribute to the country. ', 'If a person is respected by others, then he/she contributes to the country. ', 'All people available to have a visit without any fees are those respected by others. ', 'All Customers who once served in the army are available to have a visit without any fees. ', 'All people who once were sentenced for thief stayed in prison for some time. ', 'All people who once stayed in prison for some time have a bad record in the local state. ', 'James was either once sentenced for thief or stayed in prison for some time. ', 'James is either with a bad record in the local state or respected by others. ']	['∀x (Respected(x) → ContributeToCountry(x))', '∀x (Respected(x) → ContributeToCountry(x))', '∀x (HaveVisitWithoutAnyFees(x) → Respected(x))', '∀x (Army(x) → HaveVisitWithoutAnyFees(x))', '∀x (Thief(x) → Prison(x))', '∀x (Prison(x) → BadRecord(x))', 'Thief(james) ⊕ Prison(james) ', 'BadRecord(james) ⊕ Respected(james)']	Unknown	hyb
427	1218	James contributes to the country, and he once served in the army.	['All people who are respected by others are people who contribute to the country. ', 'If a person is respected by others, then he/she contributes to the country. ', 'All people available to have a visit without any fees are those respected by others. ', 'All Customers who once served in the army are available to have a visit without any fees. ', 'All people who once were sentenced for thief stayed in prison for some time. ', 'All people who once stayed in prison for some time have a bad record in the local state. ', 'James was either once sentenced for thief or stayed in prison for some time. ', 'James is either with a bad record in the local state or respected by others. ']	['∀x (Respected(x) → ContributeToCountry(x))', '∀x (Respected(x) → ContributeToCountry(x))', '∀x (HaveVisitWithoutAnyFees(x) → Respected(x))', '∀x (Army(x) → HaveVisitWithoutAnyFees(x))', '∀x (Thief(x) → Prison(x))', '∀x (Prison(x) → BadRecord(x))', 'Thief(james) ⊕ Prison(james) ', 'BadRecord(james) ⊕ Respected(james)']	False	hyb
427	1219	James did not contribute to the country and did not serve in the army.	['All people who are respected by others are people who contribute to the country. ', 'If a person is respected by others, then he/she contributes to the country. ', 'All people available to have a visit without any fees are those respected by others. ', 'All Customers who once served in the army are available to have a visit without any fees. ', 'All people who once were sentenced for thief stayed in prison for some time. ', 'All people who once stayed in prison for some time have a bad record in the local state. ', 'James was either once sentenced for thief or stayed in prison for some time. ', 'James is either with a bad record in the local state or respected by others. ']	['∀x (Respected(x) → ContributeToCountry(x))', '∀x (Respected(x) → ContributeToCountry(x))', '∀x (HaveVisitWithoutAnyFees(x) → Respected(x))', '∀x (Army(x) → HaveVisitWithoutAnyFees(x))', '∀x (Thief(x) → Prison(x))', '∀x (Prison(x) → BadRecord(x))', 'Thief(james) ⊕ Prison(james) ', 'BadRecord(james) ⊕ Respected(james)']	True	hyb
12	32	Water from the Croton River watershed flows to somewhere in New York.	['The Croton River watershed is the drainage basin of the Croton River.', 'The Croton River is in southwestern New York.', 'Water from the Croton River watershed flows to the Bronx.', 'The Bronx is in New York.']	['DrainageBasinOf(crotonriverwatershed, crotonriver)', 'In(crotonriver, southwesternnewyork)', '∃x (Water(x) ∧ From(x, crotonriverwatershed) ∧ FlowsTo(x, bronx))', 'In(bronx, newyork)']	True	wiki
12	33	The Croton River watershed is in the Bronx.	['The Croton River watershed is the drainage basin of the Croton River.', 'The Croton River is in southwestern New York.', 'Water from the Croton River watershed flows to the Bronx.', 'The Bronx is in New York.']	['DrainageBasinOf(crotonriverwatershed, crotonriver)', 'In(crotonriver, southwesternnewyork)', '∃x (Water(x) ∧ From(x, crotonriverwatershed) ∧ FlowsTo(x, bronx))', 'In(bronx, newyork)']	Unknown	wiki
12	34	Water from the Croton River flows to the Bronx.	['The Croton River watershed is the drainage basin of the Croton River.', 'The Croton River is in southwestern New York.', 'Water from the Croton River watershed flows to the Bronx.', 'The Bronx is in New York.']	['DrainageBasinOf(crotonriverwatershed, crotonriver)', 'In(crotonriver, southwesternnewyork)', '∃x (Water(x) ∧ From(x, crotonriverwatershed) ∧ FlowsTo(x, bronx))', 'In(bronx, newyork)']	Unknown	wiki
261	710	Some warships are commercial vessels.	['All nuclear-powered submarines are warships.', 'No nuclear-powered submarines are commercial vessels.']	['∀x (NuclearPoweredSubmarine(x) → Warship(x))', '∀x (NuclearPoweredSubmarine(x) → ¬CommercialVessel(x))']	Unknown	wiki
67	199	The genre of Trouble at the Henhouse is rock.	['If a album is written by a rock band, then the genre of the album is rock.', 'If a band writes a album winning an award, then this band wins this award.', 'Trouble at the Henhouse is an album by The Tragically Hip.', 'The Tragically Hip is a Canadian rock band.', 'The song "Butts Wigglin\'" is in Trouble at the Henhouse.', 'Trouble at the Henhouse won the Album of the Year award.', 'A song in Trouble at the Henhouse appeared in a film.']	['∀x ∀y ∀z (AlbumByBand(x, y) ∧ RockBand(y, z) → Genre(x, rock))', '∀x ∀y ∀z (AlbumByBand(x, y) ∧ AlbumAward(x, z) → RockBandAward(y, z))', 'AlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)', 'RockBand(the_Tragically_Hip, canada)', 'SongInAlbum(butts_Wigglin, trouble_at_the_Henhouse)', 'AlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)', '∃x (SongInFilm(x) ∧ SongInAlbum(x, trouble_at_the_Henhouse))']	True	wiki
67	200	A canada rock band didn't win the Album of the Year award.	['If a album is written by a rock band, then the genre of the album is rock.', 'If a band writes a album winning an award, then this band wins this award.', 'Trouble at the Henhouse is an album by The Tragically Hip.', 'The Tragically Hip is a Canadian rock band.', 'The song "Butts Wigglin\'" is in Trouble at the Henhouse.', 'Trouble at the Henhouse won the Album of the Year award.', 'A song in Trouble at the Henhouse appeared in a film.']	['∀x ∀y ∀z (AlbumByBand(x, y) ∧ RockBand(y, z) → Genre(x, rock))', '∀x ∀y ∀z (AlbumByBand(x, y) ∧ AlbumAward(x, z) → RockBandAward(y, z))', 'AlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)', 'RockBand(the_Tragically_Hip, canada)', 'SongInAlbum(butts_Wigglin, trouble_at_the_Henhouse)', 'AlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)', '∃x (SongInFilm(x) ∧ SongInAlbum(x, trouble_at_the_Henhouse))']	False	wiki
67	201	"Butts Wigglin'" appeared in a film.	['If a album is written by a rock band, then the genre of the album is rock.', 'If a band writes a album winning an award, then this band wins this award.', 'Trouble at the Henhouse is an album by The Tragically Hip.', 'The Tragically Hip is a Canadian rock band.', 'The song "Butts Wigglin\'" is in Trouble at the Henhouse.', 'Trouble at the Henhouse won the Album of the Year award.', 'A song in Trouble at the Henhouse appeared in a film.']	['∀x ∀y ∀z (AlbumByBand(x, y) ∧ RockBand(y, z) → Genre(x, rock))', '∀x ∀y ∀z (AlbumByBand(x, y) ∧ AlbumAward(x, z) → RockBandAward(y, z))', 'AlbumByBand(trouble_at_the_Henhouse, the_Tragically_Hip)', 'RockBand(the_Tragically_Hip, canada)', 'SongInAlbum(butts_Wigglin, trouble_at_the_Henhouse)', 'AlbumAward(trouble_at_the_Henhouse, the_Album_of_the_Year)', '∃x (SongInFilm(x) ∧ SongInAlbum(x, trouble_at_the_Henhouse))']	Unknown	wiki
238	681	Daniel once applied to Stanford University, but he couldn’t get in even though he has family members who are Stanford alumni.	['Daniel is a software engineer and he works at Palantir Technologies.', 'Daniel studied bioengineering during his undergraduate at Rice University.', 'Daniel’s older sister works at Meta as a technical sourcer. ', 'Daniel’s dad and older sister both graduated from Stanford University.', 'Daniel’s dad is a doctor practicing internal medicine at a veteran’s hospital in Minneapolis']	['SoftwareEngineer(daniel) ∧ WorksAt(daniel, palantirTechnologies)', ' StudiedBioengineering(daniel, riceUniversity)', ' WorksAtMeta(danielsOlderSister) ∧ TechnicalSourcer(danielsOlderSister)', ' GraduatedFromStanfordUniversity(danielsOlderSister) ∧ GraduatedFromStanfordUniversity(danielsDad)', ' DoctorPracticingInternalMedicine(danielsDad, veteransHospitalInMinneapolis)']	Unknown	wiki
238	682	Daniel studied bioengineering as his major at Rice University.	['Daniel is a software engineer and he works at Palantir Technologies.', 'Daniel studied bioengineering during his undergraduate at Rice University.', 'Daniel’s older sister works at Meta as a technical sourcer. ', 'Daniel’s dad and older sister both graduated from Stanford University.', 'Daniel’s dad is a doctor practicing internal medicine at a veteran’s hospital in Minneapolis']	['SoftwareEngineer(daniel) ∧ WorksAt(daniel, palantirTechnologies)', ' StudiedBioengineering(daniel, riceUniversity)', ' WorksAtMeta(danielsOlderSister) ∧ TechnicalSourcer(danielsOlderSister)', ' GraduatedFromStanfordUniversity(danielsOlderSister) ∧ GraduatedFromStanfordUniversity(danielsDad)', ' DoctorPracticingInternalMedicine(danielsDad, veteransHospitalInMinneapolis)']	True	wiki
238	683	Daniel and his sister grew up in Minneapolis, Minnesota.	['Daniel is a software engineer and he works at Palantir Technologies.', 'Daniel studied bioengineering during his undergraduate at Rice University.', 'Daniel’s older sister works at Meta as a technical sourcer. ', 'Daniel’s dad and older sister both graduated from Stanford University.', 'Daniel’s dad is a doctor practicing internal medicine at a veteran’s hospital in Minneapolis']	['SoftwareEngineer(daniel) ∧ WorksAt(daniel, palantirTechnologies)', ' StudiedBioengineering(daniel, riceUniversity)', ' WorksAtMeta(danielsOlderSister) ∧ TechnicalSourcer(danielsOlderSister)', ' GraduatedFromStanfordUniversity(danielsOlderSister) ∧ GraduatedFromStanfordUniversity(danielsDad)', ' DoctorPracticingInternalMedicine(danielsDad, veteransHospitalInMinneapolis)']	Unknown	wiki
108	327	An American Airlines plane is either a Boeing or Airbus plane.	['All commerical aircraft are produced by either Boeing or Airbus.', 'All American Airlines jets are commerical aircraft. ', 'Airbus made more in revenue than Boeing last year.']	['∀x (CommercialAircraft(x) → ProducedBy(x, boeing) ⊕ ProducedBy(x, airbus))', '∀x (AmericanAirlinesAircraft(x) → CommercialAircraft(x))', 'MoreinRevenue(airbus, boeing)']	True	wiki
108	328	There exists a SpaceX commerical aircraft.	['All commerical aircraft are produced by either Boeing or Airbus.', 'All American Airlines jets are commerical aircraft. ', 'Airbus made more in revenue than Boeing last year.']	['∀x (CommercialAircraft(x) → ProducedBy(x, boeing) ⊕ ProducedBy(x, airbus))', '∀x (AmericanAirlinesAircraft(x) → CommercialAircraft(x))', 'MoreinRevenue(airbus, boeing)']	Unknown	wiki
108	329	There does not exist a United Airlines plane produced by Boeing.	['All commerical aircraft are produced by either Boeing or Airbus.', 'All American Airlines jets are commerical aircraft. ', 'Airbus made more in revenue than Boeing last year.']	['∀x (CommercialAircraft(x) → ProducedBy(x, boeing) ⊕ ProducedBy(x, airbus))', '∀x (AmericanAirlinesAircraft(x) → CommercialAircraft(x))', 'MoreinRevenue(airbus, boeing)']	Unknown	wiki
108	330	There is a commercial plane made by both Airbus and Boeing.	['All commerical aircraft are produced by either Boeing or Airbus.', 'All American Airlines jets are commerical aircraft. ', 'Airbus made more in revenue than Boeing last year.']	['∀x (CommercialAircraft(x) → ProducedBy(x, boeing) ⊕ ProducedBy(x, airbus))', '∀x (AmericanAirlinesAircraft(x) → CommercialAircraft(x))', 'MoreinRevenue(airbus, boeing)']	False	wiki
84	256	Leyte is an island in the Philippines.	['Luzon is an island in the Philippines.', 'In December 1999, an earthquake struck Luzon.', 'People died in the December 1999 earthquake in Luzon.']	['Island(luzon) ∧ In(luzon, philippines)', '∃x (Earthquake(x) ∧ StruckIn(x, december1999) ∧ Struck(x, luzon))', '∃x (Earthquake(x) ∧ StruckIn(x, december1999) ∧ Struck(x, luzon) ∧ Killed(x))']	Unknown	wiki
84	257	No one has ever died of an earthquake that struck in the Philippines.	['Luzon is an island in the Philippines.', 'In December 1999, an earthquake struck Luzon.', 'People died in the December 1999 earthquake in Luzon.']	['Island(luzon) ∧ In(luzon, philippines)', '∃x (Earthquake(x) ∧ StruckIn(x, december1999) ∧ Struck(x, luzon))', '∃x (Earthquake(x) ∧ StruckIn(x, december1999) ∧ Struck(x, luzon) ∧ Killed(x))']	False	wiki
84	258	In 1999, there was at least one earthquake in the Philippines.	['Luzon is an island in the Philippines.', 'In December 1999, an earthquake struck Luzon.', 'People died in the December 1999 earthquake in Luzon.']	['Island(luzon) ∧ In(luzon, philippines)', '∃x (Earthquake(x) ∧ StruckIn(x, december1999) ∧ Struck(x, luzon))', '∃x (Earthquake(x) ∧ StruckIn(x, december1999) ∧ Struck(x, luzon) ∧ Killed(x))']	True	wiki
362	966	Matt reads the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.	['People either invest in the public stock market regularly or enjoy gambling regularly.', 'If people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.', 'All people who enjoy gambling regularly spend a lot of money at casinos and other betting games.', 'People who spend a lot of money at casinos and other betting games visit the Las Vegas Strip regularly.', 'People who spend a lot of money at casinos and other betting games have a lot of disposable income to spend.', 'If Matt invests in the public stock market regularly, then Matt neither has a lot of disposable income to spend nor invests in the public stock market regularly. ']	['∀x (Invests(x) ∨ Gambling(x))', '∀x (Invests(x) → Newspapers(x))', '∀x (Gambling(x) → Casinos(x))', '∀x (Casinos(x) → LasVegas(x))', '∀x (Casinos(x) → DisposableIncome(x))', 'Invests(matt) → ¬DisposableIncome(matt) ∧ ¬Invests(matt)']	Unknown	hyb
362	967	If Matt is either both a person who has a lot of disposable income to spend and invests in the public stock market regularly, or neither has a lot of disposable income to spend nor invests in the public stock market regularly, then Matt neither visits the Las Vegas Strip regularly nor reads the Wall Street Journal and other newspapers regularly to keep updated on the financial metrics.	['People either invest in the public stock market regularly or enjoy gambling regularly.', 'If people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.', 'All people who enjoy gambling regularly spend a lot of money at casinos and other betting games.', 'People who spend a lot of money at casinos and other betting games visit the Las Vegas Strip regularly.', 'People who spend a lot of money at casinos and other betting games have a lot of disposable income to spend.', 'If Matt invests in the public stock market regularly, then Matt neither has a lot of disposable income to spend nor invests in the public stock market regularly. ']	['∀x (Invests(x) ∨ Gambling(x))', '∀x (Invests(x) → Newspapers(x))', '∀x (Gambling(x) → Casinos(x))', '∀x (Casinos(x) → LasVegas(x))', '∀x (Casinos(x) → DisposableIncome(x))', 'Invests(matt) → ¬DisposableIncome(matt) ∧ ¬Invests(matt)']	True	hyb
362	968	If Matt is either a person who has a lot of disposable income to spend or reads the Wall Street Journal and other newspapers regularly, then Matt neither has a lot of disposable income to spend nor visits the Las Vegas Strip Regularly.	['People either invest in the public stock market regularly or enjoy gambling regularly.', 'If people invest in the public stock market regularly, then they read the Wall Street Journal and other newspapers regularly to keep updated on financial metrics.', 'All people who enjoy gambling regularly spend a lot of money at casinos and other betting games.', 'People who spend a lot of money at casinos and other betting games visit the Las Vegas Strip regularly.', 'People who spend a lot of money at casinos and other betting games have a lot of disposable income to spend.', 'If Matt invests in the public stock market regularly, then Matt neither has a lot of disposable income to spend nor invests in the public stock market regularly. ']	['∀x (Invests(x) ∨ Gambling(x))', '∀x (Invests(x) → Newspapers(x))', '∀x (Gambling(x) → Casinos(x))', '∀x (Casinos(x) → LasVegas(x))', '∀x (Casinos(x) → DisposableIncome(x))', 'Invests(matt) → ¬DisposableIncome(matt) ∧ ¬Invests(matt)']	False	hyb
241	688	John can get the rhythms right.	['All students learning piano can strike the right notes. ', 'All students who can strike the right note can get the rhythms right. ', 'If a student can get the rhythms right, he will start working on coordination between the left and the right hands. ', 'Some students who start working on coordination between the left and the right hands become good at it. The other students find it challenging. ', 'If John can strike the right notes, get the rhythms right and is good at coordination between right and left hands, then he puts emotions into his playing. ', 'John is a student learning piano. ', 'John does not find coordination between the left and the right hands challenging. ']	['∀x (Student(x) ∧ LearningPiano(x) → StrikeRightNotes(x))', '∀x (Student(x) ∧ StrikeRightNotes(x) → GetRhythmRight(x))', '∀x (Student(x) ∧ GetRhythmRight(x) → StartCoordination(x))', '∀x (Student(x) ∧ StartCoordination(x) → GoodAtCoordination(x) ⊕ FindCoordinationChallenging(x))', 'StrikeRightNotes(john) ∧ GetRhythmRight(john) ∧ GoodAtCoordination(john) → PutEmotion(john)', 'Student(john) ∧ LearningPiano(john)', '¬FindCoordinationChallenging(john)']	True	wiki
241	689	John does not put emotions into his playing.	['All students learning piano can strike the right notes. ', 'All students who can strike the right note can get the rhythms right. ', 'If a student can get the rhythms right, he will start working on coordination between the left and the right hands. ', 'Some students who start working on coordination between the left and the right hands become good at it. The other students find it challenging. ', 'If John can strike the right notes, get the rhythms right and is good at coordination between right and left hands, then he puts emotions into his playing. ', 'John is a student learning piano. ', 'John does not find coordination between the left and the right hands challenging. ']	['∀x (Student(x) ∧ LearningPiano(x) → StrikeRightNotes(x))', '∀x (Student(x) ∧ StrikeRightNotes(x) → GetRhythmRight(x))', '∀x (Student(x) ∧ GetRhythmRight(x) → StartCoordination(x))', '∀x (Student(x) ∧ StartCoordination(x) → GoodAtCoordination(x) ⊕ FindCoordinationChallenging(x))', 'StrikeRightNotes(john) ∧ GetRhythmRight(john) ∧ GoodAtCoordination(john) → PutEmotion(john)', 'Student(john) ∧ LearningPiano(john)', '¬FindCoordinationChallenging(john)']	False	wiki
229	654	Barbara Ann Marshall did not receive medals.	['Barbara Ann Marshall is a former swimmer and former world record-holder.', 'Barbara Ann Marshall participated in the 1972 Summer Olympics.', "Barbara Ann Marshall's home country is the United States.", 'All people who compete in the 1972 Summer Olympics represent their home country.', 'Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.', 'Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.', 'Only relay swimmers who participated in the event final received medals.']	['FormerSwimmer(barbaraannmarshall) ∧ FormerWorldRecordHolder(barbaraannmarshall)', 'ParticipatedIn(barbaraannmarshall, summer1972olympics)', 'HomeCountry(barbaraannmarshall, unitedstates)', '∀x ∃y (ParticipatedIn(x, summer1972olympics) ∧ HomeCountry(x, y) → Represented(x, y))', 'ParticipatedIn(barbaraannmarshall, preliminaryheatfreestylerelay)', '¬ParticipatedIn(barbaraannmarshall, finalheatfreestylerelay)', '∀x ((RelaySwimmer(x) ∧ ¬ParticipatedIn(x, finalheatfreerelay)) ↔ ¬Recieved(x, medal)))']	Unknown	wiki
229	655	Barbara Ann Marshall represented the United States in the 1972 Summer Olympics.	['Barbara Ann Marshall is a former swimmer and former world record-holder.', 'Barbara Ann Marshall participated in the 1972 Summer Olympics.', "Barbara Ann Marshall's home country is the United States.", 'All people who compete in the 1972 Summer Olympics represent their home country.', 'Barbara Ann Marshall participated in the preliminary heat in the freestyle relay.', 'Barbara Ann Marshall did not participate in the event final of the 1972 Summer Olympics freestyle relay.', 'Only relay swimmers who participated in the event final received medals.']	['FormerSwimmer(barbaraannmarshall) ∧ FormerWorldRecordHolder(barbaraannmarshall)', 'ParticipatedIn(barbaraannmarshall, summer1972olympics)', 'HomeCountry(barbaraannmarshall, unitedstates)', '∀x ∃y (ParticipatedIn(x, summer1972olympics) ∧ HomeCountry(x, y) → Represented(x, y))', 'ParticipatedIn(barbaraannmarshall, preliminaryheatfreestylerelay)', '¬ParticipatedIn(barbaraannmarshall, finalheatfreestylerelay)', '∀x ((RelaySwimmer(x) ∧ ¬ParticipatedIn(x, finalheatfreerelay)) ↔ ¬Recieved(x, medal)))']	True	wiki
201	576	It is possible to move to the green stage without ever reaching the yellow stage.	['A game is played with three stages: red stage, yellow stage, and green stage.', 'Each player begins at the red stage.', 'All players must reach the yellow stage before they can reach the green stage.', 'The yellow stage comes after the red stage.', 'All players must proceed one stage at a time.']	['∃x (Player(x))', '∀x (Player(x) → StartRed(x))', '∀x (Player(x) → YellowToGreen(x))', '∀x (Player(x) → RedToYellow(x))', '∀x (Player(x) → ¬RedToGreen(x))']	False	wiki
201	577	It is possible to reach the yellow stage without ever reaching the green stage.	['A game is played with three stages: red stage, yellow stage, and green stage.', 'Each player begins at the red stage.', 'All players must reach the yellow stage before they can reach the green stage.', 'The yellow stage comes after the red stage.', 'All players must proceed one stage at a time.']	['∃x (Player(x))', '∀x (Player(x) → StartRed(x))', '∀x (Player(x) → YellowToGreen(x))', '∀x (Player(x) → RedToYellow(x))', '∀x (Player(x) → ¬RedToGreen(x))']	True	wiki
201	578	It is possible to complete the game without ever reaching the green stage.	['A game is played with three stages: red stage, yellow stage, and green stage.', 'Each player begins at the red stage.', 'All players must reach the yellow stage before they can reach the green stage.', 'The yellow stage comes after the red stage.', 'All players must proceed one stage at a time.']	['∃x (Player(x))', '∀x (Player(x) → StartRed(x))', '∀x (Player(x) → YellowToGreen(x))', '∀x (Player(x) → RedToYellow(x))', '∀x (Player(x) → ¬RedToGreen(x))']	Unknown	wiki
399	1095	Adam is scared of animals.	['People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.', 'If a person values physical touch as an especially important love language, then they are good with pets.', 'No people that are good with pets are scared of animals.', 'People are either scared of animals or love animals.', 'Adam is either a person who values physical touch as an especially important love language or a person who loves animals.']	['∀x (Physical(x) ∨ Words(x))', '∀x (Physical(x) → GoodWithPets(x))', '∀x (GoodWithPets(x) → ¬ScaredOfAnimals(x))', '∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))', 'Physical(adam) ⊕ LoveAnimals(adam)']	Unknown	hyb
399	1096	Adam values words of affirmation as an especially important love language.	['People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.', 'If a person values physical touch as an especially important love language, then they are good with pets.', 'No people that are good with pets are scared of animals.', 'People are either scared of animals or love animals.', 'Adam is either a person who values physical touch as an especially important love language or a person who loves animals.']	['∀x (Physical(x) ∨ Words(x))', '∀x (Physical(x) → GoodWithPets(x))', '∀x (GoodWithPets(x) → ¬ScaredOfAnimals(x))', '∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))', 'Physical(adam) ⊕ LoveAnimals(adam)']	True	hyb
399	1097	Adam values physical touch as an especially important love language and values words of affirmation as an especially important love language.	['People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.', 'If a person values physical touch as an especially important love language, then they are good with pets.', 'No people that are good with pets are scared of animals.', 'People are either scared of animals or love animals.', 'Adam is either a person who values physical touch as an especially important love language or a person who loves animals.']	['∀x (Physical(x) ∨ Words(x))', '∀x (Physical(x) → GoodWithPets(x))', '∀x (GoodWithPets(x) → ¬ScaredOfAnimals(x))', '∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))', 'Physical(adam) ⊕ LoveAnimals(adam)']	False	hyb
399	1098	Adam either values physical touch as an especially important love language or values words of affirmation as an especially important love language.	['People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.', 'If a person values physical touch as an especially important love language, then they are good with pets.', 'No people that are good with pets are scared of animals.', 'People are either scared of animals or love animals.', 'Adam is either a person who values physical touch as an especially important love language or a person who loves animals.']	['∀x (Physical(x) ∨ Words(x))', '∀x (Physical(x) → GoodWithPets(x))', '∀x (GoodWithPets(x) → ¬ScaredOfAnimals(x))', '∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))', 'Physical(adam) ⊕ LoveAnimals(adam)']	True	hyb
399	1099	If Adam values physical touch as an especially important love language or is good with pets, then Adam values words of affirmation as an especially important love language.	['People either value physical touch as an especially important love language or value words of affirmation as an especially important love language.', 'If a person values physical touch as an especially important love language, then they are good with pets.', 'No people that are good with pets are scared of animals.', 'People are either scared of animals or love animals.', 'Adam is either a person who values physical touch as an especially important love language or a person who loves animals.']	['∀x (Physical(x) ∨ Words(x))', '∀x (Physical(x) → GoodWithPets(x))', '∀x (GoodWithPets(x) → ¬ScaredOfAnimals(x))', '∀x (ScaredOfAnimals(x) ∨ LoveAnimals(x))', 'Physical(adam) ⊕ LoveAnimals(adam)']	True	hyb
444	1282	John is a reptile.	['All birds have wings.', 'No animal with wings is a reptile.', 'Some animals that fly are birds.', 'If something is an iguana, then it is a reptile.', 'John is neither an iguana nor a bird.']	['∀x (Bird(x) → Winged(x))', '∀x (Winged(x) → ¬Reptile(x))', '∃x (Fly(x) ∧ Bird(x))', '∀x (Iguana(x) → Reptile(x))', '¬Iguana(john) ⊕ Bird(john)']	Unknown	hyb
444	1283	John is not an iguana and an animal that can fly.	['All birds have wings.', 'No animal with wings is a reptile.', 'Some animals that fly are birds.', 'If something is an iguana, then it is a reptile.', 'John is neither an iguana nor a bird.']	['∀x (Bird(x) → Winged(x))', '∀x (Winged(x) → ¬Reptile(x))', '∃x (Fly(x) ∧ Bird(x))', '∀x (Iguana(x) → Reptile(x))', '¬Iguana(john) ⊕ Bird(john)']	True	hyb
444	1284	John is an animal that can fly and a bird.	['All birds have wings.', 'No animal with wings is a reptile.', 'Some animals that fly are birds.', 'If something is an iguana, then it is a reptile.', 'John is neither an iguana nor a bird.']	['∀x (Bird(x) → Winged(x))', '∀x (Winged(x) → ¬Reptile(x))', '∃x (Fly(x) ∧ Bird(x))', '∀x (Iguana(x) → Reptile(x))', '¬Iguana(john) ⊕ Bird(john)']	False	hyb
30	87	EndGame was filmed in New York.	['EndGame is a movie released in 2006.', 'EndGame was set in Washington.', 'EndGame was filmed outside of Washington.', 'Some movies are filmed in New York.', 'Andy Chang directed EndGame.', 'Andy Chang is from Hong Kong.']	['Movie(endGame) ∧ Released(endGame, year2006)', 'Set(endGame, washington)', 'FilmedOutside(endGame, washington)', '∃x (FilmedIn(x, newYork))', 'Directed(andyChang, endGame)', 'From(andyChang, hongKong)']	Unknown	wiki
30	88	EndGame was not directed by someone from Hong Kong.	['EndGame is a movie released in 2006.', 'EndGame was set in Washington.', 'EndGame was filmed outside of Washington.', 'Some movies are filmed in New York.', 'Andy Chang directed EndGame.', 'Andy Chang is from Hong Kong.']	['Movie(endGame) ∧ Released(endGame, year2006)', 'Set(endGame, washington)', 'FilmedOutside(endGame, washington)', '∃x (FilmedIn(x, newYork))', 'Directed(andyChang, endGame)', 'From(andyChang, hongKong)']	False	wiki
30	89	All of Andy Chang's movies are filmed outside of Washington.	['EndGame is a movie released in 2006.', 'EndGame was set in Washington.', 'EndGame was filmed outside of Washington.', 'Some movies are filmed in New York.', 'Andy Chang directed EndGame.', 'Andy Chang is from Hong Kong.']	['Movie(endGame) ∧ Released(endGame, year2006)', 'Set(endGame, washington)', 'FilmedOutside(endGame, washington)', '∃x (FilmedIn(x, newYork))', 'Directed(andyChang, endGame)', 'From(andyChang, hongKong)']	Unknown	wiki
7	17	Eight is larger than seven.	['Six, seven and eight are real numbers.', 'If a real number equals another real number adding one, the first number is larger.', 'If the number x is larger than number y, then y is not larger than x.', 'Seven equals six plus one.', 'Eight equals seven plus one.', 'Two is positive.', 'If a number is positive, then the double of it is also positive.', 'Eight is the double of four.', 'Four is the double of two.']	['RealNum(six) ∧ RealNum(seven) ∧ RealNum(eight)', '∀x ∀y (RealNum(x) ∧ RealNum(y) ∧ EqualAddOne(x, y) → Larger(x, y))', '∀x ∀y (Larger(x, y) ↔ ¬Larger(y, x))', 'EqualAddOne(seven, six)', 'EqualAddOne(eight, seven)', 'Positive(two)', '∀x ∀y ((Positive(x) ∧ EqualDouble(y, x)) → Positive(y))', 'EqualDouble(eight, four)', 'EqualDouble(four, two)']	True	wiki
7	18	Eight is positive.	['Six, seven and eight are real numbers.', 'If a real number equals another real number adding one, the first number is larger.', 'If the number x is larger than number y, then y is not larger than x.', 'Seven equals six plus one.', 'Eight equals seven plus one.', 'Two is positive.', 'If a number is positive, then the double of it is also positive.', 'Eight is the double of four.', 'Four is the double of two.']	['RealNum(six) ∧ RealNum(seven) ∧ RealNum(eight)', '∀x ∀y (RealNum(x) ∧ RealNum(y) ∧ EqualAddOne(x, y) → Larger(x, y))', '∀x ∀y (Larger(x, y) ↔ ¬Larger(y, x))', 'EqualAddOne(seven, six)', 'EqualAddOne(eight, seven)', 'Positive(two)', '∀x ∀y ((Positive(x) ∧ EqualDouble(y, x)) → Positive(y))', 'EqualDouble(eight, four)', 'EqualDouble(four, two)']	True	wiki
7	19	Six is larger than seven.	['Six, seven and eight are real numbers.', 'If a real number equals another real number adding one, the first number is larger.', 'If the number x is larger than number y, then y is not larger than x.', 'Seven equals six plus one.', 'Eight equals seven plus one.', 'Two is positive.', 'If a number is positive, then the double of it is also positive.', 'Eight is the double of four.', 'Four is the double of two.']	['RealNum(six) ∧ RealNum(seven) ∧ RealNum(eight)', '∀x ∀y (RealNum(x) ∧ RealNum(y) ∧ EqualAddOne(x, y) → Larger(x, y))', '∀x ∀y (Larger(x, y) ↔ ¬Larger(y, x))', 'EqualAddOne(seven, six)', 'EqualAddOne(eight, seven)', 'Positive(two)', '∀x ∀y ((Positive(x) ∧ EqualDouble(y, x)) → Positive(y))', 'EqualDouble(eight, four)', 'EqualDouble(four, two)']	False	wiki
293	742	Some poker players never tell the truth.	['A dog never tells the truth.', 'Some poker players are dogs.']	['∀x (Dog(x) → NeverTellsTruth(x))', '∃x (PokerPlayer(x) ∧ Dog(x))']	True	wiki
475	1383	Jesse is Chinese.	['All Asians are human. ', 'All Chinese are Asian.', 'A man is either Chinese or British.', 'All British are European. ', 'All Spanish are European. ', 'No Indian is European. ', 'Jessee is either both an Indian and a human, or neither an Indian nor a human.']	['∀x ( Asian(x)→  Human(x))', '∀x ( Chinese(x)→  Asian(x))', '∀x ( Chinese(x) ∨  British(x))', '∀x ( British(x)→  European(x))', '∀x ( Spanish(x)→  European(x))', '∀x ( Indian(x)→ ¬ European(x))', '( Indian(jesse) ∧ Human(jesse)) ⊕ (¬ Indian(jesse) ∧ ¬ Human(jesse))']	Unknown	hyb
475	1384	Jesse is not Chinese.	['All Asians are human. ', 'All Chinese are Asian.', 'A man is either Chinese or British.', 'All British are European. ', 'All Spanish are European. ', 'No Indian is European. ', 'Jessee is either both an Indian and a human, or neither an Indian nor a human.']	['∀x ( Asian(x)→  Human(x))', '∀x ( Chinese(x)→  Asian(x))', '∀x ( Chinese(x) ∨  British(x))', '∀x ( British(x)→  European(x))', '∀x ( Spanish(x)→  European(x))', '∀x ( Indian(x)→ ¬ European(x))', '( Indian(jesse) ∧ Human(jesse)) ⊕ (¬ Indian(jesse) ∧ ¬ Human(jesse))']	Unknown	hyb
475	1385	If Jesse is either an Indian or a Spanish, then Jesse is either both British and European, or neither British nor European.	['All Asians are human. ', 'All Chinese are Asian.', 'A man is either Chinese or British.', 'All British are European. ', 'All Spanish are European. ', 'No Indian is European. ', 'Jessee is either both an Indian and a human, or neither an Indian nor a human.']	['∀x ( Asian(x)→  Human(x))', '∀x ( Chinese(x)→  Asian(x))', '∀x ( Chinese(x) ∨  British(x))', '∀x ( British(x)→  European(x))', '∀x ( Spanish(x)→  European(x))', '∀x ( Indian(x)→ ¬ European(x))', '( Indian(jesse) ∧ Human(jesse)) ⊕ (¬ Indian(jesse) ∧ ¬ Human(jesse))']	True	hyb
268	717	Some good teachers are not well-informed people.	['No people who never admit a mistake are good teachers.', 'Some well-informed people are people who never admit a mistake.']	['∀x (NeverAdmitMistakes(x) → ¬GoodTeacher(x))', '∃x (WellInformed(x) ∧ NeverAdmitMistakes(x))']	Unknown	wiki
25	72	Mort is a book	['Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material', 'Mort is not a Stamp catalogue.', 'Mort is not a periodical, auction catalogue, bibliography, or background material.', 'Mort is a piece of Philatelic literature.']	['∀x (PhilatelicLit(x) → (Stamp(x) ∨ Periodical(x) ∨ Auction(x) ∨ Book(x) ∨ Bibliography(x) ∨ Background(x)))', '¬Stamp(mort)', '¬(Periodical(mort) ∨ Auction(mort) ∨ Bibliography(mort) ∨ Background(mort))', 'PhilatelicLit(mort)']	True	wiki
25	73	Mort is background material.	['Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material', 'Mort is not a Stamp catalogue.', 'Mort is not a periodical, auction catalogue, bibliography, or background material.', 'Mort is a piece of Philatelic literature.']	['∀x (PhilatelicLit(x) → (Stamp(x) ∨ Periodical(x) ∨ Auction(x) ∨ Book(x) ∨ Bibliography(x) ∨ Background(x)))', '¬Stamp(mort)', '¬(Periodical(mort) ∨ Auction(mort) ∨ Bibliography(mort) ∨ Background(mort))', 'PhilatelicLit(mort)']	False	wiki
25	74	Eragon is a piece of Philatelic literature.	['Philatelic literature is divided into the following categories: Stamp catalogues, Periodicals, Auction catalogues, Books, Bibliographies, and Background Material', 'Mort is not a Stamp catalogue.', 'Mort is not a periodical, auction catalogue, bibliography, or background material.', 'Mort is a piece of Philatelic literature.']	['∀x (PhilatelicLit(x) → (Stamp(x) ∨ Periodical(x) ∨ Auction(x) ∨ Book(x) ∨ Bibliography(x) ∨ Background(x)))', '¬Stamp(mort)', '¬(Periodical(mort) ∨ Auction(mort) ∨ Bibliography(mort) ∨ Background(mort))', 'PhilatelicLit(mort)']	Unknown	wiki
92	280	Columbia pictures produces drama films.	["Adventures of Rusty is a drama film and children's film.", 'Columbia Pictures produced Adventures of Rusty', 'Tintin was produced by Paramount.', 'Tintin is an adventure film.']	['DramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)', 'Produced(columbiapictures, adventuresofrusty)', 'Produced(paramount, tintin)', 'AdventureFilm(tintin)']	True	wiki
92	281	Columbia pictures produces adventure films.	["Adventures of Rusty is a drama film and children's film.", 'Columbia Pictures produced Adventures of Rusty', 'Tintin was produced by Paramount.', 'Tintin is an adventure film.']	['DramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)', 'Produced(columbiapictures, adventuresofrusty)', 'Produced(paramount, tintin)', 'AdventureFilm(tintin)']	Unknown	wiki
92	282	Paramount produces children's films.	["Adventures of Rusty is a drama film and children's film.", 'Columbia Pictures produced Adventures of Rusty', 'Tintin was produced by Paramount.', 'Tintin is an adventure film.']	['DramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)', 'Produced(columbiapictures, adventuresofrusty)', 'Produced(paramount, tintin)', 'AdventureFilm(tintin)']	Unknown	wiki
92	283	Paramount produces adventure films.	["Adventures of Rusty is a drama film and children's film.", 'Columbia Pictures produced Adventures of Rusty', 'Tintin was produced by Paramount.', 'Tintin is an adventure film.']	['DramaFilm(adventuresofrusty) ∧ ChildrensFilm(adventuresofrusty)', 'Produced(columbiapictures, adventuresofrusty)', 'Produced(paramount, tintin)', 'AdventureFilm(tintin)']	True	wiki
233	665	The paramount leader of the PRC was also the vice premier.	["Deng Xiaoping served as the paramount leader of the People's Republic of China (PRC). ", 'Deng Xiaoping was praised for his reaffirmation of the reform program in his Southern Tour of 1992 as well as the reversion of Hong Kong to Chinese control in 1997 and the return of Macau in 1999.', "As the party's Secretary-General under Mao and Vice Premier in he 1950s, Deng Xiaoping presided over the Anti-Rightist Campaign launched by Mao.", "Deng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward (1958–1960).", 'Mao Zedong died in 1976.', "After Mao Zedong's death, Deng Xiaoping gradually rose to supreme power."]	['ParamountLeaderOf(dengxiaoping, prc)', 'PraisedFor(dengxiaoping, reaffirmationofreformprogram) ∧ PraisedFor(dengxiaoping, reversionofhongkong) ∧ PraisedFor(dengxiaoping, returnofmacau)', 'PartysSecretaryGeneral(dengxiaoping) ∧ Under(dengxiaoping, mao) ∧ VicePremier(dengxiaoping) ∧ PresidedOver(dengxiaoping, antirightistcampaign) ∧ LaunchedBy(antirightistcampaign, mao)', 'InstrumentalIn(dengxiaoping, chinaseconomicreconstruction) ∧ Following(chinaseconomicreconstruction, greatleapforward) ∧ Disastrous(greatleapforward)', 'DiedIn(mao, y1976)', 'GraduallyRoseTo(dengxiaoping, supremepower)']	True	wiki
233	666	Deng Xiaoping presided over something launched by someone he was under.	["Deng Xiaoping served as the paramount leader of the People's Republic of China (PRC). ", 'Deng Xiaoping was praised for his reaffirmation of the reform program in his Southern Tour of 1992 as well as the reversion of Hong Kong to Chinese control in 1997 and the return of Macau in 1999.', "As the party's Secretary-General under Mao and Vice Premier in he 1950s, Deng Xiaoping presided over the Anti-Rightist Campaign launched by Mao.", "Deng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward (1958–1960).", 'Mao Zedong died in 1976.', "After Mao Zedong's death, Deng Xiaoping gradually rose to supreme power."]	['ParamountLeaderOf(dengxiaoping, prc)', 'PraisedFor(dengxiaoping, reaffirmationofreformprogram) ∧ PraisedFor(dengxiaoping, reversionofhongkong) ∧ PraisedFor(dengxiaoping, returnofmacau)', 'PartysSecretaryGeneral(dengxiaoping) ∧ Under(dengxiaoping, mao) ∧ VicePremier(dengxiaoping) ∧ PresidedOver(dengxiaoping, antirightistcampaign) ∧ LaunchedBy(antirightistcampaign, mao)', 'InstrumentalIn(dengxiaoping, chinaseconomicreconstruction) ∧ Following(chinaseconomicreconstruction, greatleapforward) ∧ Disastrous(greatleapforward)', 'DiedIn(mao, y1976)', 'GraduallyRoseTo(dengxiaoping, supremepower)']	True	wiki
233	667	The person instrumental in china's economic reconstruction gradually rose to supreme power.	["Deng Xiaoping served as the paramount leader of the People's Republic of China (PRC). ", 'Deng Xiaoping was praised for his reaffirmation of the reform program in his Southern Tour of 1992 as well as the reversion of Hong Kong to Chinese control in 1997 and the return of Macau in 1999.', "As the party's Secretary-General under Mao and Vice Premier in he 1950s, Deng Xiaoping presided over the Anti-Rightist Campaign launched by Mao.", "Deng Xiaoping became instrumental in China's economic reconstruction following the disastrous Great Leap Forward (1958–1960).", 'Mao Zedong died in 1976.', "After Mao Zedong's death, Deng Xiaoping gradually rose to supreme power."]	['ParamountLeaderOf(dengxiaoping, prc)', 'PraisedFor(dengxiaoping, reaffirmationofreformprogram) ∧ PraisedFor(dengxiaoping, reversionofhongkong) ∧ PraisedFor(dengxiaoping, returnofmacau)', 'PartysSecretaryGeneral(dengxiaoping) ∧ Under(dengxiaoping, mao) ∧ VicePremier(dengxiaoping) ∧ PresidedOver(dengxiaoping, antirightistcampaign) ∧ LaunchedBy(antirightistcampaign, mao)', 'InstrumentalIn(dengxiaoping, chinaseconomicreconstruction) ∧ Following(chinaseconomicreconstruction, greatleapforward) ∧ Disastrous(greatleapforward)', 'DiedIn(mao, y1976)', 'GraduallyRoseTo(dengxiaoping, supremepower)']	True	wiki
391	1052	Dune is a fact.	['All imaginative processes are produced in human brains.', 'All science-fiction is from an imaginative process.', 'Either science-fiction or fact. ', 'No facts are proven to be false.', 'Dune is a science-fiction or proven to be false.']	['∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))', ' ∀x (Science-fiction(x) → ImaginativeProcess(x)) ', ' ∀x (Science-fiction(x) ∨ Fact(x))', ' ∀x (Fact(x) → ¬ProvedToBeFalse(x)) ', ' Science-fiction(dune) ∨ ProvedToBeFalse(dune)']	Unknown	hyb
391	1053	Dune is produced in human brains and is an imaginative process.	['All imaginative processes are produced in human brains.', 'All science-fiction is from an imaginative process.', 'Either science-fiction or fact. ', 'No facts are proven to be false.', 'Dune is a science-fiction or proven to be false.']	['∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))', ' ∀x (Science-fiction(x) → ImaginativeProcess(x)) ', ' ∀x (Science-fiction(x) ∨ Fact(x))', ' ∀x (Fact(x) → ¬ProvedToBeFalse(x)) ', ' Science-fiction(dune) ∨ ProvedToBeFalse(dune)']	True	hyb
391	1054	Dune is either produced in human brains or an imaginative process.	['All imaginative processes are produced in human brains.', 'All science-fiction is from an imaginative process.', 'Either science-fiction or fact. ', 'No facts are proven to be false.', 'Dune is a science-fiction or proven to be false.']	['∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))', ' ∀x (Science-fiction(x) → ImaginativeProcess(x)) ', ' ∀x (Science-fiction(x) ∨ Fact(x))', ' ∀x (Fact(x) → ¬ProvedToBeFalse(x)) ', ' Science-fiction(dune) ∨ ProvedToBeFalse(dune)']	False	hyb
391	1055	Dune is produced in human brains and is science fiction.	['All imaginative processes are produced in human brains.', 'All science-fiction is from an imaginative process.', 'Either science-fiction or fact. ', 'No facts are proven to be false.', 'Dune is a science-fiction or proven to be false.']	['∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))', ' ∀x (Science-fiction(x) → ImaginativeProcess(x)) ', ' ∀x (Science-fiction(x) ∨ Fact(x))', ' ∀x (Fact(x) → ¬ProvedToBeFalse(x)) ', ' Science-fiction(dune) ∨ ProvedToBeFalse(dune)']	True	hyb
391	1056	Dune is either produced in human brains or science-fiction.	['All imaginative processes are produced in human brains.', 'All science-fiction is from an imaginative process.', 'Either science-fiction or fact. ', 'No facts are proven to be false.', 'Dune is a science-fiction or proven to be false.']	['∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))', ' ∀x (Science-fiction(x) → ImaginativeProcess(x)) ', ' ∀x (Science-fiction(x) ∨ Fact(x))', ' ∀x (Fact(x) → ¬ProvedToBeFalse(x)) ', ' Science-fiction(dune) ∨ ProvedToBeFalse(dune)']	False	hyb
391	1057	If Dune is produced in human brains and is an imaginative process, then Dune is not produced in human brains and science-fiction.	['All imaginative processes are produced in human brains.', 'All science-fiction is from an imaginative process.', 'Either science-fiction or fact. ', 'No facts are proven to be false.', 'Dune is a science-fiction or proven to be false.']	['∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))', ' ∀x (Science-fiction(x) → ImaginativeProcess(x)) ', ' ∀x (Science-fiction(x) ∨ Fact(x))', ' ∀x (Fact(x) → ¬ProvedToBeFalse(x)) ', ' Science-fiction(dune) ∨ ProvedToBeFalse(dune)']	False	hyb
391	1058	If Dune is either a fact and produced in human brains, or neither a fact nor produced in human brains, then Dune is produced in human brains and science-fiction.	['All imaginative processes are produced in human brains.', 'All science-fiction is from an imaginative process.', 'Either science-fiction or fact. ', 'No facts are proven to be false.', 'Dune is a science-fiction or proven to be false.']	['∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))', ' ∀x (Science-fiction(x) → ImaginativeProcess(x)) ', ' ∀x (Science-fiction(x) ∨ Fact(x))', ' ∀x (Fact(x) → ¬ProvedToBeFalse(x)) ', ' Science-fiction(dune) ∨ ProvedToBeFalse(dune)']	True	hyb
391	1059	If Dune is science-fiction, then Dune is not produced in human brains and science-fiction.	['All imaginative processes are produced in human brains.', 'All science-fiction is from an imaginative process.', 'Either science-fiction or fact. ', 'No facts are proven to be false.', 'Dune is a science-fiction or proven to be false.']	['∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))', ' ∀x (Science-fiction(x) → ImaginativeProcess(x)) ', ' ∀x (Science-fiction(x) ∨ Fact(x))', ' ∀x (Fact(x) → ¬ProvedToBeFalse(x)) ', ' Science-fiction(dune) ∨ ProvedToBeFalse(dune)']	False	hyb
391	1060	If Dune is not produced in human brains and science-fiction, then Dune is neither an imaginative process nor proved to be false.	['All imaginative processes are produced in human brains.', 'All science-fiction is from an imaginative process.', 'Either science-fiction or fact. ', 'No facts are proven to be false.', 'Dune is a science-fiction or proven to be false.']	['∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))', ' ∀x (Science-fiction(x) → ImaginativeProcess(x)) ', ' ∀x (Science-fiction(x) ∨ Fact(x))', ' ∀x (Fact(x) → ¬ProvedToBeFalse(x)) ', ' Science-fiction(dune) ∨ ProvedToBeFalse(dune)']	True	hyb
391	1061	If Dune is not an imaginative process and science-fiction, then Dune is neither produced in human brains nor an imaginative process.	['All imaginative processes are produced in human brains.', 'All science-fiction is from an imaginative process.', 'Either science-fiction or fact. ', 'No facts are proven to be false.', 'Dune is a science-fiction or proven to be false.']	['∀x (ImaginativeProcess(x) → ProducedInHumanBrains(x))', ' ∀x (Science-fiction(x) → ImaginativeProcess(x)) ', ' ∀x (Science-fiction(x) ∨ Fact(x))', ' ∀x (Fact(x) → ¬ProvedToBeFalse(x)) ', ' Science-fiction(dune) ∨ ProvedToBeFalse(dune)']	True	hyb
181	524	Captain America does not speak English.	['An American superhero comes from either DC universe or Marvel universe.', 'Captain America is a superhero.', 'Captain America is an American.', 'Captain America does not come from DC universe.', 'If a superhero is American, he speaks English.', 'A superhero speaks English or Spanish.']	['∀x (Superhero(x) ∧ American(x) → (ComeFrom(x, dc universe) ⊕ ComeFrom(x, marvel universe))) ', ' Superhero(captain america) ', ' American(captain america) ', ' ¬ComeFrom(captain america, dc universe) ', ' ∀x (Superhero(x) ∧ American(x) → Speak(x, english)) ', ' ∀x (Superhero(x) → (Speak(x, english) ∨ Speak(x, spanish)))']	False	wiki
181	525	Captain America comes from Marvel universe.	['An American superhero comes from either DC universe or Marvel universe.', 'Captain America is a superhero.', 'Captain America is an American.', 'Captain America does not come from DC universe.', 'If a superhero is American, he speaks English.', 'A superhero speaks English or Spanish.']	['∀x (Superhero(x) ∧ American(x) → (ComeFrom(x, dc universe) ⊕ ComeFrom(x, marvel universe))) ', ' Superhero(captain america) ', ' American(captain america) ', ' ¬ComeFrom(captain america, dc universe) ', ' ∀x (Superhero(x) ∧ American(x) → Speak(x, english)) ', ' ∀x (Superhero(x) → (Speak(x, english) ∨ Speak(x, spanish)))']	True	wiki
181	526	Captain America speaks Spanish.	['An American superhero comes from either DC universe or Marvel universe.', 'Captain America is a superhero.', 'Captain America is an American.', 'Captain America does not come from DC universe.', 'If a superhero is American, he speaks English.', 'A superhero speaks English or Spanish.']	['∀x (Superhero(x) ∧ American(x) → (ComeFrom(x, dc universe) ⊕ ComeFrom(x, marvel universe))) ', ' Superhero(captain america) ', ' American(captain america) ', ' ¬ComeFrom(captain america, dc universe) ', ' ∀x (Superhero(x) ∧ American(x) → Speak(x, english)) ', ' ∀x (Superhero(x) → (Speak(x, english) ∨ Speak(x, spanish)))']	Unknown	wiki
75	229	Robert Zimmer is German.	['Robert Zimmer was born in Germany.', 'Robert Zimmer is an essayist.', 'Robert Zimmer was born in 1953.', 'Every essayist is a writer.', 'Every person born in Germany is German.']	['BornInGermany(robertZimmer)', 'IsEssayist(robertZimmer)', 'BornIn(robertZimmer, year1953)', '∀x (IsEssayist(x) → IsWriter(x))', '∀x (BornInGermany(x) → IsGerman(x))']	True	wiki
75	230	Robert Zimmer is not a writer.	['Robert Zimmer was born in Germany.', 'Robert Zimmer is an essayist.', 'Robert Zimmer was born in 1953.', 'Every essayist is a writer.', 'Every person born in Germany is German.']	['BornInGermany(robertZimmer)', 'IsEssayist(robertZimmer)', 'BornIn(robertZimmer, year1953)', '∀x (IsEssayist(x) → IsWriter(x))', '∀x (BornInGermany(x) → IsGerman(x))']	False	wiki
75	231	Robert Zimmer is a biographer.	['Robert Zimmer was born in Germany.', 'Robert Zimmer is an essayist.', 'Robert Zimmer was born in 1953.', 'Every essayist is a writer.', 'Every person born in Germany is German.']	['BornInGermany(robertZimmer)', 'IsEssayist(robertZimmer)', 'BornIn(robertZimmer, year1953)', '∀x (IsEssayist(x) → IsWriter(x))', '∀x (BornInGermany(x) → IsGerman(x))']	Unknown	wiki
250	699	If John repays his loans on time, he will be approved for a mortgage.	['All people who repay their loans on time have a high credit score.', 'Some people with high credit scores and high salaries are approved for mortgages.', 'John has a high salary.']	['∀x (Repay(x) → HighCreditScore(x))', '∃x ((HighCreditScore(x) ∧ HighSalary(x)) → Mortgage(x))', 'HighSalary(john)']	Unknown	wiki
344	912	John has a high IQ.	['All students are members of the university.', 'All graduate students are students.', 'All PhD students are graduate students.', 'Some PhD students have high IQs.', 'If John is not a PhD student, then he is not a member of the university.', 'If John has a high IQ, then he is a PhD student or a graduate student.']	['∀x (Student(x) → MemberOfUniversity(x))', '∀x (GraduateStudent(x) → Student(x))', '∀x (PhDStudent(x) → GraduateStudent(x))', '∃x (PhDStudent(x) ∧ HighIQ(x))', '¬PhDStudent(john) → ¬MemberOfUniversity(john)', 'HighIQ(john) → PhDStudent(john) ⊕ GraduateStudent(john)']	False	hyb
344	913	John does not have a high IQ.	['All students are members of the university.', 'All graduate students are students.', 'All PhD students are graduate students.', 'Some PhD students have high IQs.', 'If John is not a PhD student, then he is not a member of the university.', 'If John has a high IQ, then he is a PhD student or a graduate student.']	['∀x (Student(x) → MemberOfUniversity(x))', '∀x (GraduateStudent(x) → Student(x))', '∀x (PhDStudent(x) → GraduateStudent(x))', '∃x (PhDStudent(x) ∧ HighIQ(x))', '¬PhDStudent(john) → ¬MemberOfUniversity(john)', 'HighIQ(john) → PhDStudent(john) ⊕ GraduateStudent(john)']	True	hyb
344	914	John is a PhD student.	['All students are members of the university.', 'All graduate students are students.', 'All PhD students are graduate students.', 'Some PhD students have high IQs.', 'If John is not a PhD student, then he is not a member of the university.', 'If John has a high IQ, then he is a PhD student or a graduate student.']	['∀x (Student(x) → MemberOfUniversity(x))', '∀x (GraduateStudent(x) → Student(x))', '∀x (PhDStudent(x) → GraduateStudent(x))', '∃x (PhDStudent(x) ∧ HighIQ(x))', '¬PhDStudent(john) → ¬MemberOfUniversity(john)', 'HighIQ(john) → PhDStudent(john) ⊕ GraduateStudent(john)']	Unknown	hyb
165	476	If John goes to Europe, he will see the Eiffel Tower.	['Belgium, France and Germany are European countries.', 'Paris is the capital of France.', 'The Eiffel Tower is one of the main tourist attractions located in Paris.', 'Some people who live in Belgium speak French.', 'If John goes to Europe, he will see some tourist attractions.', 'John speaks French.']	['EuropeanCountry(belgium) ∨ EuropeanCountry(france) ∨ EuropeanCountry(germany)', 'CapitalOf(paris, france)', 'TouristAttraction(eiffelTower) ∧ LocatedIn(eiffelTower, paris)', '∃x (LiveIn(x, belgium) → Speak(x, french))', '∃x (GoTo(john, europe) → (See(john, x) ∧ TouristAttraction(x)))', 'Speak(john, french)']	Unknown	wiki
165	477	The Eiffel Tower is located in the capital of France.	['Belgium, France and Germany are European countries.', 'Paris is the capital of France.', 'The Eiffel Tower is one of the main tourist attractions located in Paris.', 'Some people who live in Belgium speak French.', 'If John goes to Europe, he will see some tourist attractions.', 'John speaks French.']	['EuropeanCountry(belgium) ∨ EuropeanCountry(france) ∨ EuropeanCountry(germany)', 'CapitalOf(paris, france)', 'TouristAttraction(eiffelTower) ∧ LocatedIn(eiffelTower, paris)', '∃x (LiveIn(x, belgium) → Speak(x, french))', '∃x (GoTo(john, europe) → (See(john, x) ∧ TouristAttraction(x)))', 'Speak(john, french)']	True	wiki
165	478	John lives in Belgium.	['Belgium, France and Germany are European countries.', 'Paris is the capital of France.', 'The Eiffel Tower is one of the main tourist attractions located in Paris.', 'Some people who live in Belgium speak French.', 'If John goes to Europe, he will see some tourist attractions.', 'John speaks French.']	['EuropeanCountry(belgium) ∨ EuropeanCountry(france) ∨ EuropeanCountry(germany)', 'CapitalOf(paris, france)', 'TouristAttraction(eiffelTower) ∧ LocatedIn(eiffelTower, paris)', '∃x (LiveIn(x, belgium) → Speak(x, french))', '∃x (GoTo(john, europe) → (See(john, x) ∧ TouristAttraction(x)))', 'Speak(john, french)']	Unknown	wiki
342	905	Prius is an electric car.	['All sports cars are loud.', 'No loud cars are electric.', 'If a car is a Ferrari, then it is a sports car.', 'All cars made in Maranello are Ferrari', 'If Prius is neither a sports car nor a loud car, then Prius is a Maranello-made car or a loud car.']	['∀x (SportsCar(x) → LoudCar(x))', '∀x (LoudCar(x) → ¬ElectricCar(x))', '∀x (Ferrari(x) → SportsCar(x))', '∀x (MadeInMaranello(x) → Ferrari(x))', '∀x (¬SportsCar(prius) ∨ ¬LoudCar(prius) → MadeInMaranello(prius) ∨ LoudCar(prius))']	False	hyb
342	906	Prius is not an electric car.	['All sports cars are loud.', 'No loud cars are electric.', 'If a car is a Ferrari, then it is a sports car.', 'All cars made in Maranello are Ferrari', 'If Prius is neither a sports car nor a loud car, then Prius is a Maranello-made car or a loud car.']	['∀x (SportsCar(x) → LoudCar(x))', '∀x (LoudCar(x) → ¬ElectricCar(x))', '∀x (Ferrari(x) → SportsCar(x))', '∀x (MadeInMaranello(x) → Ferrari(x))', '∀x (¬SportsCar(prius) ∨ ¬LoudCar(prius) → MadeInMaranello(prius) ∨ LoudCar(prius))']	True	hyb
342	907	Prius is a Maranello-made car.	['All sports cars are loud.', 'No loud cars are electric.', 'If a car is a Ferrari, then it is a sports car.', 'All cars made in Maranello are Ferrari', 'If Prius is neither a sports car nor a loud car, then Prius is a Maranello-made car or a loud car.']	['∀x (SportsCar(x) → LoudCar(x))', '∀x (LoudCar(x) → ¬ElectricCar(x))', '∀x (Ferrari(x) → SportsCar(x))', '∀x (MadeInMaranello(x) → Ferrari(x))', '∀x (¬SportsCar(prius) ∨ ¬LoudCar(prius) → MadeInMaranello(prius) ∨ LoudCar(prius))']	Unknown	hyb
342	908	If Prius is a Ferrari or a loud car, then Prius is an electric car.	['All sports cars are loud.', 'No loud cars are electric.', 'If a car is a Ferrari, then it is a sports car.', 'All cars made in Maranello are Ferrari', 'If Prius is neither a sports car nor a loud car, then Prius is a Maranello-made car or a loud car.']	['∀x (SportsCar(x) → LoudCar(x))', '∀x (LoudCar(x) → ¬ElectricCar(x))', '∀x (Ferrari(x) → SportsCar(x))', '∀x (MadeInMaranello(x) → Ferrari(x))', '∀x (¬SportsCar(prius) ∨ ¬LoudCar(prius) → MadeInMaranello(prius) ∨ LoudCar(prius))']	False	hyb
446	1288	Piper was grown in a garden.	['If something is a plant, then it is not a cute animal.', 'All flowers are plants.', 'Every kitten is a cute animal.', 'If something is grown in a garden, then it is a flower.', 'Piper is a kitten or a cute animal.']	['∀x (Plant(x) → ¬CuteAnimal(x))', '∀x (Flower(x) → Plant(x))', '∀x (Kitten(x) → CuteAnimal(x))', '∀x (GrownInGarden(x) → Flower(x))', 'Kitten(piper) ∨ CuteAnimal(piper)']	False	hyb
446	1289	Piper was not grown in a garden.	['If something is a plant, then it is not a cute animal.', 'All flowers are plants.', 'Every kitten is a cute animal.', 'If something is grown in a garden, then it is a flower.', 'Piper is a kitten or a cute animal.']	['∀x (Plant(x) → ¬CuteAnimal(x))', '∀x (Flower(x) → Plant(x))', '∀x (Kitten(x) → CuteAnimal(x))', '∀x (GrownInGarden(x) → Flower(x))', 'Kitten(piper) ∨ CuteAnimal(piper)']	True	hyb
446	1290	Piper is a kitten.	['If something is a plant, then it is not a cute animal.', 'All flowers are plants.', 'Every kitten is a cute animal.', 'If something is grown in a garden, then it is a flower.', 'Piper is a kitten or a cute animal.']	['∀x (Plant(x) → ¬CuteAnimal(x))', '∀x (Flower(x) → Plant(x))', '∀x (Kitten(x) → CuteAnimal(x))', '∀x (GrownInGarden(x) → Flower(x))', 'Kitten(piper) ∨ CuteAnimal(piper)']	Unknown	hyb
149	437	Judd Bankert competed in the 1992 Winter Olympics.	['Guam has participated in the Winter Olympics.', 'In 1988, the Winter Olympics were held in Calgary.', 'Guam sent an athlete to the Calgary Winter Olympics.', 'If Guan sent an athlete to the Calgary Winter Olympics, then it participated in the Calgary Winter Olympics.', 'Judd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics.']	['ParticipatedIn(guam, winterolympics)', 'Year(y1988) → BeHeld(winterolympics, calgary)', 'BeHeld(winterolympics, calgary) → SendAthletes(guam)', 'SendAthletes(guam) → ParticipatedIn(guam, winterolympics)', 'BeFrom(bankert, guam) ∧ ParticipatedIn(bankert, winterolympics)']	True	wiki
149	438	Guam has participated in the Summer Olympics at least once.	['Guam has participated in the Winter Olympics.', 'In 1988, the Winter Olympics were held in Calgary.', 'Guam sent an athlete to the Calgary Winter Olympics.', 'If Guan sent an athlete to the Calgary Winter Olympics, then it participated in the Calgary Winter Olympics.', 'Judd Bankert is the only athlete from Guam who has ever competed in the Winter Olympics.']	['ParticipatedIn(guam, winterolympics)', 'Year(y1988) → BeHeld(winterolympics, calgary)', 'BeHeld(winterolympics, calgary) → SendAthletes(guam)', 'SendAthletes(guam) → ParticipatedIn(guam, winterolympics)', 'BeFrom(bankert, guam) ∧ ParticipatedIn(bankert, winterolympics)']	Unknown	wiki
70	209	The son of a general practitioner was a word-setter of My Word!.	["Michael O'Donnell is a British physician, journalist, author and broadcaster.", "One of the word-setters of My Word! was Michael O'Donnell.", "The magazine World Medicine was edited by Michael O'Donnell.", "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."]	['British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)', 'WordSetter(michael)', 'Magazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)', '∃x (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x))']	True	wiki
70	210	World Medicine is not a magazine.	["Michael O'Donnell is a British physician, journalist, author and broadcaster.", "One of the word-setters of My Word! was Michael O'Donnell.", "The magazine World Medicine was edited by Michael O'Donnell.", "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."]	['British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)', 'WordSetter(michael)', 'Magazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)', '∃x (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x))']	False	wiki
70	211	There are no British authors.	["Michael O'Donnell is a British physician, journalist, author and broadcaster.", "One of the word-setters of My Word! was Michael O'Donnell.", "The magazine World Medicine was edited by Michael O'Donnell.", "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."]	['British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)', 'WordSetter(michael)', 'Magazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)', '∃x (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x))']	False	wiki
70	212	There are no journalists that were born in Yorkshire.	["Michael O'Donnell is a British physician, journalist, author and broadcaster.", "One of the word-setters of My Word! was Michael O'Donnell.", "The magazine World Medicine was edited by Michael O'Donnell.", "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."]	['British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)', 'WordSetter(michael)', 'Magazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)', '∃x (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x))']	False	wiki
70	213	There is a son of a general practitioner that is not an author.	["Michael O'Donnell is a British physician, journalist, author and broadcaster.", "One of the word-setters of My Word! was Michael O'Donnell.", "The magazine World Medicine was edited by Michael O'Donnell.", "Michael O'Donnell was born in Yorkshire as the son of a general practitioner."]	['British(michael) ∧ Physician(michael) ∧ Journalist(michael) ∧ Author(michael) ∧ Broadcaster(michael)', 'WordSetter(michael)', 'Magazine(worldmedicine) ∧ EditedBy(worldmedicine, michael)', '∃x (BornIn(michael, yorkshire) ∧ Son(michael, x) ∧ GeneralPractitioner(x))']	Unknown	wiki
255	704	Some reading is fun.	['No homework is fun.', 'Some reading is homework.']	['∀x (Homework(x) → ¬IsFun(x))', '∃x (IsReading(x) ∧ Homework(x))']	Unknown	wiki
298	747	If violence is good, it is lawful.	['If violence is good, it is justified.', 'If something is justified, it is lawful.']	['∀x ((Violence(x) ∧ Good(x)) → Justified(x))', '∀x (Justified(x) → Lawful(x))']	True	wiki
382	1025	Manny regularly rides horses for pleasure and sport.	['All people who have a horse ranch regularly ride horses for pleasure and sport.', 'All people who have a lot of disposable income have a horse ranch.', 'If people compete in horse dressage shows, then they have a lot of disposable income.', 'If people compete in horse dressage shows, then they have invested in high-quality equestrian gear and equipment.', 'If people regularly ride horses for pleasure and sport, then they do not live in cramped residential buildings.', 'Manny either has a horse ranch and lives in cramped residential buildings, or he neither has a horse ranch nor lives in cramped residential buildings.']	['∀x (Ranch(x) → RegularlyRide(x))', '∀x (DisposableIncome(x) → Ranch(x))', '∀x (Compete(x) → DisposableIncome(x))', '∀x (Compete(x) → Invested(x))', '∀x (RegularlyRide(x) → ¬Cramped(x))', '(Ranch(manny) ∧ Cramped(manny)) ⊕ (¬Ranch(manny) ∧ ¬Cramped(manny))']	Unknown	hyb
382	1026	Manny competes in horse dressage shows and has invested in high-quality equestrian equipment and gear.	['All people who have a horse ranch regularly ride horses for pleasure and sport.', 'All people who have a lot of disposable income have a horse ranch.', 'If people compete in horse dressage shows, then they have a lot of disposable income.', 'If people compete in horse dressage shows, then they have invested in high-quality equestrian gear and equipment.', 'If people regularly ride horses for pleasure and sport, then they do not live in cramped residential buildings.', 'Manny either has a horse ranch and lives in cramped residential buildings, or he neither has a horse ranch nor lives in cramped residential buildings.']	['∀x (Ranch(x) → RegularlyRide(x))', '∀x (DisposableIncome(x) → Ranch(x))', '∀x (Compete(x) → DisposableIncome(x))', '∀x (Compete(x) → Invested(x))', '∀x (RegularlyRide(x) → ¬Cramped(x))', '(Ranch(manny) ∧ Cramped(manny)) ⊕ (¬Ranch(manny) ∧ ¬Cramped(manny))']	False	hyb
382	1027	If Manny either has a horse ranch or competes in horse dressage shows, then Manny has not invested in high-quality equestrian equipment and gear.	['All people who have a horse ranch regularly ride horses for pleasure and sport.', 'All people who have a lot of disposable income have a horse ranch.', 'If people compete in horse dressage shows, then they have a lot of disposable income.', 'If people compete in horse dressage shows, then they have invested in high-quality equestrian gear and equipment.', 'If people regularly ride horses for pleasure and sport, then they do not live in cramped residential buildings.', 'Manny either has a horse ranch and lives in cramped residential buildings, or he neither has a horse ranch nor lives in cramped residential buildings.']	['∀x (Ranch(x) → RegularlyRide(x))', '∀x (DisposableIncome(x) → Ranch(x))', '∀x (Compete(x) → DisposableIncome(x))', '∀x (Compete(x) → Invested(x))', '∀x (RegularlyRide(x) → ¬Cramped(x))', '(Ranch(manny) ∧ Cramped(manny)) ⊕ (¬Ranch(manny) ∧ ¬Cramped(manny))']	True	hyb
54	159	Cannons can be deployed on battery towers.	['A roundel is a rounded artillery fortification.', 'A roundel is not higher than adjacent walls. ', 'Cannons can be deployed on artillery fortifications. ', 'Roundels are the oldest artillery fortifications.', 'Battery towers are an artillery fortification.']	['∀x (Roundel(x) → Rounded(x) ∧ ArtilleryFortification(x))', '∀x ∀y (Roundel(x) ∧ AdjacentWall(y) → ¬Higher(x, y))', '∀x (ArtilleryFortification(x) → DeployCannons(x))', '∀x ∀y (Roundel(x) ∧ ArtilleryFortification(x) ∧ ArtilleryFortification(y) → Older(x, y))', '∀x (BatteryTower(x) → ArtilleryFortification(x))']	True	wiki
54	160	Roundels are older than battery towers.	['A roundel is a rounded artillery fortification.', 'A roundel is not higher than adjacent walls. ', 'Cannons can be deployed on artillery fortifications. ', 'Roundels are the oldest artillery fortifications.', 'Battery towers are an artillery fortification.']	['∀x (Roundel(x) → Rounded(x) ∧ ArtilleryFortification(x))', '∀x ∀y (Roundel(x) ∧ AdjacentWall(y) → ¬Higher(x, y))', '∀x (ArtilleryFortification(x) → DeployCannons(x))', '∀x ∀y (Roundel(x) ∧ ArtilleryFortification(x) ∧ ArtilleryFortification(y) → Older(x, y))', '∀x (BatteryTower(x) → ArtilleryFortification(x))']	True	wiki
54	161	Battery towers are higher than adjacent walls.	['A roundel is a rounded artillery fortification.', 'A roundel is not higher than adjacent walls. ', 'Cannons can be deployed on artillery fortifications. ', 'Roundels are the oldest artillery fortifications.', 'Battery towers are an artillery fortification.']	['∀x (Roundel(x) → Rounded(x) ∧ ArtilleryFortification(x))', '∀x ∀y (Roundel(x) ∧ AdjacentWall(y) → ¬Higher(x, y))', '∀x (ArtilleryFortification(x) → DeployCannons(x))', '∀x ∀y (Roundel(x) ∧ ArtilleryFortification(x) ∧ ArtilleryFortification(y) → Older(x, y))', '∀x (BatteryTower(x) → ArtilleryFortification(x))']	Unknown	wiki
54	162	Roundels can be deployed on roundels.	['A roundel is a rounded artillery fortification.', 'A roundel is not higher than adjacent walls. ', 'Cannons can be deployed on artillery fortifications. ', 'Roundels are the oldest artillery fortifications.', 'Battery towers are an artillery fortification.']	['∀x (Roundel(x) → Rounded(x) ∧ ArtilleryFortification(x))', '∀x ∀y (Roundel(x) ∧ AdjacentWall(y) → ¬Higher(x, y))', '∀x (ArtilleryFortification(x) → DeployCannons(x))', '∀x ∀y (Roundel(x) ∧ ArtilleryFortification(x) ∧ ArtilleryFortification(y) → Older(x, y))', '∀x (BatteryTower(x) → ArtilleryFortification(x))']	True	wiki
288	737	Some papers are hard.	['All tissues are soft.', 'Some papers are tissues.']	['∀x (Tissue(x) → Soft(x))', '∃x (Paper(x) ∧ Tissue(x))']	Unknown	wiki
169	488	Volunteers who participate in natural disaster response receive intangible benefits for their work.	['All volunteers receive intangible benefits for their work.', 'Volunteers work regularly or on an as-needed basis.', 'Some volunteers are trained.', 'Volunteers work in groups or individually.', 'Environmental volunteers contribute toward environmental management or conservation.', 'Participating in natural disaster response is an example of volunteers working in groups on an as-needed basis.']	['∀x (Volunteer(x) → GetIntangibleBenefits(x))', '∀x (Volunteer(x) → WorkRegularly(x) ∨ WorkAsNeeded(x))', '∃x (Volunteer(x) → Trained(x))', '∀x (Volunteer(x) → (WorkInGroup(x) ∨ WorkIndividually(x)))', '∀x (Volunteer(x) ∧ Environmental(x) → (ContributeTo(x, environmentalmanagement) ∨ ContributeTo(x, environmentalconservation)))', '∃x (Volunteer(x) ∧ ContributeTo(x, naturaldisasterresponse) → WorkInGroup(x) ∧ WorkAsNeeded(x))']	True	wiki
169	489	Environmental volunteers work in groups.	['All volunteers receive intangible benefits for their work.', 'Volunteers work regularly or on an as-needed basis.', 'Some volunteers are trained.', 'Volunteers work in groups or individually.', 'Environmental volunteers contribute toward environmental management or conservation.', 'Participating in natural disaster response is an example of volunteers working in groups on an as-needed basis.']	['∀x (Volunteer(x) → GetIntangibleBenefits(x))', '∀x (Volunteer(x) → WorkRegularly(x) ∨ WorkAsNeeded(x))', '∃x (Volunteer(x) → Trained(x))', '∀x (Volunteer(x) → (WorkInGroup(x) ∨ WorkIndividually(x)))', '∀x (Volunteer(x) ∧ Environmental(x) → (ContributeTo(x, environmentalmanagement) ∨ ContributeTo(x, environmentalconservation)))', '∃x (Volunteer(x) ∧ ContributeTo(x, naturaldisasterresponse) → WorkInGroup(x) ∧ WorkAsNeeded(x))']	Unknown	wiki
169	490	To be a volunteer, you must be trained.	['All volunteers receive intangible benefits for their work.', 'Volunteers work regularly or on an as-needed basis.', 'Some volunteers are trained.', 'Volunteers work in groups or individually.', 'Environmental volunteers contribute toward environmental management or conservation.', 'Participating in natural disaster response is an example of volunteers working in groups on an as-needed basis.']	['∀x (Volunteer(x) → GetIntangibleBenefits(x))', '∀x (Volunteer(x) → WorkRegularly(x) ∨ WorkAsNeeded(x))', '∃x (Volunteer(x) → Trained(x))', '∀x (Volunteer(x) → (WorkInGroup(x) ∨ WorkIndividually(x)))', '∀x (Volunteer(x) ∧ Environmental(x) → (ContributeTo(x, environmentalmanagement) ∨ ContributeTo(x, environmentalconservation)))', '∃x (Volunteer(x) ∧ ContributeTo(x, naturaldisasterresponse) → WorkInGroup(x) ∧ WorkAsNeeded(x))']	Unknown	wiki
376	1007	Mike is an old person living in a stable home.	['All people who are very consistent and enjoy sticking to their regular routines do not like surprises.', 'If people wear flannel shirts every day, then they are very consistent and enjoy sticking to their regular routines.', 'If people do not like shopping for clothes and other materialistic goods, then they wear flannel shirts every day.', 'All old people living in stable homes do not like surprises.', 'If people have very high energy and are impulsive, then they like surprises.', 'If Mike is not a person who wears flannel shirts every day and has very high energy and is impulsive, then Mike either is very consistent and enjoys sticking to his regular routines or does not like surprises.']	['∀x (Consistent(x) → NoSurprises(x))', '∀x (Flannel(x) → Consistent(x))', '∀x (NoShopping(x) → Flannel(x))', '∀x (Old(x) → NoSurprises(x))', '∀x (Impulsive(x) → ¬NoSurprises(x))', '¬(NoSurprises(mike) ∧ Impulsive(mike)) → Consistent(mike) ⊕ NoSurprises(mike)']	Unknown	hyb
376	1008	If Mike wears flannel shirts every day or does not like shopping for clothes and other materialistic goods, then Mike is neither an old person living in a stable home nor does not like shopping for clothes and other materialistic goods.	['All people who are very consistent and enjoy sticking to their regular routines do not like surprises.', 'If people wear flannel shirts every day, then they are very consistent and enjoy sticking to their regular routines.', 'If people do not like shopping for clothes and other materialistic goods, then they wear flannel shirts every day.', 'All old people living in stable homes do not like surprises.', 'If people have very high energy and are impulsive, then they like surprises.', 'If Mike is not a person who wears flannel shirts every day and has very high energy and is impulsive, then Mike either is very consistent and enjoys sticking to his regular routines or does not like surprises.']	['∀x (Consistent(x) → NoSurprises(x))', '∀x (Flannel(x) → Consistent(x))', '∀x (NoShopping(x) → Flannel(x))', '∀x (Old(x) → NoSurprises(x))', '∀x (Impulsive(x) → ¬NoSurprises(x))', '¬(NoSurprises(mike) ∧ Impulsive(mike)) → Consistent(mike) ⊕ NoSurprises(mike)']	True	hyb
376	1009	If Mike is not an old person living in a stable home and does not like shopping for clothes and other materialistic goods, then Mike does not like shopping for clothes and other materialistic goods.	['All people who are very consistent and enjoy sticking to their regular routines do not like surprises.', 'If people wear flannel shirts every day, then they are very consistent and enjoy sticking to their regular routines.', 'If people do not like shopping for clothes and other materialistic goods, then they wear flannel shirts every day.', 'All old people living in stable homes do not like surprises.', 'If people have very high energy and are impulsive, then they like surprises.', 'If Mike is not a person who wears flannel shirts every day and has very high energy and is impulsive, then Mike either is very consistent and enjoys sticking to his regular routines or does not like surprises.']	['∀x (Consistent(x) → NoSurprises(x))', '∀x (Flannel(x) → Consistent(x))', '∀x (NoShopping(x) → Flannel(x))', '∀x (Old(x) → NoSurprises(x))', '∀x (Impulsive(x) → ¬NoSurprises(x))', '¬(NoSurprises(mike) ∧ Impulsive(mike)) → Consistent(mike) ⊕ NoSurprises(mike)']	False	hyb
215	619	Adam owns a Japanese car.	['Adam owns cars.', 'Adam has a favorite car.', "Among the cars he owns, Adam's favorite car is European.", 'Adam broke his favorite car.']	['∃x (Owns(adam, x))', '∃x (Favorite(adam, x))', '∀x ((Owns(adam, x) ∧ Favorite(adam, x)) → European(x))', '∀x ((Owns(adam, x) ∧ Favorite(adam, x)) → Broke(adam, x))']	Unknown	wiki
215	620	Adam broke a European car.	['Adam owns cars.', 'Adam has a favorite car.', "Among the cars he owns, Adam's favorite car is European.", 'Adam broke his favorite car.']	['∃x (Owns(adam, x))', '∃x (Favorite(adam, x))', '∀x ((Owns(adam, x) ∧ Favorite(adam, x)) → European(x))', '∀x ((Owns(adam, x) ∧ Favorite(adam, x)) → Broke(adam, x))']	True	wiki
433	1240	Tower A is higher than 400 meters.	['No buildings in New Haven are higher than 400 meters. ', 'All buildings managed by Yale Housing are in New Haven. ', 'All buildings in Manhattan are higher than 400 meters. ', 'All buildings owned by Bloomberg are in Manhattan. ', 'All buildings with the Bloomberg logo are buildings owned by Bloomberg. ', 'Tower A is neither in New Haven nor in Manhattan.', 'Tower B is a building with the Bloomberg logo and in Manhattan. ']	['∀x (NewHaven(x) → ¬High(x))', '∀x (YaleHousing(x) → NewHaven(x))', '∀x (Manhattan(x) → High(x))', '∀x (Bloomberg(x) → Manhattan(x))', '∀x (BloombergLogo(x) → Bloomberg(x))', '¬(NewHaven(towera) ⊕ Manhattan(towera))', 'BloombergLogo(towerb) ∧ Manhattan(towerb)']	Unknown	hyb
433	1241	Tower A is not higher than 400 meters.	['No buildings in New Haven are higher than 400 meters. ', 'All buildings managed by Yale Housing are in New Haven. ', 'All buildings in Manhattan are higher than 400 meters. ', 'All buildings owned by Bloomberg are in Manhattan. ', 'All buildings with the Bloomberg logo are buildings owned by Bloomberg. ', 'Tower A is neither in New Haven nor in Manhattan.', 'Tower B is a building with the Bloomberg logo and in Manhattan. ']	['∀x (NewHaven(x) → ¬High(x))', '∀x (YaleHousing(x) → NewHaven(x))', '∀x (Manhattan(x) → High(x))', '∀x (Bloomberg(x) → Manhattan(x))', '∀x (BloombergLogo(x) → Bloomberg(x))', '¬(NewHaven(towera) ⊕ Manhattan(towera))', 'BloombergLogo(towerb) ∧ Manhattan(towerb)']	Unknown	hyb
433	1242	Tower A is a building with the Bloomberg logo or managed by Yale Housing.	['No buildings in New Haven are higher than 400 meters. ', 'All buildings managed by Yale Housing are in New Haven. ', 'All buildings in Manhattan are higher than 400 meters. ', 'All buildings owned by Bloomberg are in Manhattan. ', 'All buildings with the Bloomberg logo are buildings owned by Bloomberg. ', 'Tower A is neither in New Haven nor in Manhattan.', 'Tower B is a building with the Bloomberg logo and in Manhattan. ']	['∀x (NewHaven(x) → ¬High(x))', '∀x (YaleHousing(x) → NewHaven(x))', '∀x (Manhattan(x) → High(x))', '∀x (Bloomberg(x) → Manhattan(x))', '∀x (BloombergLogo(x) → Bloomberg(x))', '¬(NewHaven(towera) ⊕ Manhattan(towera))', 'BloombergLogo(towerb) ∧ Manhattan(towerb)']	False	hyb
433	1243	Tower A is neither a building with the Bloomberg logo nor managed by Yale Housing.	['No buildings in New Haven are higher than 400 meters. ', 'All buildings managed by Yale Housing are in New Haven. ', 'All buildings in Manhattan are higher than 400 meters. ', 'All buildings owned by Bloomberg are in Manhattan. ', 'All buildings with the Bloomberg logo are buildings owned by Bloomberg. ', 'Tower A is neither in New Haven nor in Manhattan.', 'Tower B is a building with the Bloomberg logo and in Manhattan. ']	['∀x (NewHaven(x) → ¬High(x))', '∀x (YaleHousing(x) → NewHaven(x))', '∀x (Manhattan(x) → High(x))', '∀x (Bloomberg(x) → Manhattan(x))', '∀x (BloombergLogo(x) → Bloomberg(x))', '¬(NewHaven(towera) ⊕ Manhattan(towera))', 'BloombergLogo(towerb) ∧ Manhattan(towerb)']	True	hyb
439	1266	Bubbles is an Osprey.	['No fish are birds.', 'Everything that is an osprey is a bird.', 'If something is a carp, then it is a fish.', 'All goldfish are carp.', 'If Bubbles is either an osprey or a goldfish, then Bubbles is not a fish.']	['∀x (Fish(x) → ¬Bird(x))', '∀x (Osprey(x) → Bird(x))', '∀x (Carp(x) → Fish(x))', '∀x (Goldfish(x) → Carp(x))', 'Osprey(bubbles) ⊕ Carp(bubbles) → ¬Fish(bubbles)']	Unknown	hyb
439	1267	Bubbles is a carp.	['No fish are birds.', 'Everything that is an osprey is a bird.', 'If something is a carp, then it is a fish.', 'All goldfish are carp.', 'If Bubbles is either an osprey or a goldfish, then Bubbles is not a fish.']	['∀x (Fish(x) → ¬Bird(x))', '∀x (Osprey(x) → Bird(x))', '∀x (Carp(x) → Fish(x))', '∀x (Goldfish(x) → Carp(x))', 'Osprey(bubbles) ⊕ Carp(bubbles) → ¬Fish(bubbles)']	False	hyb
439	1268	Bubbles is not a carp.	['No fish are birds.', 'Everything that is an osprey is a bird.', 'If something is a carp, then it is a fish.', 'All goldfish are carp.', 'If Bubbles is either an osprey or a goldfish, then Bubbles is not a fish.']	['∀x (Fish(x) → ¬Bird(x))', '∀x (Osprey(x) → Bird(x))', '∀x (Carp(x) → Fish(x))', '∀x (Goldfish(x) → Carp(x))', 'Osprey(bubbles) ⊕ Carp(bubbles) → ¬Fish(bubbles)']	True	hyb
158	455	Mr. Smith has been to San Francisco.	['Mr. and Mrs. Smith make a travel plan, they want to go to a city in California or Florida, and where neither of them has ever been.', 'Cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.', 'Cities in Florida that they are interested in are Orlando and Miami.', 'Mr. Smith has been to two cities in California.', 'Mrs. Smith has been to one city in Florida.']	['∀x (WantToGo(x) → (California(x) ∨ Florida(x)) ∧ (NeverGo(x)))', '∀x (((SanFrancisco(x) ∨ LosAngeles(x) ∨ SanDiego(x)) ∧ California(x)) → WantToGo(x))', '∀x ((Orlando(x) ∨ Miami(x)) ∧ Florida(x)) → WantToGo(x))', 'CaliforniaCityVisited(mr.smith, two)', 'FloridaCityVisited(mrs.smith, one)']	Unknown	wiki
158	456	They have at leat one candidate city in Florida to visit.	['Mr. and Mrs. Smith make a travel plan, they want to go to a city in California or Florida, and where neither of them has ever been.', 'Cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.', 'Cities in Florida that they are interested in are Orlando and Miami.', 'Mr. Smith has been to two cities in California.', 'Mrs. Smith has been to one city in Florida.']	['∀x (WantToGo(x) → (California(x) ∨ Florida(x)) ∧ (NeverGo(x)))', '∀x (((SanFrancisco(x) ∨ LosAngeles(x) ∨ SanDiego(x)) ∧ California(x)) → WantToGo(x))', '∀x ((Orlando(x) ∨ Miami(x)) ∧ Florida(x)) → WantToGo(x))', 'CaliforniaCityVisited(mr.smith, two)', 'FloridaCityVisited(mrs.smith, one)']	Unknown	wiki
158	457	They have at least two candidate cities in California to visit.	['Mr. and Mrs. Smith make a travel plan, they want to go to a city in California or Florida, and where neither of them has ever been.', 'Cities in California that they are interested in are San Francisco, Los Angeles, and San Diego.', 'Cities in Florida that they are interested in are Orlando and Miami.', 'Mr. Smith has been to two cities in California.', 'Mrs. Smith has been to one city in Florida.']	['∀x (WantToGo(x) → (California(x) ∨ Florida(x)) ∧ (NeverGo(x)))', '∀x (((SanFrancisco(x) ∨ LosAngeles(x) ∨ SanDiego(x)) ∧ California(x)) → WantToGo(x))', '∀x ((Orlando(x) ∨ Miami(x)) ∧ Florida(x)) → WantToGo(x))', 'CaliforniaCityVisited(mr.smith, two)', 'FloridaCityVisited(mrs.smith, one)']	Unknown	wiki
486	1429	A bird is still.	['Everything is either big or small.', 'All big things are heavy. ', 'All small things are light. ', 'All heavy things are still.', 'All light things are unstable.', 'All unstable things are changing.', 'All unstable things are kinetic. ', 'A bird is not both heavy and still.']	['∀x (Big(x) ⊕ Small(x))', '∀x (Big(x) → Heavy(x))', '∀x (Small(x) → Light(x))', '∀x (Heavy(x) → Still(x))', '∀x (Light(x) → Unstable(x))', '∀x (Unstable(x) → Changing(x))', '∀x (Unstable(x) → Kinetic(x))', '¬(Heavy(bird) ∧ Still(bird))']	Unknown	hyb
486	1430	A bird is not still.	['Everything is either big or small.', 'All big things are heavy. ', 'All small things are light. ', 'All heavy things are still.', 'All light things are unstable.', 'All unstable things are changing.', 'All unstable things are kinetic. ', 'A bird is not both heavy and still.']	['∀x (Big(x) ⊕ Small(x))', '∀x (Big(x) → Heavy(x))', '∀x (Small(x) → Light(x))', '∀x (Heavy(x) → Still(x))', '∀x (Light(x) → Unstable(x))', '∀x (Unstable(x) → Changing(x))', '∀x (Unstable(x) → Kinetic(x))', '¬(Heavy(bird) ∧ Still(bird))']	Unknown	hyb
486	1431	A bird is kinetic and changing.	['Everything is either big or small.', 'All big things are heavy. ', 'All small things are light. ', 'All heavy things are still.', 'All light things are unstable.', 'All unstable things are changing.', 'All unstable things are kinetic. ', 'A bird is not both heavy and still.']	['∀x (Big(x) ⊕ Small(x))', '∀x (Big(x) → Heavy(x))', '∀x (Small(x) → Light(x))', '∀x (Heavy(x) → Still(x))', '∀x (Light(x) → Unstable(x))', '∀x (Unstable(x) → Changing(x))', '∀x (Unstable(x) → Kinetic(x))', '¬(Heavy(bird) ∧ Still(bird))']	True	hyb
486	1432	A bird is kinetic or changing.	['Everything is either big or small.', 'All big things are heavy. ', 'All small things are light. ', 'All heavy things are still.', 'All light things are unstable.', 'All unstable things are changing.', 'All unstable things are kinetic. ', 'A bird is not both heavy and still.']	['∀x (Big(x) ⊕ Small(x))', '∀x (Big(x) → Heavy(x))', '∀x (Small(x) → Light(x))', '∀x (Heavy(x) → Still(x))', '∀x (Light(x) → Unstable(x))', '∀x (Unstable(x) → Changing(x))', '∀x (Unstable(x) → Kinetic(x))', '¬(Heavy(bird) ∧ Still(bird))']	True	hyb
486	1433	A bird is either kinetic or changing.	['Everything is either big or small.', 'All big things are heavy. ', 'All small things are light. ', 'All heavy things are still.', 'All light things are unstable.', 'All unstable things are changing.', 'All unstable things are kinetic. ', 'A bird is not both heavy and still.']	['∀x (Big(x) ⊕ Small(x))', '∀x (Big(x) → Heavy(x))', '∀x (Small(x) → Light(x))', '∀x (Heavy(x) → Still(x))', '∀x (Light(x) → Unstable(x))', '∀x (Unstable(x) → Changing(x))', '∀x (Unstable(x) → Kinetic(x))', '¬(Heavy(bird) ∧ Still(bird))']	False	hyb
486	1434	If a bird is small or still, then the bird is either kinetic or changing.	['Everything is either big or small.', 'All big things are heavy. ', 'All small things are light. ', 'All heavy things are still.', 'All light things are unstable.', 'All unstable things are changing.', 'All unstable things are kinetic. ', 'A bird is not both heavy and still.']	['∀x (Big(x) ⊕ Small(x))', '∀x (Big(x) → Heavy(x))', '∀x (Small(x) → Light(x))', '∀x (Heavy(x) → Still(x))', '∀x (Light(x) → Unstable(x))', '∀x (Unstable(x) → Changing(x))', '∀x (Unstable(x) → Kinetic(x))', '¬(Heavy(bird) ∧ Still(bird))']	False	hyb
95	288	DI Ray was created by a Brit.	['DI Ray is a police procedural television series.', 'DI Ray was created and written by Maya Sondhi.', 'DI Ray was produced by Jed Mercurio.', 'Maya Sondhi and Jed Mercurio are both British.']	['TelevisionSeries(diRay)', 'Create(maya, diRay) ∧ Write(maya, diRay)', 'Produce(jed, diRay)', 'British(maya) ∧ British(jed) ']	True	wiki
95	289	Some Brit produced a television series.	['DI Ray is a police procedural television series.', 'DI Ray was created and written by Maya Sondhi.', 'DI Ray was produced by Jed Mercurio.', 'Maya Sondhi and Jed Mercurio are both British.']	['TelevisionSeries(diRay)', 'Create(maya, diRay) ∧ Write(maya, diRay)', 'Produce(jed, diRay)', 'British(maya) ∧ British(jed) ']	True	wiki
465	1347	Mike is a woman.	['All men are human.', 'All gentlemen are men.', 'All lawyers are gentlemen.', 'All women are human.', 'No sheep are human.', 'If Mike is not both a human and a sheep, then Mike is either a man or a human.']	['∀x (Man(x) → Human(x))', '∀x (Gentleman(x) → Man(x))', '∀x (Lawyer(x) → Gentleman(x))', '∀x (Woman(x) → Human(x))', '∀x (Sheep(x) → ¬Human(x))', '(¬Human(mike) ∨ ¬Sheep(mike)) → Man(mike) ⊕ Human(mike)']	Unknown	hyb
465	1348	If Mike is a gentleman or a lawyer, then Mike is neither a woman nor a lawyer.	['All men are human.', 'All gentlemen are men.', 'All lawyers are gentlemen.', 'All women are human.', 'No sheep are human.', 'If Mike is not both a human and a sheep, then Mike is either a man or a human.']	['∀x (Man(x) → Human(x))', '∀x (Gentleman(x) → Man(x))', '∀x (Lawyer(x) → Gentleman(x))', '∀x (Woman(x) → Human(x))', '∀x (Sheep(x) → ¬Human(x))', '(¬Human(mike) ∨ ¬Sheep(mike)) → Man(mike) ⊕ Human(mike)']	True	hyb
465	1349	If Mike is not both a woman and a lawyer, then Mike is a lawyer.	['All men are human.', 'All gentlemen are men.', 'All lawyers are gentlemen.', 'All women are human.', 'No sheep are human.', 'If Mike is not both a human and a sheep, then Mike is either a man or a human.']	['∀x (Man(x) → Human(x))', '∀x (Gentleman(x) → Man(x))', '∀x (Lawyer(x) → Gentleman(x))', '∀x (Woman(x) → Human(x))', '∀x (Sheep(x) → ¬Human(x))', '(¬Human(mike) ∨ ¬Sheep(mike)) → Man(mike) ⊕ Human(mike)']	False	hyb
326	839	Stephen Curry is a centerback.	['Some defenders are centerback.', 'All defenders are soccer players.', 'No soccer players are professional basketball players.', 'All NBA players are professional basketball players.', 'Stephen Curry is an NBA player.']	['∃x (Defender(x) ∧ Centerback(x))', '∀x (Defender(x) → SoccerPlayer(x))', '¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))', '∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))', 'NBAPlayer(stephencurry)']	Unknown	hyb
326	840	Stephen Curry is not a centerback and a defender.	['Some defenders are centerback.', 'All defenders are soccer players.', 'No soccer players are professional basketball players.', 'All NBA players are professional basketball players.', 'Stephen Curry is an NBA player.']	['∃x (Defender(x) ∧ Centerback(x))', '∀x (Defender(x) → SoccerPlayer(x))', '¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))', '∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))', 'NBAPlayer(stephencurry)']	False	hyb
326	841	If Stephen Curry is not a centerback and a defender, then Stephen Curry is neither a soccer player nor a professional basketball player.	['Some defenders are centerback.', 'All defenders are soccer players.', 'No soccer players are professional basketball players.', 'All NBA players are professional basketball players.', 'Stephen Curry is an NBA player.']	['∃x (Defender(x) ∧ Centerback(x))', '∀x (Defender(x) → SoccerPlayer(x))', '¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))', '∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))', 'NBAPlayer(stephencurry)']	True	hyb
186	540	John can not buy the 1080 monitor.	["If a person doesn't have enough money to buy a product, then that person can't buy it.", 'Monitors are products.', '4k monitors are more expensive than 1080 monitors and 2k monitors.', 'John is a person.', "John doesn't have enough money to buy a 2k monitor."]	['∀x ∀y (Person(x) ∧ Product(y) ∧ ¬HaveEnoughMoneyFor(x, y) → ¬Buy(x, y))', '∀x (Monitor(x) → Product(x))', '∀x ∀y ∀z (Monitor(x) ∧ Monitor(y) ∧ Monitor(z) ∧ FourK(x) ∧ OneOEightO(y) ∧ TwoK(z) → MoreExpensive(x, y) ∧ MoreExpensive(x, z))', 'Person(john)', '∀x (Monitor(x) ∧ TwoK(x) → ¬HaveEnoughMoneyFor(john, x))']	Unknown	wiki
186	541	John can not buy the 2k monitor.	["If a person doesn't have enough money to buy a product, then that person can't buy it.", 'Monitors are products.', '4k monitors are more expensive than 1080 monitors and 2k monitors.', 'John is a person.', "John doesn't have enough money to buy a 2k monitor."]	['∀x ∀y (Person(x) ∧ Product(y) ∧ ¬HaveEnoughMoneyFor(x, y) → ¬Buy(x, y))', '∀x (Monitor(x) → Product(x))', '∀x ∀y ∀z (Monitor(x) ∧ Monitor(y) ∧ Monitor(z) ∧ FourK(x) ∧ OneOEightO(y) ∧ TwoK(z) → MoreExpensive(x, y) ∧ MoreExpensive(x, z))', 'Person(john)', '∀x (Monitor(x) ∧ TwoK(x) → ¬HaveEnoughMoneyFor(john, x))']	True	wiki
263	712	All important scientific achievements are U.S. inventions.	['All artificial satellites are important scientific achievements.', 'Some artificial satellites are not U.S. inventions.']	['∀x (ArtificialSatellite(x) → ImportantScientificAchievement(x))', '∃x (ArtificialSatellite(x) ∧ ¬USInvention(x))']	False	wiki
257	706	Some mammals are not pets.	['Some cats are not pets.', 'All cats are mammals.']	['∃x (Cat(x) ∧ ¬Pet(x))', '∀x (Cat(x) → Mammal(x))']	True	wiki
364	972	Sam is addicted to coffee and other caffeinated drinks.	['If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.', 'People either visit a coffee shop at least three times a week or order takeout at least once a day.', 'If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.', 'If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.', 'All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.', 'Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours']	['∀x (CoffeeShop(x) → CaffeineAddict(x))', '∀x (CoffeeShop(x) ∨ Takeout(x))', '∀x (MakeFood(x) → Takeout(x))', '∀x (KitchenAppliance(x) → ¬Takeout(x))', '∀x (Busy(x) → MakeFood(x))', '(CaffeineAddict(sam) ∧ Busy(sam)) ⊕ (¬CaffeineAddict(sam) ∧ ¬Busy(sam))']	Unknown	hyb
364	973	Sam owns at least one coffeemaker and one blender in her home.	['If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.', 'People either visit a coffee shop at least three times a week or order takeout at least once a day.', 'If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.', 'If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.', 'All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.', 'Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours']	['∀x (CoffeeShop(x) → CaffeineAddict(x))', '∀x (CoffeeShop(x) ∨ Takeout(x))', '∀x (MakeFood(x) → Takeout(x))', '∀x (KitchenAppliance(x) → ¬Takeout(x))', '∀x (Busy(x) → MakeFood(x))', '(CaffeineAddict(sam) ∧ Busy(sam)) ⊕ (¬CaffeineAddict(sam) ∧ ¬Busy(sam))']	False	hyb
364	974	Sam either owns at least one coffeemaker and one blender in her home or orders takeout at least once a day.	['If people visit a coffee shop at least three times a week, then they are addicted to coffee or other caffeinated drinks.', 'People either visit a coffee shop at least three times a week or order takeout at least once a day.', 'If people make a lot of their own food at home using recipes and online guides, then they order takeout at least once a day.', 'If people own at least one coffeemaker and one blender in their home, then they do not order takeout at least once a day.', 'All people who lead very busy lives that include 12-hour work hours make a lot of their own food at home using recipes and online guides.', 'Sam is either both addicted to coffee or other caffeinated drinks or leads very busy lives that include 12-hour work hours, or she is neither addicted to coffee and other caffeinated drinks nor leads very busy lives that include 12-hour work hours']	['∀x (CoffeeShop(x) → CaffeineAddict(x))', '∀x (CoffeeShop(x) ∨ Takeout(x))', '∀x (MakeFood(x) → Takeout(x))', '∀x (KitchenAppliance(x) → ¬Takeout(x))', '∀x (Busy(x) → MakeFood(x))', '(CaffeineAddict(sam) ∧ Busy(sam)) ⊕ (¬CaffeineAddict(sam) ∧ ¬Busy(sam))']	True	hyb
327	842	Roger Federer is a centerback.	['No professional basketball players are soccer players.', 'All NBA players are professional basketball players.', 'All defenders are soccer players.', 'All centerbacks are defenders.', 'Roger Federer is not an NBA player or a defender.']	['¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))', '∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))', '∀x (Defender(x) → SoccerPlayer(x))', '∀x (Centerback(x) → Defender(x))', '¬(NBAPlayer(rogerfederer) ⊕ Defender(rogerfederer))']	False	hyb
327	843	Roger Federer is not a centerback.	['No professional basketball players are soccer players.', 'All NBA players are professional basketball players.', 'All defenders are soccer players.', 'All centerbacks are defenders.', 'Roger Federer is not an NBA player or a defender.']	['¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))', '∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))', '∀x (Defender(x) → SoccerPlayer(x))', '∀x (Centerback(x) → Defender(x))', '¬(NBAPlayer(rogerfederer) ⊕ Defender(rogerfederer))']	True	hyb
327	844	Roger Federer is a soccer player.	['No professional basketball players are soccer players.', 'All NBA players are professional basketball players.', 'All defenders are soccer players.', 'All centerbacks are defenders.', 'Roger Federer is not an NBA player or a defender.']	['¬(∃x (SoccerPlayer(x) ∧ ProfessionalBasketballPlayer(x)))', '∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))', '∀x (Defender(x) → SoccerPlayer(x))', '∀x (Centerback(x) → Defender(x))', '¬(NBAPlayer(rogerfederer) ⊕ Defender(rogerfederer))']	Unknown	hyb
443	1279	Mary is nice.	['Some teachers working at a pool are not nice.', 'All teachers working at pools are pool managers.', 'All pool managers are lifeguards.', 'If someone is a lifeguard, then they work at a pool.', 'Mary does not work at a pool.']	['∃x (TeacherWorkingAtPool(x) ∧ ¬Nice(x))', '∀x (TeacherWorkingAtPool(x) → PoolManager(x))', '∀x (PoolManager(x) → Lifeguard(x))', '∀x (Lifeguard(x) → WorkAtPool(x))', '¬WorkAtPool(mary))']	Unknown	hyb
443	1280	Mary is not nice and is a teacher working at a pool.	['Some teachers working at a pool are not nice.', 'All teachers working at pools are pool managers.', 'All pool managers are lifeguards.', 'If someone is a lifeguard, then they work at a pool.', 'Mary does not work at a pool.']	['∃x (TeacherWorkingAtPool(x) ∧ ¬Nice(x))', '∀x (TeacherWorkingAtPool(x) → PoolManager(x))', '∀x (PoolManager(x) → Lifeguard(x))', '∀x (Lifeguard(x) → WorkAtPool(x))', '¬WorkAtPool(mary))']	True	hyb
443	1281	Mary is nice and is a teacher working at a pool.	['Some teachers working at a pool are not nice.', 'All teachers working at pools are pool managers.', 'All pool managers are lifeguards.', 'If someone is a lifeguard, then they work at a pool.', 'Mary does not work at a pool.']	['∃x (TeacherWorkingAtPool(x) ∧ ¬Nice(x))', '∀x (TeacherWorkingAtPool(x) → PoolManager(x))', '∀x (PoolManager(x) → Lifeguard(x))', '∀x (Lifeguard(x) → WorkAtPool(x))', '¬WorkAtPool(mary))']	False	hyb
302	751	There exist art pieces that do not require practice.	['Not all art pieces require talent.', 'Everything that requires talent requires practice.']	['∃x (ArtPiece(x) ∧ ¬RequiresTalent(x))', '∀x (RequiresTalent(x) → RequiresPractice(x))']	True	wiki
88	268	Bernarda Bryson Shahn was born in Greece.	['Bernarda Bryson Shahn was a painter and lithographer.', 'Bernarda Bryson Shahn was born in Athens, Ohio. ', 'Bernarda Bryson Shahn was married to Ben Shahn.', 'People born in Athens, Ohio are Americans.']	['Painter(bernardaBrysonShahn) ∧ Lithographer(bernardaBrysonShahn) ', 'BornIn(bernardaBrysonShahn, athensOhio)', 'MarriedTo(bernardaBrysonShahn, benShahn)', '∀x (BornIn(x, athensOhio) → American(x))']	Unknown	wiki
88	269	Bernarda Bryson Shahn was American.	['Bernarda Bryson Shahn was a painter and lithographer.', 'Bernarda Bryson Shahn was born in Athens, Ohio. ', 'Bernarda Bryson Shahn was married to Ben Shahn.', 'People born in Athens, Ohio are Americans.']	['Painter(bernardaBrysonShahn) ∧ Lithographer(bernardaBrysonShahn) ', 'BornIn(bernardaBrysonShahn, athensOhio)', 'MarriedTo(bernardaBrysonShahn, benShahn)', '∀x (BornIn(x, athensOhio) → American(x))']	True	wiki
88	270	Bernarda Bryson Shahn had been divorced once.	['Bernarda Bryson Shahn was a painter and lithographer.', 'Bernarda Bryson Shahn was born in Athens, Ohio. ', 'Bernarda Bryson Shahn was married to Ben Shahn.', 'People born in Athens, Ohio are Americans.']	['Painter(bernardaBrysonShahn) ∧ Lithographer(bernardaBrysonShahn) ', 'BornIn(bernardaBrysonShahn, athensOhio)', 'MarriedTo(bernardaBrysonShahn, benShahn)', '∀x (BornIn(x, athensOhio) → American(x))']	Unknown	wiki
369	987	Emma lives with at least one roommate.	['If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.', 'If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.', 'People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.', 'If people live with at least one roommate then they do not own at least one pet.', 'All people who own at least one pet live with at least one roommate.', 'If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. ']	['∀x (Iphone(x) → ¬House(x))', '∀x (Tech(x) → Iphone(x))', '∀x (House(x) ∨ Apartment(x))', '∀x (Roommate(x) → ¬Pet(x))', '∀x (Apartment(x) → Roommate(x))', '¬(Pet(emma) ∧ Apartment(emma)) → ((Pet(emma) ∧ Apartment(emma)) ∨ (¬Pet(emma) ∧ ¬Apartment(emma)))']	Unknown	hyb
369	988	Emma enjoys reading about tech specs and keeping up to date on the latest technology.	['If people upgrade to the newest iPhone model every year, then they are not saving money for a down payment on a new house.', 'If people enjoy reading about tech specs and keeping up to date on the latest technology, then they upgrade to the newest iPhone model every year.', 'People either are saving money for a down payment on a new house or they live in apartments in big metropolitan cities.', 'If people live with at least one roommate then they do not own at least one pet.', 'All people who own at least one pet live with at least one roommate.', 'If Emma does not both own at least one pet and live in apartments in big metropolitan cities, then Emma either owns at least one pet and lives in an apartment in big metropolitan cities, or she neither owns a pet nor lives in an apartment in big metropolitan cities. ']	['∀x (Iphone(x) → ¬House(x))', '∀x (Tech(x) → Iphone(x))', '∀x (House(x) ∨ Apartment(x))', '∀x (Roommate(x) → ¬Pet(x))', '∀x (Apartment(x) → Roommate(x))', '¬(Pet(emma) ∧ Apartment(emma)) → ((Pet(emma) ∧ Apartment(emma)) ∨ (¬Pet(emma) ∧ ¬Apartment(emma)))']	False	hyb
451	1303	Nancy is a faculty member.	['If you are on the payroll, then you are being paid by the school.', 'If someone has a job at a school, then they are on the payroll.', 'All faculty members have a job at a school.', 'One can either be a faculty member or a teacher.', 'Every teacher has students.', 'If Nancy is a teacher, then they are on the payroll.', 'If Nancy is not a teacher, then they are not paid by the school.']	['∀x (OnPayroll(x) → PaidBySchool(x))', '∀x (JobAtSchool(x) → OnPayroll(x))', '∀x (FacultyMember(x) → JobAtSchool(x))', '∀x (FacultyMember(x) ∨ Teacher(x))', '∀x (Teacher(x) → HasStudents(x))', 'Teacher(nancy) → OnPayroll(nancy)', '¬Teacher(nancy) → ¬OnPayroll(nancy)']	Unknown	hyb
451	1304	Nancy is paid by the school and has students.	['If you are on the payroll, then you are being paid by the school.', 'If someone has a job at a school, then they are on the payroll.', 'All faculty members have a job at a school.', 'One can either be a faculty member or a teacher.', 'Every teacher has students.', 'If Nancy is a teacher, then they are on the payroll.', 'If Nancy is not a teacher, then they are not paid by the school.']	['∀x (OnPayroll(x) → PaidBySchool(x))', '∀x (JobAtSchool(x) → OnPayroll(x))', '∀x (FacultyMember(x) → JobAtSchool(x))', '∀x (FacultyMember(x) ∨ Teacher(x))', '∀x (Teacher(x) → HasStudents(x))', 'Teacher(nancy) → OnPayroll(nancy)', '¬Teacher(nancy) → ¬OnPayroll(nancy)']	True	hyb
451	1305	Nancy is not paid by the school and has students.	['If you are on the payroll, then you are being paid by the school.', 'If someone has a job at a school, then they are on the payroll.', 'All faculty members have a job at a school.', 'One can either be a faculty member or a teacher.', 'Every teacher has students.', 'If Nancy is a teacher, then they are on the payroll.', 'If Nancy is not a teacher, then they are not paid by the school.']	['∀x (OnPayroll(x) → PaidBySchool(x))', '∀x (JobAtSchool(x) → OnPayroll(x))', '∀x (FacultyMember(x) → JobAtSchool(x))', '∀x (FacultyMember(x) ∨ Teacher(x))', '∀x (Teacher(x) → HasStudents(x))', 'Teacher(nancy) → OnPayroll(nancy)', '¬Teacher(nancy) → ¬OnPayroll(nancy)']	False	hyb
248	696	If Jane saves enough money for the summer, she will see a kangaroo.	['Kangaroo is an animal.', 'No Kangaroos live in Germany.', 'If Jane saves enough money for the summer, she will fly to Germany.', 'If Jane flies to Germany, she will go to the Berlin Zoo.', 'If someone goes to the Berlin Zoo, they will see some of the animals that live in Germany.']	['∀x (Kangaroo(x) → Animal(x))', '∀x (Kangaroo(x) → ¬LiveIn(x, germany))', 'EnoughMoney(jane) → FlyTo(jane, germany)', 'FlyTo(jane, germany) → GoTo(jane, berlinzoo) ', '∀x ∃y (GoTo(x, berlinzoo) ∧ Animal(y) → MaySee(y, x, berlinzoo))']	False	wiki
214	615	CPSC 201 has no prerequisites.	['If a class has prerequisites the student must take the prerequisites to take the class.', 'If a class has no prerequisites, then the student can take the class', 'CPSC 201 and CPSC 223 are prerequisites for CPSC 323.', 'Intro Microeconomics is the only prerequisite for Intermediate Microeconomics.', 'Intro Geology has no prerequisites.']	['∀x ∀y ((Prereq(x, y) ∧ Taken(x)) ↔ CanTake(y))', '∀x ∀y (¬Prereq(x, y) → CanTake(y))', 'Prereq(cpsc201, cpsc323) ∧ Prereq(cpsc223, cpsc323)', '(Prereq(intromicro, intermediatemicro) ∧ Taken(intromicro)) → CanTake(intermediatemicro)', '∀x (¬Prereq(x, introgeology))']	Unknown	wiki
214	616	If a student took CPSC 201 but did not take CPSC 223, they can take CPSC 323.	['If a class has prerequisites the student must take the prerequisites to take the class.', 'If a class has no prerequisites, then the student can take the class', 'CPSC 201 and CPSC 223 are prerequisites for CPSC 323.', 'Intro Microeconomics is the only prerequisite for Intermediate Microeconomics.', 'Intro Geology has no prerequisites.']	['∀x ∀y ((Prereq(x, y) ∧ Taken(x)) ↔ CanTake(y))', '∀x ∀y (¬Prereq(x, y) → CanTake(y))', 'Prereq(cpsc201, cpsc323) ∧ Prereq(cpsc223, cpsc323)', '(Prereq(intromicro, intermediatemicro) ∧ Taken(intromicro)) → CanTake(intermediatemicro)', '∀x (¬Prereq(x, introgeology))']	False	wiki
214	617	A student cannot take Intro Geology.	['If a class has prerequisites the student must take the prerequisites to take the class.', 'If a class has no prerequisites, then the student can take the class', 'CPSC 201 and CPSC 223 are prerequisites for CPSC 323.', 'Intro Microeconomics is the only prerequisite for Intermediate Microeconomics.', 'Intro Geology has no prerequisites.']	['∀x ∀y ((Prereq(x, y) ∧ Taken(x)) ↔ CanTake(y))', '∀x ∀y (¬Prereq(x, y) → CanTake(y))', 'Prereq(cpsc201, cpsc323) ∧ Prereq(cpsc223, cpsc323)', '(Prereq(intromicro, intermediatemicro) ∧ Taken(intromicro)) → CanTake(intermediatemicro)', '∀x (¬Prereq(x, introgeology))']	False	wiki
214	618	Intermediate Microeconomics has one prerequisite.	['If a class has prerequisites the student must take the prerequisites to take the class.', 'If a class has no prerequisites, then the student can take the class', 'CPSC 201 and CPSC 223 are prerequisites for CPSC 323.', 'Intro Microeconomics is the only prerequisite for Intermediate Microeconomics.', 'Intro Geology has no prerequisites.']	['∀x ∀y ((Prereq(x, y) ∧ Taken(x)) ↔ CanTake(y))', '∀x ∀y (¬Prereq(x, y) → CanTake(y))', 'Prereq(cpsc201, cpsc323) ∧ Prereq(cpsc223, cpsc323)', '(Prereq(intromicro, intermediatemicro) ∧ Taken(intromicro)) → CanTake(intermediatemicro)', '∀x (¬Prereq(x, introgeology))']	True	wiki
37	108	The Harry Potter series of books is a heptalogy.	['A heptalogy, is a compound literary or narrative work that is made up of seven distinct works.', 'The Harry Potter series consists of 7 distinct works.', 'The Chronicles of Narnia consists of 7 distinct works.']	['∀x (SevenDistinctWorks(x) → Heptalogy(x))', 'SevenDistinctWorks(harryPotter)', 'SevenDistinctWorks(chroniclesofNarnia)']	True	wiki
37	109	The Chronicles of Narnia series of books is not a heptalogy.	['A heptalogy, is a compound literary or narrative work that is made up of seven distinct works.', 'The Harry Potter series consists of 7 distinct works.', 'The Chronicles of Narnia consists of 7 distinct works.']	['∀x (SevenDistinctWorks(x) → Heptalogy(x))', 'SevenDistinctWorks(harryPotter)', 'SevenDistinctWorks(chroniclesofNarnia)']	False	wiki
37	110	The Lord of Rings is a heptalogy.	['A heptalogy, is a compound literary or narrative work that is made up of seven distinct works.', 'The Harry Potter series consists of 7 distinct works.', 'The Chronicles of Narnia consists of 7 distinct works.']	['∀x (SevenDistinctWorks(x) → Heptalogy(x))', 'SevenDistinctWorks(harryPotter)', 'SevenDistinctWorks(chroniclesofNarnia)']	Unknown	wiki
381	1022	Clyde attends Renaissance fairs regularly.	['All people who attend Renaissance fairs regularly enjoy dressing up in old-fashioned and historical period clothing.', 'If people are fascinated by the history of the Renaissance and other past eras, then they attend Renaissance fairs regularly.', 'People are either fascinated by the history of the Renaissance and other past eras, or are not nostalgic academics who enjoy learning.', 'If people are focused on the future and industry professions, then they are not nostalgic academics who enjoy learning.', 'If people are historical professors who are passionate about their job and subject, then they are nostalgic academics who enjoy learning.', 'If Clyde is not focused on the future and industry professions, then he is neither focused on the future and industry professions nor enjoys dressing up in old-fashioned and historical period clothing.']	['∀x (RenaissanceFair(x) → DressingUp(x))', '∀x (HistoryRenaissance(x) → RenaissanceFair(x))', '∀x (HistoryRenaissance(x) ∨ NotAcademics(x))', '∀x (Industry(x) → NotAcademics(x))', '∀x (HistoryProf(x) → ¬NotAcademics(x))', '¬Industry(clyde) → ¬(Industry(clyde) ∨ DressingUp(clyde))']	Unknown	hyb
381	1023	Clyde is a history professor who is passionate about his job and subject.	['All people who attend Renaissance fairs regularly enjoy dressing up in old-fashioned and historical period clothing.', 'If people are fascinated by the history of the Renaissance and other past eras, then they attend Renaissance fairs regularly.', 'People are either fascinated by the history of the Renaissance and other past eras, or are not nostalgic academics who enjoy learning.', 'If people are focused on the future and industry professions, then they are not nostalgic academics who enjoy learning.', 'If people are historical professors who are passionate about their job and subject, then they are nostalgic academics who enjoy learning.', 'If Clyde is not focused on the future and industry professions, then he is neither focused on the future and industry professions nor enjoys dressing up in old-fashioned and historical period clothing.']	['∀x (RenaissanceFair(x) → DressingUp(x))', '∀x (HistoryRenaissance(x) → RenaissanceFair(x))', '∀x (HistoryRenaissance(x) ∨ NotAcademics(x))', '∀x (Industry(x) → NotAcademics(x))', '∀x (HistoryProf(x) → ¬NotAcademics(x))', '¬Industry(clyde) → ¬(Industry(clyde) ∨ DressingUp(clyde))']	False	hyb
381	1024	Clyde is a history professor who is passionate about his job and subject, or is not a nostalgic academic who enjoys learning.	['All people who attend Renaissance fairs regularly enjoy dressing up in old-fashioned and historical period clothing.', 'If people are fascinated by the history of the Renaissance and other past eras, then they attend Renaissance fairs regularly.', 'People are either fascinated by the history of the Renaissance and other past eras, or are not nostalgic academics who enjoy learning.', 'If people are focused on the future and industry professions, then they are not nostalgic academics who enjoy learning.', 'If people are historical professors who are passionate about their job and subject, then they are nostalgic academics who enjoy learning.', 'If Clyde is not focused on the future and industry professions, then he is neither focused on the future and industry professions nor enjoys dressing up in old-fashioned and historical period clothing.']	['∀x (RenaissanceFair(x) → DressingUp(x))', '∀x (HistoryRenaissance(x) → RenaissanceFair(x))', '∀x (HistoryRenaissance(x) ∨ NotAcademics(x))', '∀x (Industry(x) → NotAcademics(x))', '∀x (HistoryProf(x) → ¬NotAcademics(x))', '¬Industry(clyde) → ¬(Industry(clyde) ∨ DressingUp(clyde))']	True	hyb
270	719	No sports cars are automobiles designed for family use.	['No sports cars are vehicles intended to be driven at moderate speeds.', 'All automobiles designed for family use are vehicles intended to be driven at moderate speeds.']	['∀x (SportsCar(x) → ¬IntendedToBeDrivenAtModerateSpeeds(x))', '∀x (ForFamilyUse(x) → IntendedToBeDrivenAtModerateSpeeds(x))']	True	wiki
356	949	Kat is a person who comes to work every day with a positive attitude.	['If people work well in teams in their workplace, then they get along with all their colleagues at their work.', 'If people come to work every day with a positive attitude, then they work well in teams in their workplace.', 'People either come into work every day with a positive attitude or are always tired every morning.', 'If people get many promotions from their boss at work, then they receive negative feedback from teams at work.', 'Kat is either both a person who works well in teams in their workplace and is always tired every morning, or she neither works well in teams in their workplace nor is always tired every morning.']	['∀x (WorkTeams(x) → Colleagues(x))', '∀x (PositiveAttitude(x) → WorkTeams(x))', '∀x (PositiveAttitude(x) ⊕ Tired(x)) ∧ (∀x (Tired(x) → BossPromotions(x)))', '∀x (BossPromotions(x) → ¬NegativeFeedback(x))', '(WorkTeams(kat) ∧ Tired(kat)) ∨ ¬WorkTeams(kat) ∧ ¬Tired(kat))']	Unknown	hyb
356	950	Kat gets along with her colleagues at her work and receives negative feedback from teams at her work.	['If people work well in teams in their workplace, then they get along with all their colleagues at their work.', 'If people come to work every day with a positive attitude, then they work well in teams in their workplace.', 'People either come into work every day with a positive attitude or are always tired every morning.', 'If people get many promotions from their boss at work, then they receive negative feedback from teams at work.', 'Kat is either both a person who works well in teams in their workplace and is always tired every morning, or she neither works well in teams in their workplace nor is always tired every morning.']	['∀x (WorkTeams(x) → Colleagues(x))', '∀x (PositiveAttitude(x) → WorkTeams(x))', '∀x (PositiveAttitude(x) ⊕ Tired(x)) ∧ (∀x (Tired(x) → BossPromotions(x)))', '∀x (BossPromotions(x) → ¬NegativeFeedback(x))', '(WorkTeams(kat) ∧ Tired(kat)) ∨ ¬WorkTeams(kat) ∧ ¬Tired(kat))']	False	hyb
356	951	Kat either gets along with her colleagues at her work or receives negative feedback from teams at her work.	['If people work well in teams in their workplace, then they get along with all their colleagues at their work.', 'If people come to work every day with a positive attitude, then they work well in teams in their workplace.', 'People either come into work every day with a positive attitude or are always tired every morning.', 'If people get many promotions from their boss at work, then they receive negative feedback from teams at work.', 'Kat is either both a person who works well in teams in their workplace and is always tired every morning, or she neither works well in teams in their workplace nor is always tired every morning.']	['∀x (WorkTeams(x) → Colleagues(x))', '∀x (PositiveAttitude(x) → WorkTeams(x))', '∀x (PositiveAttitude(x) ⊕ Tired(x)) ∧ (∀x (Tired(x) → BossPromotions(x)))', '∀x (BossPromotions(x) → ¬NegativeFeedback(x))', '(WorkTeams(kat) ∧ Tired(kat)) ∨ ¬WorkTeams(kat) ∧ ¬Tired(kat))']	True	hyb
276	725	Drishti is free to modify.	['Drishti is open-source.', 'Open-source software is free to modify.']	['OpenSource(drishti)', '∀x (OpenSource(x) → ModifyFree(x))']	True	wiki
161	464	Zhang's English score is lower than 95.	['There are five grades including A+, A, B+, B, and C in English.', 'If a student gets A+ in English, then his score is greater than 95.', 'If a student gets A in English, then his score is in the range of 90-95.', 'Zhang got an A in English.', "Wang's English score is better than Zhang's.", "Wu's English score is lower than 90."]	['Grade(a+) ∨ Grade(a) ∨ Grade(b+) ∨ Grade(b) ∨ Grade(c)', '∀x (GetGrade(x, a+) → GreaterThan95(x))', '∀x (GetGrade(x, a) → Range90to95(x))', 'GetGrade(zhang, a)', 'Better(wang, zhang)', 'LowerThan90(wu)']	True	wiki
161	465	Wang got an A+ in English.	['There are five grades including A+, A, B+, B, and C in English.', 'If a student gets A+ in English, then his score is greater than 95.', 'If a student gets A in English, then his score is in the range of 90-95.', 'Zhang got an A in English.', "Wang's English score is better than Zhang's.", "Wu's English score is lower than 90."]	['Grade(a+) ∨ Grade(a) ∨ Grade(b+) ∨ Grade(b) ∨ Grade(c)', '∀x (GetGrade(x, a+) → GreaterThan95(x))', '∀x (GetGrade(x, a) → Range90to95(x))', 'GetGrade(zhang, a)', 'Better(wang, zhang)', 'LowerThan90(wu)']	Unknown	wiki
161	466	Wu does not get an A or A+ in English.	['There are five grades including A+, A, B+, B, and C in English.', 'If a student gets A+ in English, then his score is greater than 95.', 'If a student gets A in English, then his score is in the range of 90-95.', 'Zhang got an A in English.', "Wang's English score is better than Zhang's.", "Wu's English score is lower than 90."]	['Grade(a+) ∨ Grade(a) ∨ Grade(b+) ∨ Grade(b) ∨ Grade(c)', '∀x (GetGrade(x, a+) → GreaterThan95(x))', '∀x (GetGrade(x, a) → Range90to95(x))', 'GetGrade(zhang, a)', 'Better(wang, zhang)', 'LowerThan90(wu)']	True	wiki
216	621	At all times, Olivia prefers cool temperature.	["Olivia doesn't prefer warm temperature during the day.", 'When Olivia sleeps, she prefers cool temperature.', 'Olivia sleeps during the night.', 'Olivia works during the day.', 'Olivia either works or sleeps.', 'The time is either the day or the night.', 'Olivia either prefers warm temperature or prefers cool temperature.']	['∀x (Day(x) → ¬PrefersWarmAt(olivia, x))', '∀x (SleepingDuring(olivia, x) → PrefersCoolAt(olivia, x))', '∀x (SleepingDuring(olivia, x) → Night(x))', '∀x (WorkingDuring(olivia, x) → Day(x))', '∀x (WorkingDuring(olivia, x) ∨ SleepingDuring(olivia, x))', '∀x (Day(x) ∨ Night(x))', '∀x (PrefersWarmAt(olivia, x) ∨ PrefersCoolAt(olivia, x))']	True	wiki
207	596	Taylor Swift delivers a commencement speech in Manhattan.	['Taylor Swift gives a commencement speech in New York University in 2022.', 'Both Columbia University and New York University are located in Manhattan.', 'Taylor Swift has received three Grammy Album of the Year Awards.', 'Columbia University is one of the Ivy League schools.']	['Speech(taylorSwift, nyc)', 'Manhattan(columbiaUniversity) ∧ Manhattan(nyc)', 'HaveAlbum(taylorSwift)', 'IvyLeague(columbiaUniversity)']	True	wiki
207	597	The commencement speaker of NYU does not have any album.	['Taylor Swift gives a commencement speech in New York University in 2022.', 'Both Columbia University and New York University are located in Manhattan.', 'Taylor Swift has received three Grammy Album of the Year Awards.', 'Columbia University is one of the Ivy League schools.']	['Speech(taylorSwift, nyc)', 'Manhattan(columbiaUniversity) ∧ Manhattan(nyc)', 'HaveAlbum(taylorSwift)', 'IvyLeague(columbiaUniversity)']	False	wiki
424	1204	James is a customer who does not choose any plans.	['Customers either choose Plan A or Plan B.', 'All who choose Plan B are rewarded with a $30 gift card. ', 'There are no customers who do not choose any plans. ', 'No customers rewarded a $30 gift card are older than 80.', 'Customers are either older than 80 or are currently studying at school. ', 'James is not a customer who is currently studying at school. ']	['∀x (PlanA(x) ∨ PlanB(x))', '∀x (PlanB(x) → Award(x))', '∀x (¬NoPlan(x))', '∀x (Award(x) → ¬OlderThan80(x))', '∀x (OlderThan80(x) ∨ StudyAtSchool(x))', '¬StudyAtSchool(james)']	False	hyb
424	1205	James is a customer who chooses Plan A or does not choose any plans.	['Customers either choose Plan A or Plan B.', 'All who choose Plan B are rewarded with a $30 gift card. ', 'There are no customers who do not choose any plans. ', 'No customers rewarded a $30 gift card are older than 80.', 'Customers are either older than 80 or are currently studying at school. ', 'James is not a customer who is currently studying at school. ']	['∀x (PlanA(x) ∨ PlanB(x))', '∀x (PlanB(x) → Award(x))', '∀x (¬NoPlan(x))', '∀x (Award(x) → ¬OlderThan80(x))', '∀x (OlderThan80(x) ∨ StudyAtSchool(x))', '¬StudyAtSchool(james)']	True	hyb
424	1206	Suppose James is a customer who chooses Plan A or does not choose any plans, then he is either rewarded a $30 gift card or chooses Plan B.	['Customers either choose Plan A or Plan B.', 'All who choose Plan B are rewarded with a $30 gift card. ', 'There are no customers who do not choose any plans. ', 'No customers rewarded a $30 gift card are older than 80.', 'Customers are either older than 80 or are currently studying at school. ', 'James is not a customer who is currently studying at school. ']	['∀x (PlanA(x) ∨ PlanB(x))', '∀x (PlanB(x) → Award(x))', '∀x (¬NoPlan(x))', '∀x (Award(x) → ¬OlderThan80(x))', '∀x (OlderThan80(x) ∨ StudyAtSchool(x))', '¬StudyAtSchool(james)']	False	hyb
173	500	Detroit City has been in multiple races.	['Detroit City is a horse.', 'Some horses are racehorses.', 'If a horse falls during a race, then it dies.', 'Detroit City fell during a race.', 'A horse is a racehorse if it is in a race.']	['Horse(detroitcity)', '∃x (Horse(x) ∧ Racehorse(x))', '∀x (Horse(x) ∧ Racing(x) ∧ Falls(x) → Dead(x))', 'Racing(detroitcity) ∧ Falls(detroitcity)', '∀x (Horse(x) ∧ Racing(x) → Racehorse(x))']	Unknown	wiki
173	501	Detroit City is dead.	['Detroit City is a horse.', 'Some horses are racehorses.', 'If a horse falls during a race, then it dies.', 'Detroit City fell during a race.', 'A horse is a racehorse if it is in a race.']	['Horse(detroitcity)', '∃x (Horse(x) ∧ Racehorse(x))', '∀x (Horse(x) ∧ Racing(x) ∧ Falls(x) → Dead(x))', 'Racing(detroitcity) ∧ Falls(detroitcity)', '∀x (Horse(x) ∧ Racing(x) → Racehorse(x))']	True	wiki
173	502	Detroit City is a racehorse.	['Detroit City is a horse.', 'Some horses are racehorses.', 'If a horse falls during a race, then it dies.', 'Detroit City fell during a race.', 'A horse is a racehorse if it is in a race.']	['Horse(detroitcity)', '∃x (Horse(x) ∧ Racehorse(x))', '∀x (Horse(x) ∧ Racing(x) ∧ Falls(x) → Dead(x))', 'Racing(detroitcity) ∧ Falls(detroitcity)', '∀x (Horse(x) ∧ Racing(x) → Racehorse(x))']	True	wiki
112	340	Frederick Monhoff is good at music.	['Frederick Monhoff was an architect, artist, and illustrator.', 'Frederick Monhoff was an American.', 'An artist is good at painting or music.', 'All Americans speak English.']	['Architect(monhoff) ∧ Artist(monhoff) ∧ Illustrator(monhoff)', 'American(monhoff)', '∀x (Artist(x) → GoodAt(x, painting) ∨ GoodAt(x, music))', '∀x (American(x) → Speak(x, english))']	Unknown	wiki
112	341	There is no illustrator who speaks English.	['Frederick Monhoff was an architect, artist, and illustrator.', 'Frederick Monhoff was an American.', 'An artist is good at painting or music.', 'All Americans speak English.']	['Architect(monhoff) ∧ Artist(monhoff) ∧ Illustrator(monhoff)', 'American(monhoff)', '∀x (Artist(x) → GoodAt(x, painting) ∨ GoodAt(x, music))', '∀x (American(x) → Speak(x, english))']	False	wiki
18	51	Miroslav Fiedler is honored by the second smallest eigenvalue of the graph Laplacian.	['Miroslav Fiedler was a Czech mathematician.', 'Miroslav Fiedler is known for his contributions to linear algebra and graph theory.', 'Miroslav Fiedler is honored by the Fiedler eigenvalue.', 'Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian.']	['Czech(miroslavfiedler) ∧ Mathematician(miroslavfiedler)', 'KnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)', 'HonoredBy(miroslavfiedler, fiedlerEigenvalue)', 'TheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)']	True	wiki
18	52	Miroslav Fiedler was a French mathematician.	['Miroslav Fiedler was a Czech mathematician.', 'Miroslav Fiedler is known for his contributions to linear algebra and graph theory.', 'Miroslav Fiedler is honored by the Fiedler eigenvalue.', 'Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian.']	['Czech(miroslavfiedler) ∧ Mathematician(miroslavfiedler)', 'KnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)', 'HonoredBy(miroslavfiedler, fiedlerEigenvalue)', 'TheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)']	Unknown	wiki
18	53	A Czech mathematician is known for his contributions to linear algebra and graph theory.	['Miroslav Fiedler was a Czech mathematician.', 'Miroslav Fiedler is known for his contributions to linear algebra and graph theory.', 'Miroslav Fiedler is honored by the Fiedler eigenvalue.', 'Fiedler eigenvalue is the second smallest eigenvalue of the graph Laplacian.']	['Czech(miroslavfiedler) ∧ Mathematician(miroslavfiedler)', 'KnownFor(miroslavfiedler, contributionsToLinearAlgebraAndGraphTheory)', 'HonoredBy(miroslavfiedler, fiedlerEigenvalue)', 'TheSecondSmallestEigenvalueOf(fiedlerEigenvalue, theGraphLaplacian)']	True	wiki
153	446	You can play games on a laptop.	['A laptop is a computer.', 'You can play games on a computer.', 'A phone is not a computer.']	['∀x (Laptop(x) → Computer(x))', '∀x (Computer(x) → CanPlayGames(x))', '∀x (Phone(x) → ¬Computer(x))', '']	True	wiki
153	447	You can not play games on a phone.	['A laptop is a computer.', 'You can play games on a computer.', 'A phone is not a computer.']	['∀x (Laptop(x) → Computer(x))', '∀x (Computer(x) → CanPlayGames(x))', '∀x (Phone(x) → ¬Computer(x))', '']	Unknown	wiki
11	29	Walter Folger Brown graduated with a Bachelors of Arts.	['Walter Folger Brown was an American politician and lawyer, and served as the postmaster general.', 'Walter Folger Brown graduated from Harvard University with a Bachelors of Arts.', "While they were both in Toledo, Walter Folger Brown's father practiced law with Walter Folger Brown.", 'Katherin Hafer married Walter Folger Brown.']	['AmericanPolitician(walterbrown) ∧ Lawyer(walterbrown) ∧ ServedAs(walterbrown, postamastergeneral)', 'Graduated(walterbrown, harvard) ∧ GraduatedWith(walterbrown, bachelorsofart)', 'In(walterbrown, toledo) ∧ In(walterbrownfather, toledo) ∧ PracticedLawTogether(walterbrownfather, walterbrown)', 'Married(ketherinhafer, walterbrown)']	True	wiki
11	30	Walter Folger Brown's father was in Toledo.	['Walter Folger Brown was an American politician and lawyer, and served as the postmaster general.', 'Walter Folger Brown graduated from Harvard University with a Bachelors of Arts.', "While they were both in Toledo, Walter Folger Brown's father practiced law with Walter Folger Brown.", 'Katherin Hafer married Walter Folger Brown.']	['AmericanPolitician(walterbrown) ∧ Lawyer(walterbrown) ∧ ServedAs(walterbrown, postamastergeneral)', 'Graduated(walterbrown, harvard) ∧ GraduatedWith(walterbrown, bachelorsofart)', 'In(walterbrown, toledo) ∧ In(walterbrownfather, toledo) ∧ PracticedLawTogether(walterbrownfather, walterbrown)', 'Married(ketherinhafer, walterbrown)']	True	wiki
11	31	Walter Folger Brown was not in Toledo.	['Walter Folger Brown was an American politician and lawyer, and served as the postmaster general.', 'Walter Folger Brown graduated from Harvard University with a Bachelors of Arts.', "While they were both in Toledo, Walter Folger Brown's father practiced law with Walter Folger Brown.", 'Katherin Hafer married Walter Folger Brown.']	['AmericanPolitician(walterbrown) ∧ Lawyer(walterbrown) ∧ ServedAs(walterbrown, postamastergeneral)', 'Graduated(walterbrown, harvard) ∧ GraduatedWith(walterbrown, bachelorsofart)', 'In(walterbrown, toledo) ∧ In(walterbrownfather, toledo) ∧ PracticedLawTogether(walterbrownfather, walterbrown)', 'Married(ketherinhafer, walterbrown)']	False	wiki
410	1152	The MacBook is favored by young people.	['All products shipped from China are made in China. ', 'All products sold in JD are shipped from China. ', 'All products commonly used in China are sold in JD.', 'All products favored by young people are commonly used in China. ', 'MacBook is not made in China and is not commonly used in China.']	['∀x (ShipChina(x) → MadeInChina(x))', '∀x (SoldJD(x) → ShipChina(x))', '∀x (CommonlyUsedChina(x) → SoldJD(x))', '∀x (FavoredByYoungPeople(x) → CommonlyUsedChina(x))', '¬(MadeInChina(macbook) ∧ CommonlyUsedChina(macbook))']	False	hyb
410	1153	The MacBook is made in China.	['All products shipped from China are made in China. ', 'All products sold in JD are shipped from China. ', 'All products commonly used in China are sold in JD.', 'All products favored by young people are commonly used in China. ', 'MacBook is not made in China and is not commonly used in China.']	['∀x (ShipChina(x) → MadeInChina(x))', '∀x (SoldJD(x) → ShipChina(x))', '∀x (CommonlyUsedChina(x) → SoldJD(x))', '∀x (FavoredByYoungPeople(x) → CommonlyUsedChina(x))', '¬(MadeInChina(macbook) ∧ CommonlyUsedChina(macbook))']	Unknown	hyb
410	1154	The MacBook is favored by young people and commonly used in China.	['All products shipped from China are made in China. ', 'All products sold in JD are shipped from China. ', 'All products commonly used in China are sold in JD.', 'All products favored by young people are commonly used in China. ', 'MacBook is not made in China and is not commonly used in China.']	['∀x (ShipChina(x) → MadeInChina(x))', '∀x (SoldJD(x) → ShipChina(x))', '∀x (CommonlyUsedChina(x) → SoldJD(x))', '∀x (FavoredByYoungPeople(x) → CommonlyUsedChina(x))', '¬(MadeInChina(macbook) ∧ CommonlyUsedChina(macbook))']	False	hyb
410	1155	The MacBook is either favored by young people or commonly used in China.	['All products shipped from China are made in China. ', 'All products sold in JD are shipped from China. ', 'All products commonly used in China are sold in JD.', 'All products favored by young people are commonly used in China. ', 'MacBook is not made in China and is not commonly used in China.']	['∀x (ShipChina(x) → MadeInChina(x))', '∀x (SoldJD(x) → ShipChina(x))', '∀x (CommonlyUsedChina(x) → SoldJD(x))', '∀x (FavoredByYoungPeople(x) → CommonlyUsedChina(x))', '¬(MadeInChina(macbook) ∧ CommonlyUsedChina(macbook))']	False	hyb
410	1156	If the MacBook is favored by young people and commonly used in China, then it is neither favored by young people nor made in China.	['All products shipped from China are made in China. ', 'All products sold in JD are shipped from China. ', 'All products commonly used in China are sold in JD.', 'All products favored by young people are commonly used in China. ', 'MacBook is not made in China and is not commonly used in China.']	['∀x (ShipChina(x) → MadeInChina(x))', '∀x (SoldJD(x) → ShipChina(x))', '∀x (CommonlyUsedChina(x) → SoldJD(x))', '∀x (FavoredByYoungPeople(x) → CommonlyUsedChina(x))', '¬(MadeInChina(macbook) ∧ CommonlyUsedChina(macbook))']	True	hyb
205	589	Oxford Circus is in London.	['Oxford Circus is a road junction connecting Oxford Street and Regent Street.', 'Oxford Street is in London.', 'John Nash designed the construction on Regent Street.', 'John Nash designed Oxford Circus.', 'John Nash is an architect in British.', 'Oxford Circus is the entrance to Oxford Circus tube station which is a part of the Central line in 1900.']	['OxfordStreet(oxfordCircus) ∧ RegentStreet(oxfordCircus)', '∀x (OxfordStreet(x) → London(x))', '∃x (RegentStreet(x) ∧ Design(johnNash, x))', 'Design(johnNash, oxfordCircus)', 'British(johnNash) ∧ Architect(johnNash)', 'CentralLine(oxfordCircus)']	True	wiki
205	590	Oxford Circus is designed by a British architect.	['Oxford Circus is a road junction connecting Oxford Street and Regent Street.', 'Oxford Street is in London.', 'John Nash designed the construction on Regent Street.', 'John Nash designed Oxford Circus.', 'John Nash is an architect in British.', 'Oxford Circus is the entrance to Oxford Circus tube station which is a part of the Central line in 1900.']	['OxfordStreet(oxfordCircus) ∧ RegentStreet(oxfordCircus)', '∀x (OxfordStreet(x) → London(x))', '∃x (RegentStreet(x) ∧ Design(johnNash, x))', 'Design(johnNash, oxfordCircus)', 'British(johnNash) ∧ Architect(johnNash)', 'CentralLine(oxfordCircus)']	True	wiki
205	591	John Nash designed the Central line in 1900.	['Oxford Circus is a road junction connecting Oxford Street and Regent Street.', 'Oxford Street is in London.', 'John Nash designed the construction on Regent Street.', 'John Nash designed Oxford Circus.', 'John Nash is an architect in British.', 'Oxford Circus is the entrance to Oxford Circus tube station which is a part of the Central line in 1900.']	['OxfordStreet(oxfordCircus) ∧ RegentStreet(oxfordCircus)', '∀x (OxfordStreet(x) → London(x))', '∃x (RegentStreet(x) ∧ Design(johnNash, x))', 'Design(johnNash, oxfordCircus)', 'British(johnNash) ∧ Architect(johnNash)', 'CentralLine(oxfordCircus)']	Unknown	wiki
205	592	Regent Street is not in London.	['Oxford Circus is a road junction connecting Oxford Street and Regent Street.', 'Oxford Street is in London.', 'John Nash designed the construction on Regent Street.', 'John Nash designed Oxford Circus.', 'John Nash is an architect in British.', 'Oxford Circus is the entrance to Oxford Circus tube station which is a part of the Central line in 1900.']	['OxfordStreet(oxfordCircus) ∧ RegentStreet(oxfordCircus)', '∀x (OxfordStreet(x) → London(x))', '∃x (RegentStreet(x) ∧ Design(johnNash, x))', 'Design(johnNash, oxfordCircus)', 'British(johnNash) ∧ Architect(johnNash)', 'CentralLine(oxfordCircus)']	False	wiki
473	1374	Jojo is a ghost.	['An animal is either a cat or a dog.', 'All dogs bark.', 'Ghosts do not exist.', 'If something barks, then it is not alive.', 'A thing is either alive or dead.', 'Jojo is not dead.']	['∀x (Cat(x) ⊕ Dog(x))', '∀x (Dog(x) → Bark(x))', '∀x (¬Ghost(x))', '∀x (Bark(x) → ¬Alive(x))', '∀x (Alive(x) ⊕ Dead(x))', '¬Dead(jojo)']	False	hyb
473	1375	Jojo is a cat or a ghost.	['An animal is either a cat or a dog.', 'All dogs bark.', 'Ghosts do not exist.', 'If something barks, then it is not alive.', 'A thing is either alive or dead.', 'Jojo is not dead.']	['∀x (Cat(x) ⊕ Dog(x))', '∀x (Dog(x) → Bark(x))', '∀x (¬Ghost(x))', '∀x (Bark(x) → ¬Alive(x))', '∀x (Alive(x) ⊕ Dead(x))', '¬Dead(jojo)']	True	hyb
473	1376	If Jojo is a cat or a ghost, then Jojo either barks or is a dog.	['An animal is either a cat or a dog.', 'All dogs bark.', 'Ghosts do not exist.', 'If something barks, then it is not alive.', 'A thing is either alive or dead.', 'Jojo is not dead.']	['∀x (Cat(x) ⊕ Dog(x))', '∀x (Dog(x) → Bark(x))', '∀x (¬Ghost(x))', '∀x (Bark(x) → ¬Alive(x))', '∀x (Alive(x) ⊕ Dead(x))', '¬Dead(jojo)']	False	hyb
440	1269	Fido is a husky.	['All animals that are tigers are cats.', 'No cats are dogs.', 'All Bengal tigers are tigers.', 'Everything that is a husky is a dog.', 'Fido is either a Bengal tiger or a cat.']	['∀x (Tiger(x) → Cat(x))', '∀x (Cat(x) → ¬Dog(x))', '∀x (BengalTiger(x) → Tiger(x))', '∀x (Husky(x) → Dog(x))', 'BengalTiger(fido) ∨ Cat(fido)']	False	hyb
440	1270	Fido is not a husky.	['All animals that are tigers are cats.', 'No cats are dogs.', 'All Bengal tigers are tigers.', 'Everything that is a husky is a dog.', 'Fido is either a Bengal tiger or a cat.']	['∀x (Tiger(x) → Cat(x))', '∀x (Cat(x) → ¬Dog(x))', '∀x (BengalTiger(x) → Tiger(x))', '∀x (Husky(x) → Dog(x))', 'BengalTiger(fido) ∨ Cat(fido)']	True	hyb
440	1271	Fido is a Bengal tiger.	['All animals that are tigers are cats.', 'No cats are dogs.', 'All Bengal tigers are tigers.', 'Everything that is a husky is a dog.', 'Fido is either a Bengal tiger or a cat.']	['∀x (Tiger(x) → Cat(x))', '∀x (Cat(x) → ¬Dog(x))', '∀x (BengalTiger(x) → Tiger(x))', '∀x (Husky(x) → Dog(x))', 'BengalTiger(fido) ∨ Cat(fido)']	Unknown	hyb
440	1272	Fido is neither a dog nor a husky.	['All animals that are tigers are cats.', 'No cats are dogs.', 'All Bengal tigers are tigers.', 'Everything that is a husky is a dog.', 'Fido is either a Bengal tiger or a cat.']	['∀x (Tiger(x) → Cat(x))', '∀x (Cat(x) → ¬Dog(x))', '∀x (BengalTiger(x) → Tiger(x))', '∀x (Husky(x) → Dog(x))', 'BengalTiger(fido) ∨ Cat(fido)']	True	hyb
66	196	The 2028 Summer Olympics will take place in the US.	['If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.', 'If a city is in a state which is in US, the city is a US city.', 'If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.', 'The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).', 'LA is a city in California(CA).', 'Atlanta is a US city.', 'Atlanta is in Georgia(CA).', 'CA is a state in the United States.', 'Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.', 'Atlanta in the United States hold the 1996 Summer Olympics.']	['∀x ∀y (SummerOlympicsCity(x, y) ∧ CityInCountry(y, us) → SummerOlympicsCountry(x, us))', '∀x ∀y (CityInState(x, y) ∧ StateInCountry(y, us) → CityInCountry(x, us))', '∀x ∀y ∀z (CityInState(x, y) ∧ SummerOlympicsCity(z, x) → SummerOlympicsState(z, y))', 'SummerOlympicsCity(y2028, la)', 'CityInState(la, ca)', 'CityInCountry(atlanta, us)', 'StateInCountry(ca, us)', 'CityInState(atlanta, ga)', '¬InSummerOlympics(y2028, boxing) ∧ ¬InSummerOlympics(y2028, modern_pentathlon) ∧ ¬InSummerOlympics(y2028, weightlifting)', 'SummerOlympicsCity(y1996, atlanta)']	True	wiki
66	197	The 1996 Summer Olympics is not in Georgia.	['If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.', 'If a city is in a state which is in US, the city is a US city.', 'If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.', 'The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).', 'LA is a city in California(CA).', 'Atlanta is a US city.', 'Atlanta is in Georgia(CA).', 'CA is a state in the United States.', 'Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.', 'Atlanta in the United States hold the 1996 Summer Olympics.']	['∀x ∀y (SummerOlympicsCity(x, y) ∧ CityInCountry(y, us) → SummerOlympicsCountry(x, us))', '∀x ∀y (CityInState(x, y) ∧ StateInCountry(y, us) → CityInCountry(x, us))', '∀x ∀y ∀z (CityInState(x, y) ∧ SummerOlympicsCity(z, x) → SummerOlympicsState(z, y))', 'SummerOlympicsCity(y2028, la)', 'CityInState(la, ca)', 'CityInCountry(atlanta, us)', 'StateInCountry(ca, us)', 'CityInState(atlanta, ga)', '¬InSummerOlympics(y2028, boxing) ∧ ¬InSummerOlympics(y2028, modern_pentathlon) ∧ ¬InSummerOlympics(y2028, weightlifting)', 'SummerOlympicsCity(y1996, atlanta)']	False	wiki
66	198	Skateboarding will appear at The 2028 Summer Olympics.	['If a city hold a Summer Olympics, and the city is a US city, then the Summer Olympics will be in the US.', 'If a city is in a state which is in US, the city is a US city.', 'If a city in a state, and a Summer Olympics is in this city, then the Summer Olympics is in this state.', 'The 2028 Summer Olympics is scheduled to take place in Los Angeles(LA).', 'LA is a city in California(CA).', 'Atlanta is a US city.', 'Atlanta is in Georgia(CA).', 'CA is a state in the United States.', 'Boxing, modern pentathlon, and weightlifting will be removed from The 2028 Summer Olympics.', 'Atlanta in the United States hold the 1996 Summer Olympics.']	['∀x ∀y (SummerOlympicsCity(x, y) ∧ CityInCountry(y, us) → SummerOlympicsCountry(x, us))', '∀x ∀y (CityInState(x, y) ∧ StateInCountry(y, us) → CityInCountry(x, us))', '∀x ∀y ∀z (CityInState(x, y) ∧ SummerOlympicsCity(z, x) → SummerOlympicsState(z, y))', 'SummerOlympicsCity(y2028, la)', 'CityInState(la, ca)', 'CityInCountry(atlanta, us)', 'StateInCountry(ca, us)', 'CityInState(atlanta, ga)', '¬InSummerOlympics(y2028, boxing) ∧ ¬InSummerOlympics(y2028, modern_pentathlon) ∧ ¬InSummerOlympics(y2028, weightlifting)', 'SummerOlympicsCity(y1996, atlanta)']	Unknown	wiki
9	23	Cats like playing with taiga vole.	['The taiga vole is a large vole found in northwestern North America. ', 'Cats like playing with all voles.', 'The taiga vole lives in the boreal taiga zone.', 'The boreal taiga zone in North America is a cold place to live in.', 'Taiga vole is typically much larger than most other North American voles, especially those from the genus Microtus.']	['Vole(taigaVole) ∧ Find(taigaVole, northAmerica)', '∀x (Vole(x) → CatLikePlayingWith(x))', 'Live(taigaVole, borealTaigaZone)', '∀x (Find(x, northAmerica) ∧ Live(x, borealTaigaZone) → LiveInColdPlace(x))', 'Larger(taigaVole, microtusVole)']	True	wiki
9	24	Taiga vole's living place is not cold.	['The taiga vole is a large vole found in northwestern North America. ', 'Cats like playing with all voles.', 'The taiga vole lives in the boreal taiga zone.', 'The boreal taiga zone in North America is a cold place to live in.', 'Taiga vole is typically much larger than most other North American voles, especially those from the genus Microtus.']	['Vole(taigaVole) ∧ Find(taigaVole, northAmerica)', '∀x (Vole(x) → CatLikePlayingWith(x))', 'Live(taigaVole, borealTaigaZone)', '∀x (Find(x, northAmerica) ∧ Live(x, borealTaigaZone) → LiveInColdPlace(x))', 'Larger(taigaVole, microtusVole)']	False	wiki
389	1046	Adenocarcinoma is a breast cancer.	['Either in women or in men. ', 'No men have breast cancer.', 'Either breast cancer or non-breast cancer. ', 'No type of cancer is without a tumor.', 'All non-breast cancers are a type of cancer.', 'If adenocarcinoma is a type of cancer or without a tumor, then adenocarcinoma is in women or without a tumor.']	['∀x (Women(x) ∨ Men(x)) ', ' ∀x (Men(x) → ¬BreastCancer(x))', ' ∀x (BreastCancer (x) ∨ Non-BreastCancer(x)) ', ' ∀x (ATypeOfCancer(x) → ¬WithoutTumor (x)) ', ' ∀x (Non-BreastCancer(x) → ATypeOfCancer(x)) ', ' ATypeOfCancer(adenocarcinoma) ∨ WithoutTumor(adenocarcinoma) → women(adenocarcinoma) ∨ WithoutTumor(adenocarcinoma)']	Unknown	hyb
389	1047	Adenocarcinoma is in women.	['Either in women or in men. ', 'No men have breast cancer.', 'Either breast cancer or non-breast cancer. ', 'No type of cancer is without a tumor.', 'All non-breast cancers are a type of cancer.', 'If adenocarcinoma is a type of cancer or without a tumor, then adenocarcinoma is in women or without a tumor.']	['∀x (Women(x) ∨ Men(x)) ', ' ∀x (Men(x) → ¬BreastCancer(x))', ' ∀x (BreastCancer (x) ∨ Non-BreastCancer(x)) ', ' ∀x (ATypeOfCancer(x) → ¬WithoutTumor (x)) ', ' ∀x (Non-BreastCancer(x) → ATypeOfCancer(x)) ', ' ATypeOfCancer(adenocarcinoma) ∨ WithoutTumor(adenocarcinoma) → women(adenocarcinoma) ∨ WithoutTumor(adenocarcinoma)']	True	hyb
389	1048	If adenocarcinoma is in women or without a tumor, then adenocarcinoma is without a tumor and a non-breast cancer.	['Either in women or in men. ', 'No men have breast cancer.', 'Either breast cancer or non-breast cancer. ', 'No type of cancer is without a tumor.', 'All non-breast cancers are a type of cancer.', 'If adenocarcinoma is a type of cancer or without a tumor, then adenocarcinoma is in women or without a tumor.']	['∀x (Women(x) ∨ Men(x)) ', ' ∀x (Men(x) → ¬BreastCancer(x))', ' ∀x (BreastCancer (x) ∨ Non-BreastCancer(x)) ', ' ∀x (ATypeOfCancer(x) → ¬WithoutTumor (x)) ', ' ∀x (Non-BreastCancer(x) → ATypeOfCancer(x)) ', ' ATypeOfCancer(adenocarcinoma) ∨ WithoutTumor(adenocarcinoma) → women(adenocarcinoma) ∨ WithoutTumor(adenocarcinoma)']	False	hyb
59	175	LG34 machine is produced by AOC.	['Some monitors equipped in the lab are produced by the company named AOC. ', 'All monitors equipped in the lab are cheaper than their original prices. ', 'If the monitor is cheaper than its original prices, then its resolution is 1080p. ', 'If a monitor is with a resolution of 1080p, then it does not support the type-c port. ', 'LG34 is equipped in the lab.  ']	['∃x (Lab(x) ∧ AOC(x))', '∀x (Lab(x) → Cheaper(x))', '∀x (Cheaper(x) → A1080p(x))', '∀x (A1080p(x) → ¬TypeC(x))', 'Lab(lg-34)']	Unknown	wiki
59	176	LG34 machine does not support the type-c port.	['Some monitors equipped in the lab are produced by the company named AOC. ', 'All monitors equipped in the lab are cheaper than their original prices. ', 'If the monitor is cheaper than its original prices, then its resolution is 1080p. ', 'If a monitor is with a resolution of 1080p, then it does not support the type-c port. ', 'LG34 is equipped in the lab.  ']	['∃x (Lab(x) ∧ AOC(x))', '∀x (Lab(x) → Cheaper(x))', '∀x (Cheaper(x) → A1080p(x))', '∀x (A1080p(x) → ¬TypeC(x))', 'Lab(lg-34)']	True	wiki
59	177	LG34 is not with a resolution of 1080p.	['Some monitors equipped in the lab are produced by the company named AOC. ', 'All monitors equipped in the lab are cheaper than their original prices. ', 'If the monitor is cheaper than its original prices, then its resolution is 1080p. ', 'If a monitor is with a resolution of 1080p, then it does not support the type-c port. ', 'LG34 is equipped in the lab.  ']	['∃x (Lab(x) ∧ AOC(x))', '∀x (Lab(x) → Cheaper(x))', '∀x (Cheaper(x) → A1080p(x))', '∀x (A1080p(x) → ¬TypeC(x))', 'Lab(lg-34)']	False	wiki
412	1160	Avocados are a kind of fruit sold in New York.	['All fruits sold in Boston are shipped from Columbia. ', 'Some fruits sold in New Haven are shipped from Mexico.', 'No fruits shipped from Columbia are fruits sold in New York. ', 'Avocadoe are a kind of fruit sold in New York or New York. ', 'Avocadoe are either shipped from Columbia and sold in New Haven, or neither shipped from Columbia nor sold in New Haven. ']	['∀x (SoldBoston(x) → ShippedFromColumbia(x))', '∃x (SoldNewHaven(x) ∧ ShippedFromMexico(x))', '∀x (ShippedFromColumbia(x) → ¬SoldNewYork(x))', 'SoldNewYork(avocado) ∨ SoldBoston(avocado)', '¬(ShippedFromColumbia(avocado) ⊕ SoldNewHaven(avocado))']	Unknown	hyb
412	1161	Avocados are either sold in New York or sold in New Haven.	['All fruits sold in Boston are shipped from Columbia. ', 'Some fruits sold in New Haven are shipped from Mexico.', 'No fruits shipped from Columbia are fruits sold in New York. ', 'Avocadoe are a kind of fruit sold in New York or New York. ', 'Avocadoe are either shipped from Columbia and sold in New Haven, or neither shipped from Columbia nor sold in New Haven. ']	['∀x (SoldBoston(x) → ShippedFromColumbia(x))', '∃x (SoldNewHaven(x) ∧ ShippedFromMexico(x))', '∀x (ShippedFromColumbia(x) → ¬SoldNewYork(x))', 'SoldNewYork(avocado) ∨ SoldBoston(avocado)', '¬(ShippedFromColumbia(avocado) ⊕ SoldNewHaven(avocado))']	True	hyb
412	1162	Avocados are either sold in New Haven or sold in Boston	['All fruits sold in Boston are shipped from Columbia. ', 'Some fruits sold in New Haven are shipped from Mexico.', 'No fruits shipped from Columbia are fruits sold in New York. ', 'Avocadoe are a kind of fruit sold in New York or New York. ', 'Avocadoe are either shipped from Columbia and sold in New Haven, or neither shipped from Columbia nor sold in New Haven. ']	['∀x (SoldBoston(x) → ShippedFromColumbia(x))', '∃x (SoldNewHaven(x) ∧ ShippedFromMexico(x))', '∀x (ShippedFromColumbia(x) → ¬SoldNewYork(x))', 'SoldNewYork(avocado) ∨ SoldBoston(avocado)', '¬(ShippedFromColumbia(avocado) ⊕ SoldNewHaven(avocado))']	False	hyb
412	1163	If avocados are not sold in New York and not shipped from Columbia, then they are neither sold in New York nor New Haven.	['All fruits sold in Boston are shipped from Columbia. ', 'Some fruits sold in New Haven are shipped from Mexico.', 'No fruits shipped from Columbia are fruits sold in New York. ', 'Avocadoe are a kind of fruit sold in New York or New York. ', 'Avocadoe are either shipped from Columbia and sold in New Haven, or neither shipped from Columbia nor sold in New Haven. ']	['∀x (SoldBoston(x) → ShippedFromColumbia(x))', '∃x (SoldNewHaven(x) ∧ ShippedFromMexico(x))', '∀x (ShippedFromColumbia(x) → ¬SoldNewYork(x))', 'SoldNewYork(avocado) ∨ SoldBoston(avocado)', '¬(ShippedFromColumbia(avocado) ⊕ SoldNewHaven(avocado))']	False	hyb
418	1183	A-2017 is produced by AOC.	['Some monitors equipped in the library are produced by AOC. ', 'All monitors equipped in the library are cheaper than 800 dollars. ', 'All monitors cheaper than 800 dollars are with a resolution of 1080p. ', 'If a monitor has a resolution of 1080p, then it does not support the type-c port. ', 'A-2017 supports the type-c port. ']	['∃x (Library(x) ∧ AOC(x))', '∀x (Library(x) → Cheap(x))', '∀x (Cheap(x) → A1080p(x))', '∀x (A1080p(x) → ¬TypeC(x))', 'TypeC(a-2017)']	Unknown	hyb
418	1184	A-2017 is produced by AOC and equipped in the library.	['Some monitors equipped in the library are produced by AOC. ', 'All monitors equipped in the library are cheaper than 800 dollars. ', 'All monitors cheaper than 800 dollars are with a resolution of 1080p. ', 'If a monitor has a resolution of 1080p, then it does not support the type-c port. ', 'A-2017 supports the type-c port. ']	['∃x (Library(x) ∧ AOC(x))', '∀x (Library(x) → Cheap(x))', '∀x (Cheap(x) → A1080p(x))', '∀x (A1080p(x) → ¬TypeC(x))', 'TypeC(a-2017)']	False	hyb
418	1185	If A-2017 is not with a resolution of 1080p or produced by AOC, then it is not equipped in the library.	['Some monitors equipped in the library are produced by AOC. ', 'All monitors equipped in the library are cheaper than 800 dollars. ', 'All monitors cheaper than 800 dollars are with a resolution of 1080p. ', 'If a monitor has a resolution of 1080p, then it does not support the type-c port. ', 'A-2017 supports the type-c port. ']	['∃x (Library(x) ∧ AOC(x))', '∀x (Library(x) → Cheap(x))', '∀x (Cheap(x) → A1080p(x))', '∀x (A1080p(x) → ¬TypeC(x))', 'TypeC(a-2017)']	True	hyb
4	10	Some soccer team holds the Lithuanian Supercup.	['Sūduva Marijampolė holds the Lithuanian Supercup.', 'Sūduva Marijampolė is a soccer team.']	['Hold(suduva, thelithuaniansupercup)', 'SoccerTeam(suduva)']	True	wiki
94	286	There is a village in England.	['Ainderby Quernhow is a village and civil parish in the Hambleton District.', 'Hambleton District is in North Yorkshire.', 'North Yorkshire is in England.']	['∀x (AinderbyQuernhow(x) → Village(x) ∧ CivilParish(x) ∧ Hambleton(x))', '∀x (Hambleton(x) → NorthYorkshire(x))', '∀x (NorthYorkshire(x) → England(x))']	True	wiki
94	287	There is no civil parish in England.	['Ainderby Quernhow is a village and civil parish in the Hambleton District.', 'Hambleton District is in North Yorkshire.', 'North Yorkshire is in England.']	['∀x (AinderbyQuernhow(x) → Village(x) ∧ CivilParish(x) ∧ Hambleton(x))', '∀x (Hambleton(x) → NorthYorkshire(x))', '∀x (NorthYorkshire(x) → England(x))']	False	wiki
48	139	Douglas Adams is a writer.	['Douglas Adams is an author who created the book collection called The Salmon of Doubt. ', 'The Salmon of Doubt is about life experiences and technology.', 'All authors are writers.', 'Writers create innovative ideas.', 'Some books that contain innovative ideas are about technology.']	['Author(douglasAdams) ∧ Book(theSalmonOfDoubt)', 'AboutLifeExperience(theSalmonOfDoubt) ∧ AboutTechnology(theSalmonOfDoubt)', '∀x (Author(x) → Writer(x))', '∀x (Writer(x) → CreateInnovativeIdea(x))', '∃x (ContainInnovativeIdea(x) ∧ AboutTechnology(x))']	True	wiki
48	140	Douglas Adams created innovative ideas.	['Douglas Adams is an author who created the book collection called The Salmon of Doubt. ', 'The Salmon of Doubt is about life experiences and technology.', 'All authors are writers.', 'Writers create innovative ideas.', 'Some books that contain innovative ideas are about technology.']	['Author(douglasAdams) ∧ Book(theSalmonOfDoubt)', 'AboutLifeExperience(theSalmonOfDoubt) ∧ AboutTechnology(theSalmonOfDoubt)', '∀x (Author(x) → Writer(x))', '∀x (Writer(x) → CreateInnovativeIdea(x))', '∃x (ContainInnovativeIdea(x) ∧ AboutTechnology(x))']	True	wiki
48	141	The Salmon of Doubt has no innovative Ideas.	['Douglas Adams is an author who created the book collection called The Salmon of Doubt. ', 'The Salmon of Doubt is about life experiences and technology.', 'All authors are writers.', 'Writers create innovative ideas.', 'Some books that contain innovative ideas are about technology.']	['Author(douglasAdams) ∧ Book(theSalmonOfDoubt)', 'AboutLifeExperience(theSalmonOfDoubt) ∧ AboutTechnology(theSalmonOfDoubt)', '∀x (Author(x) → Writer(x))', '∀x (Writer(x) → CreateInnovativeIdea(x))', '∃x (ContainInnovativeIdea(x) ∧ AboutTechnology(x))']	Unknown	wiki
323	827	Reformation is an eco-friendly brand.	['No disposable products can help slow down global warming. ', 'All eco-friendly brands can help slow down global warming. ', 'All sustainable fashion brands are eco-friendly brands.', 'All fast fashion products are disposable products.', 'If Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand.']	['∀x (DisposableProducts(x) → ¬HelpSlowDownGlobalWarming(x))', ' ∀x (Eco-friendlyBrand(x) → HelpSlowDownGlobalWarming(x))', ' ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x))', ' ∀x (FastFashionProducts(x) → DisposableProducts(x)) ', ' ¬HelpSlowDownGlobalWarming(reformation) → Eco-friendlyBrand(reformation) ∨ SustainableFashionBrand(reformation)']	Unknown	hyb
323	828	Reformation produces fast fashion products.	['No disposable products can help slow down global warming. ', 'All eco-friendly brands can help slow down global warming. ', 'All sustainable fashion brands are eco-friendly brands.', 'All fast fashion products are disposable products.', 'If Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand.']	['∀x (DisposableProducts(x) → ¬HelpSlowDownGlobalWarming(x))', ' ∀x (Eco-friendlyBrand(x) → HelpSlowDownGlobalWarming(x))', ' ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x))', ' ∀x (FastFashionProducts(x) → DisposableProducts(x)) ', ' ¬HelpSlowDownGlobalWarming(reformation) → Eco-friendlyBrand(reformation) ∨ SustainableFashionBrand(reformation)']	False	hyb
323	829	Reformation does not produce fast fashion products.	['No disposable products can help slow down global warming. ', 'All eco-friendly brands can help slow down global warming. ', 'All sustainable fashion brands are eco-friendly brands.', 'All fast fashion products are disposable products.', 'If Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand.']	['∀x (DisposableProducts(x) → ¬HelpSlowDownGlobalWarming(x))', ' ∀x (Eco-friendlyBrand(x) → HelpSlowDownGlobalWarming(x))', ' ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x))', ' ∀x (FastFashionProducts(x) → DisposableProducts(x)) ', ' ¬HelpSlowDownGlobalWarming(reformation) → Eco-friendlyBrand(reformation) ∨ SustainableFashionBrand(reformation)']	True	hyb
323	830	Reformation does not produce fast fashion products or does not produce disposable products.	['No disposable products can help slow down global warming. ', 'All eco-friendly brands can help slow down global warming. ', 'All sustainable fashion brands are eco-friendly brands.', 'All fast fashion products are disposable products.', 'If Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand.']	['∀x (DisposableProducts(x) → ¬HelpSlowDownGlobalWarming(x))', ' ∀x (Eco-friendlyBrand(x) → HelpSlowDownGlobalWarming(x))', ' ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x))', ' ∀x (FastFashionProducts(x) → DisposableProducts(x)) ', ' ¬HelpSlowDownGlobalWarming(reformation) → Eco-friendlyBrand(reformation) ∨ SustainableFashionBrand(reformation)']	True	hyb
323	831	If Reformation produces disposable products, then Reformation produces fast fashion products.	['No disposable products can help slow down global warming. ', 'All eco-friendly brands can help slow down global warming. ', 'All sustainable fashion brands are eco-friendly brands.', 'All fast fashion products are disposable products.', 'If Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand.']	['∀x (DisposableProducts(x) → ¬HelpSlowDownGlobalWarming(x))', ' ∀x (Eco-friendlyBrand(x) → HelpSlowDownGlobalWarming(x))', ' ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x))', ' ∀x (FastFashionProducts(x) → DisposableProducts(x)) ', ' ¬HelpSlowDownGlobalWarming(reformation) → Eco-friendlyBrand(reformation) ∨ SustainableFashionBrand(reformation)']	True	hyb
323	832	If Reformation produces fast fashion products or helps slow down global warming, then Reformation produces fast fashion products.	['No disposable products can help slow down global warming. ', 'All eco-friendly brands can help slow down global warming. ', 'All sustainable fashion brands are eco-friendly brands.', 'All fast fashion products are disposable products.', 'If Reformation is not helping slow down global warming, then Reformation is an eco-friendly brand or a sustainable fashion brand.']	['∀x (DisposableProducts(x) → ¬HelpSlowDownGlobalWarming(x))', ' ∀x (Eco-friendlyBrand(x) → HelpSlowDownGlobalWarming(x))', ' ∀x (SustainableFashionBrand(x) → Eco-friendlyBrand(x))', ' ∀x (FastFashionProducts(x) → DisposableProducts(x)) ', ' ¬HelpSlowDownGlobalWarming(reformation) → Eco-friendlyBrand(reformation) ∨ SustainableFashionBrand(reformation)']	False	hyb
93	284	Sherville Huggins has never dismissed anyone playing for a constituent country.	['Roy Richardson was a cricketer for Sint Maartener, a consituent country.', 'Roy Richardson was a right handed batsman and medium pace bowler.', 'Roy Richardson was old when he debuted in cricket.', 'Sherville Huggins dismissed Roy Richardson.']	['Cricketeer(royrichardson) ∧ PlayedFor(royrichardson, sintmaartener) ∧ ConstituentCountry(sintmaartener)', 'RightHanded(royrichardson) ∧ Batsman(royrichardson) ∧ MediumPaceBowler(royrichardson)', 'Old(royrichardson) ∧ DebutedIn(royrichardson, cricket)', 'Dismissed(shervillehuggins, royrichardson)']	False	wiki
93	285	There are no right handed medium pace bowlers playing for Sint Maartener.	['Roy Richardson was a cricketer for Sint Maartener, a consituent country.', 'Roy Richardson was a right handed batsman and medium pace bowler.', 'Roy Richardson was old when he debuted in cricket.', 'Sherville Huggins dismissed Roy Richardson.']	['Cricketeer(royrichardson) ∧ PlayedFor(royrichardson, sintmaartener) ∧ ConstituentCountry(sintmaartener)', 'RightHanded(royrichardson) ∧ Batsman(royrichardson) ∧ MediumPaceBowler(royrichardson)', 'Old(royrichardson) ∧ DebutedIn(royrichardson, cricket)', 'Dismissed(shervillehuggins, royrichardson)']	False	wiki
251	700	John is a Yale graduate.	['To get a job at Google, you need to have a lot of work experience or a good education.', ' All Yale graduates who submitted their resumes to Google got jobs there.', ' John has a lot of work experience.', ' John submitted his resume to Google and got a job there.']	['∀x (Employed(x, google) → WorkExp(x) ∨ GoodEduc(x))', '∀x ((Yale(x) ∧ CV(x, google)) → Employed(x, google))', 'WorkExp(john)', 'CV(john, google) ∧ Employed(john, google)']	Unknown	wiki
338	889	Joe is a person taking classes.	['No students are doctors.', 'All people taking classes are students. ', 'All graduate students are people taking classes. ', 'All PhD students are graduate students. ', 'If Joe is a graduate student or a doctor (but not both), then Joe is not a graduate student and a student.']	['∀x (Student(x) → ¬Doctor(x))', '∀x (TakingClass(x) → Student(x))', '∀x (GraduateStudent(x) → TakingClass(x))', '∀x (PhDStudent(x) → GraduateStudent(x))', 'GraduateStudent(joe) ⊕  Doctor(joe) → ¬(GraduateStudent(joe) ^ Student(joe))']	Unknown	hyb
338	890	Joe is a PhD student.	['No students are doctors.', 'All people taking classes are students. ', 'All graduate students are people taking classes. ', 'All PhD students are graduate students. ', 'If Joe is a graduate student or a doctor (but not both), then Joe is not a graduate student and a student.']	['∀x (Student(x) → ¬Doctor(x))', '∀x (TakingClass(x) → Student(x))', '∀x (GraduateStudent(x) → TakingClass(x))', '∀x (PhDStudent(x) → GraduateStudent(x))', 'GraduateStudent(joe) ⊕  Doctor(joe) → ¬(GraduateStudent(joe) ^ Student(joe))']	False	hyb
338	891	Joe is not a PhD student.	['No students are doctors.', 'All people taking classes are students. ', 'All graduate students are people taking classes. ', 'All PhD students are graduate students. ', 'If Joe is a graduate student or a doctor (but not both), then Joe is not a graduate student and a student.']	['∀x (Student(x) → ¬Doctor(x))', '∀x (TakingClass(x) → Student(x))', '∀x (GraduateStudent(x) → TakingClass(x))', '∀x (PhDStudent(x) → GraduateStudent(x))', 'GraduateStudent(joe) ⊕  Doctor(joe) → ¬(GraduateStudent(joe) ^ Student(joe))']	True	hyb
32	93	Hugh Vanstone is one of the world's leading ligting designers and from the uk	["Hugh Vanstone is one of the world's leading lighting designers. ", 'Hugh Vanstone is from the UK.', 'Hugh Vanstone has lit more than 160 productions.', 'Hugh Vanstone attended school where he is from. ']	['WorldLeadingLightningDesigner(hughVanstone)', 'FromUK(hughVanstone)', 'LitOver160Productions(hughVanstone)', 'AttendedSchoolWhereFrom(hughVanstone)']	True	wiki
32	94	Hugh Vanstone has lit 170 productions.	["Hugh Vanstone is one of the world's leading lighting designers. ", 'Hugh Vanstone is from the UK.', 'Hugh Vanstone has lit more than 160 productions.', 'Hugh Vanstone attended school where he is from. ']	['WorldLeadingLightningDesigner(hughVanstone)', 'FromUK(hughVanstone)', 'LitOver160Productions(hughVanstone)', 'AttendedSchoolWhereFrom(hughVanstone)']	Unknown	wiki
32	95	Hugh Vanstone attended school in the US.	["Hugh Vanstone is one of the world's leading lighting designers. ", 'Hugh Vanstone is from the UK.', 'Hugh Vanstone has lit more than 160 productions.', 'Hugh Vanstone attended school where he is from. ']	['WorldLeadingLightningDesigner(hughVanstone)', 'FromUK(hughVanstone)', 'LitOver160Productions(hughVanstone)', 'AttendedSchoolWhereFrom(hughVanstone)']	Unknown	wiki
155	450	Superman can run faster than Bolt.	['No man can run faster than Bolt. ', 'Superman is not a man.']	['∀x (Man(x) → ¬FasterThanBolt(x))', '¬Man(superman) ']	Unknown	wiki
128	380	An American scientist has been called the "father of the analysis of algorithms".	['Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.', 'Knuth has been called the "father of the analysis of algorithms".']	['AmericanComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorStanford(donaldErvinKnuth)', 'BeCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)']	True	wiki
128	381	A mathematician has been called the "father of the analysis of algorithms".	['Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.', 'Knuth has been called the "father of the analysis of algorithms".']	['AmericanComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorStanford(donaldErvinKnuth)', 'BeCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)']	True	wiki
128	382	Donald Knuth is a well-known figure in the field of artificial intelligence .	['Donald Ervin Knuth is an American computer scientist, mathematician, and Professor Emeritus at Stanford University.', 'Knuth has been called the "father of the analysis of algorithms".']	['AmericanComputerScientist(donaldErvinKnuth) ∧ Mathematician(donaldErvinKnuth) ∧ ProfessorStanford(donaldErvinKnuth)', 'BeCalled(donaldErvinKnuth, fatherOfTheAnalysisOfAlgorithms)']	Unknown	wiki
121	363	There is a flea beetle within the Chrysomelidae family.	['Neocrepidodera Corpulentas are flea beetles or moths.', 'The species Neocrepidodera Corpulenta is in the Chrysomelidae family.', 'There are no moths within the Chrysomelidae family.']	['FleaBeetle(neocrepidoderacorpulenta) ∨ Moth(neocrepidoderacorpulenta)', 'Species(neocrepidoderacorpulenta) ∧ Family(chrysomelidae) ∧ In(neocrepidoderacorpulenta, chrysomelidae)', '∀x (In(x, chrysomelidae) ∧ Family(chrysomelidae) → ¬Moth(x))']	True	wiki
121	364	There are no flea beetles within the Chrysomelidae family.	['Neocrepidodera Corpulentas are flea beetles or moths.', 'The species Neocrepidodera Corpulenta is in the Chrysomelidae family.', 'There are no moths within the Chrysomelidae family.']	['FleaBeetle(neocrepidoderacorpulenta) ∨ Moth(neocrepidoderacorpulenta)', 'Species(neocrepidoderacorpulenta) ∧ Family(chrysomelidae) ∧ In(neocrepidoderacorpulenta, chrysomelidae)', '∀x (In(x, chrysomelidae) ∧ Family(chrysomelidae) → ¬Moth(x))']	False	wiki
227	644	Carrozzeria Colli made car bodies in 1931.	['Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931.', 'Carrozzeria Colli is a company that specialized in using aluminum.', 'The first automobiles built by Carrozzeria Colli were racing cars.', 'Some racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chasis.', 'Carrozzeria Colli worked for airforces.', 'Carrozzeria Colli made car bodies. ']	['MilaneseCoachbuilderCompany(carrozzeriacolli) ∧ EstablishedBy(carrozzeriacolli, giuseppecolli) ∧ EstablishedIn(carrozzeriacolli, y1901)', 'SpecializedIn(carrozzeriacolli, usingaluminum)', '∀x (FirstAutomobilesBy(x, carrozzeriacolli) → Racingcar(x))', '∃x (RacingCar(x) ∧ BuiltBy(x, carrozzeriacolli) ∧ Used(x, fiat110mechanicals) ∧ Used(x, chasis))', '∃x (Airforce(x) ∧ WorkedFor(carrozzeriacolli, x))', 'Made(carrozzeriacolli, carbodies)']	Unknown	wiki
227	645	Carrozzeria Colli built airplanes during World War II.	['Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931.', 'Carrozzeria Colli is a company that specialized in using aluminum.', 'The first automobiles built by Carrozzeria Colli were racing cars.', 'Some racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chasis.', 'Carrozzeria Colli worked for airforces.', 'Carrozzeria Colli made car bodies. ']	['MilaneseCoachbuilderCompany(carrozzeriacolli) ∧ EstablishedBy(carrozzeriacolli, giuseppecolli) ∧ EstablishedIn(carrozzeriacolli, y1901)', 'SpecializedIn(carrozzeriacolli, usingaluminum)', '∀x (FirstAutomobilesBy(x, carrozzeriacolli) → Racingcar(x))', '∃x (RacingCar(x) ∧ BuiltBy(x, carrozzeriacolli) ∧ Used(x, fiat110mechanicals) ∧ Used(x, chasis))', '∃x (Airforce(x) ∧ WorkedFor(carrozzeriacolli, x))', 'Made(carrozzeriacolli, carbodies)']	Unknown	wiki
227	646	Giuseppe Colli established a company that made car bodies.	['Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931.', 'Carrozzeria Colli is a company that specialized in using aluminum.', 'The first automobiles built by Carrozzeria Colli were racing cars.', 'Some racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chasis.', 'Carrozzeria Colli worked for airforces.', 'Carrozzeria Colli made car bodies. ']	['MilaneseCoachbuilderCompany(carrozzeriacolli) ∧ EstablishedBy(carrozzeriacolli, giuseppecolli) ∧ EstablishedIn(carrozzeriacolli, y1901)', 'SpecializedIn(carrozzeriacolli, usingaluminum)', '∀x (FirstAutomobilesBy(x, carrozzeriacolli) → Racingcar(x))', '∃x (RacingCar(x) ∧ BuiltBy(x, carrozzeriacolli) ∧ Used(x, fiat110mechanicals) ∧ Used(x, chasis))', '∃x (Airforce(x) ∧ WorkedFor(carrozzeriacolli, x))', 'Made(carrozzeriacolli, carbodies)']	True	wiki
227	647	Giuseppe Colli established a Milanese coachbuilder company that specialized in using aluminum.	['Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931.', 'Carrozzeria Colli is a company that specialized in using aluminum.', 'The first automobiles built by Carrozzeria Colli were racing cars.', 'Some racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chasis.', 'Carrozzeria Colli worked for airforces.', 'Carrozzeria Colli made car bodies. ']	['MilaneseCoachbuilderCompany(carrozzeriacolli) ∧ EstablishedBy(carrozzeriacolli, giuseppecolli) ∧ EstablishedIn(carrozzeriacolli, y1901)', 'SpecializedIn(carrozzeriacolli, usingaluminum)', '∀x (FirstAutomobilesBy(x, carrozzeriacolli) → Racingcar(x))', '∃x (RacingCar(x) ∧ BuiltBy(x, carrozzeriacolli) ∧ Used(x, fiat110mechanicals) ∧ Used(x, chasis))', '∃x (Airforce(x) ∧ WorkedFor(carrozzeriacolli, x))', 'Made(carrozzeriacolli, carbodies)']	True	wiki
227	648	The first automobiles built by Carrozzeria Colli were built using Fiat 1100 mechanicals and chasis.	['Carrozzeria Colli is a Milanese coachbuilder company that was established by Giuseppe Colli in 1931.', 'Carrozzeria Colli is a company that specialized in using aluminum.', 'The first automobiles built by Carrozzeria Colli were racing cars.', 'Some racing cars built by Carrozzeria Colli used Fiat 1100 mechanicals and chasis.', 'Carrozzeria Colli worked for airforces.', 'Carrozzeria Colli made car bodies. ']	['MilaneseCoachbuilderCompany(carrozzeriacolli) ∧ EstablishedBy(carrozzeriacolli, giuseppecolli) ∧ EstablishedIn(carrozzeriacolli, y1901)', 'SpecializedIn(carrozzeriacolli, usingaluminum)', '∀x (FirstAutomobilesBy(x, carrozzeriacolli) → Racingcar(x))', '∃x (RacingCar(x) ∧ BuiltBy(x, carrozzeriacolli) ∧ Used(x, fiat110mechanicals) ∧ Used(x, chasis))', '∃x (Airforce(x) ∧ WorkedFor(carrozzeriacolli, x))', 'Made(carrozzeriacolli, carbodies)']	Unknown	wiki
130	387	John will go to the cinema.	['John will go to the cinema if and only if Jack goes to the cinema today.', 'Jack will go to the cinema if and only if Iron Man is on and the weather is not bad today.', 'Some days in March have bad weather.', 'Iron man is on.', "It's March now."]	['GoToTheCinema(john, today) ↔ GoToTheCinema(jack, today)', 'GoToTheCinema(jack, today) ↔ (Movie(ironman) ∧ ¬BadWeather(today))', '∃x (Month(march) → BadWeather(x))', 'Movie(ironman)', 'Month(march)']	Unknown	wiki
130	388	The weather is good today.	['John will go to the cinema if and only if Jack goes to the cinema today.', 'Jack will go to the cinema if and only if Iron Man is on and the weather is not bad today.', 'Some days in March have bad weather.', 'Iron man is on.', "It's March now."]	['GoToTheCinema(john, today) ↔ GoToTheCinema(jack, today)', 'GoToTheCinema(jack, today) ↔ (Movie(ironman) ∧ ¬BadWeather(today))', '∃x (Month(march) → BadWeather(x))', 'Movie(ironman)', 'Month(march)']	Unknown	wiki
81	247	Quiksilver sells beer.	['Quiksilver sells sportswear, clothing, footwear, and accessories.', 'Flannels are a type of clothing.', 'Joe owns an item fron Quiksilver.']	['∀x (QuiksilverSells(x) → Sportswear(x) ∨ Clothing(x) ∨ Footwear(x) ∨ Accessory(x))', 'Clothing(flannel)', '∃x (QuiksilverSells(x) → JoeOwns(x))']	Unknown	wiki
81	248	Joe owns a flannel.	['Quiksilver sells sportswear, clothing, footwear, and accessories.', 'Flannels are a type of clothing.', 'Joe owns an item fron Quiksilver.']	['∀x (QuiksilverSells(x) → Sportswear(x) ∨ Clothing(x) ∨ Footwear(x) ∨ Accessory(x))', 'Clothing(flannel)', '∃x (QuiksilverSells(x) → JoeOwns(x))']	Unknown	wiki
81	249	Joe owns at least one a piece of sportswear, clothing, footwear, or accessory	['Quiksilver sells sportswear, clothing, footwear, and accessories.', 'Flannels are a type of clothing.', 'Joe owns an item fron Quiksilver.']	['∀x (QuiksilverSells(x) → Sportswear(x) ∨ Clothing(x) ∨ Footwear(x) ∨ Accessory(x))', 'Clothing(flannel)', '∃x (QuiksilverSells(x) → JoeOwns(x))']	True	wiki
308	765	The video game "Be Lionel" is in the pokemon series.	['No video games released by Nintendo support the PS4 platform.', 'All video games in the Pokemon series are released by Nintendo. ', 'All video games in the FIFA series support the PS4 platform. ', 'All video games supporting users to simulate playing soccer games online are in the FIFA series.', 'The video game named “Be Lionel” is in the Pokemon series or supports users to simulate playing football games online.']	['∀x (Nintendo(x) → ¬SupportPS4(x))', '∀x (Pokemon(x) → Nintendo(x))', '∀x (FIFA(x) → SupportPS4(x))', '∀x (SoccerOnline(x) → FIFA(x))', 'Pokemon(belionel) ⊕ SoccerOnline(belionel)']	Unknown	hyb
308	766	The video game named “Be Lionel” is not in the FIFA series or supports the PS4 platform.	['No video games released by Nintendo support the PS4 platform.', 'All video games in the Pokemon series are released by Nintendo. ', 'All video games in the FIFA series support the PS4 platform. ', 'All video games supporting users to simulate playing soccer games online are in the FIFA series.', 'The video game named “Be Lionel” is in the Pokemon series or supports users to simulate playing football games online.']	['∀x (Nintendo(x) → ¬SupportPS4(x))', '∀x (Pokemon(x) → Nintendo(x))', '∀x (FIFA(x) → SupportPS4(x))', '∀x (SoccerOnline(x) → FIFA(x))', 'Pokemon(belionel) ⊕ SoccerOnline(belionel)']	True	hyb
308	767	The video game named “Be Lionel” is in the FIFA series or supports the PS4 platform.	['No video games released by Nintendo support the PS4 platform.', 'All video games in the Pokemon series are released by Nintendo. ', 'All video games in the FIFA series support the PS4 platform. ', 'All video games supporting users to simulate playing soccer games online are in the FIFA series.', 'The video game named “Be Lionel” is in the Pokemon series or supports users to simulate playing football games online.']	['∀x (Nintendo(x) → ¬SupportPS4(x))', '∀x (Pokemon(x) → Nintendo(x))', '∀x (FIFA(x) → SupportPS4(x))', '∀x (SoccerOnline(x) → FIFA(x))', 'Pokemon(belionel) ⊕ SoccerOnline(belionel)']	False	hyb
308	768	The video game named “Be Lionel”  is not in the FIFA or Pokemon series.	['No video games released by Nintendo support the PS4 platform.', 'All video games in the Pokemon series are released by Nintendo. ', 'All video games in the FIFA series support the PS4 platform. ', 'All video games supporting users to simulate playing soccer games online are in the FIFA series.', 'The video game named “Be Lionel” is in the Pokemon series or supports users to simulate playing football games online.']	['∀x (Nintendo(x) → ¬SupportPS4(x))', '∀x (Pokemon(x) → Nintendo(x))', '∀x (FIFA(x) → SupportPS4(x))', '∀x (SoccerOnline(x) → FIFA(x))', 'Pokemon(belionel) ⊕ SoccerOnline(belionel)']	False	hyb
311	778	Bank of America payment cards are international.	['No payment cards issued by Russian banks can be used with ApplePay.', 'All MIR payment cards are issued by Russian banks.', 'Some international payment cards can be used with ApplePay.', 'Social payments in Russia can only be transferred to MIR payment cards.', 'Bank of America payment cards can be used with ApplePay.']	['∀x (RussianBank(x) → ¬ApplePay(x))', '∀x (Mir(x) → RussianBank(x))', '∃x (International(x) → ApplePay(x))', '∀x (SocialRussia(x) → Mir(x))', 'ApplePay(boapaymentcards)']	Unknown	hyb
311	779	Bank of America payment cards are international and can be used to transfer social payments in Russia.	['No payment cards issued by Russian banks can be used with ApplePay.', 'All MIR payment cards are issued by Russian banks.', 'Some international payment cards can be used with ApplePay.', 'Social payments in Russia can only be transferred to MIR payment cards.', 'Bank of America payment cards can be used with ApplePay.']	['∀x (RussianBank(x) → ¬ApplePay(x))', '∀x (Mir(x) → RussianBank(x))', '∃x (International(x) → ApplePay(x))', '∀x (SocialRussia(x) → Mir(x))', 'ApplePay(boapaymentcards)']	False	hyb
311	780	If Bank of America payment cards are international or issued by Russian banks, then they can not be used to transfer social payments in Russia.	['No payment cards issued by Russian banks can be used with ApplePay.', 'All MIR payment cards are issued by Russian banks.', 'Some international payment cards can be used with ApplePay.', 'Social payments in Russia can only be transferred to MIR payment cards.', 'Bank of America payment cards can be used with ApplePay.']	['∀x (RussianBank(x) → ¬ApplePay(x))', '∀x (Mir(x) → RussianBank(x))', '∃x (International(x) → ApplePay(x))', '∀x (SocialRussia(x) → Mir(x))', 'ApplePay(boapaymentcards)']	True	hyb
52	151	The Lumina APV is van.	['The Lumina APV is produced by Chevrolet. ', 'The Astro is a van produced by Chevrolet. ', 'Cars produced by Chevrolet are either cars or vans.']	['Chevrolet(luminaAPV)', 'Chevrolet(astro) ∧ Van(astro)', '∀x (Chevrolet(x) → Car(x) ⊕ Van(x))']	Unknown	wiki
52	152	The Lumina APV is either a car or a van.	['The Lumina APV is produced by Chevrolet. ', 'The Astro is a van produced by Chevrolet. ', 'Cars produced by Chevrolet are either cars or vans.']	['Chevrolet(luminaAPV)', 'Chevrolet(astro) ∧ Van(astro)', '∀x (Chevrolet(x) → Car(x) ⊕ Van(x))']	True	wiki
52	153	The Astro is a van.	['The Lumina APV is produced by Chevrolet. ', 'The Astro is a van produced by Chevrolet. ', 'Cars produced by Chevrolet are either cars or vans.']	['Chevrolet(luminaAPV)', 'Chevrolet(astro) ∧ Van(astro)', '∀x (Chevrolet(x) → Car(x) ⊕ Van(x))']	True	wiki
52	154	The Astro is a car.	['The Lumina APV is produced by Chevrolet. ', 'The Astro is a van produced by Chevrolet. ', 'Cars produced by Chevrolet are either cars or vans.']	['Chevrolet(luminaAPV)', 'Chevrolet(astro) ∧ Van(astro)', '∀x (Chevrolet(x) → Car(x) ⊕ Van(x))']	False	wiki
405	1128	George is a person who works from home.	['Everyone who works in person is a commuter.', 'People either work in person or work from home.', 'Everyone who works from home has a relaxed schedule.', 'George is either a commuter or has a home office setup.', 'If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter.']	['∀x (InPerson(x) → Commuter(x))', '∀x (InPerson(x) ⊕ FromHome(x))', '∀x (FromHome(x) → Relaxed(x))', 'Commuter(george) ⊕ HomeOffice(george)', 'FromHome(george) ⊕ HomeOffice(george) → ¬(FromHome(george) ∧ Commuter(george))']	Unknown	hyb
405	1129	If George is not a person who works from home and a person who works in person, then George is neither a commuter nor a person who has a relaxed schedule.	['Everyone who works in person is a commuter.', 'People either work in person or work from home.', 'Everyone who works from home has a relaxed schedule.', 'George is either a commuter or has a home office setup.', 'If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter.']	['∀x (InPerson(x) → Commuter(x))', '∀x (InPerson(x) ⊕ FromHome(x))', '∀x (FromHome(x) → Relaxed(x))', 'Commuter(george) ⊕ HomeOffice(george)', 'FromHome(george) ⊕ HomeOffice(george) → ¬(FromHome(george) ∧ Commuter(george))']	False	hyb
405	1130	If George is either a person who has a home office setup and a person who works in person, or neither a person who has a home office setup nor a person who works in person, then George is either a person who works from home or a person who has a relaxed schedule.	['Everyone who works in person is a commuter.', 'People either work in person or work from home.', 'Everyone who works from home has a relaxed schedule.', 'George is either a commuter or has a home office setup.', 'If George is either a person who works from home or has a home office setup, then George is not a person who works from home and a commuter.']	['∀x (InPerson(x) → Commuter(x))', '∀x (InPerson(x) ⊕ FromHome(x))', '∀x (FromHome(x) → Relaxed(x))', 'Commuter(george) ⊕ HomeOffice(george)', 'FromHome(george) ⊕ HomeOffice(george) → ¬(FromHome(george) ∧ Commuter(george))']	True	hyb
28	81	Joe Rogan is American.	['Jason Kramer is an American music supervisor.', 'Some American radio personalities are also music supervisors. ', 'Anyone who hosts a show on a public radio station is a radio personality.', 'Joe Rogan is a radio personality.', 'Jason Kramer hosted a show on a public radio station.']	['MusicSupervisor(jasonKramer) ∧ American(jasonKramer)', '∃x (American(x) ∧ MusicSupervisor(x) ∧ RadioPersonality(x))', '∀x (HostShowOnPublicRadioStation(x) → RadioPersonality(x))', 'RadioPersonality(joeRogan)', 'HostShowOnPublicRadioStation(jasonKramer)']	Unknown	wiki
28	82	Jason Kramer is a music supervisor.	['Jason Kramer is an American music supervisor.', 'Some American radio personalities are also music supervisors. ', 'Anyone who hosts a show on a public radio station is a radio personality.', 'Joe Rogan is a radio personality.', 'Jason Kramer hosted a show on a public radio station.']	['MusicSupervisor(jasonKramer) ∧ American(jasonKramer)', '∃x (American(x) ∧ MusicSupervisor(x) ∧ RadioPersonality(x))', '∀x (HostShowOnPublicRadioStation(x) → RadioPersonality(x))', 'RadioPersonality(joeRogan)', 'HostShowOnPublicRadioStation(jasonKramer)']	True	wiki
28	83	Jason Kramer is a radio personality.	['Jason Kramer is an American music supervisor.', 'Some American radio personalities are also music supervisors. ', 'Anyone who hosts a show on a public radio station is a radio personality.', 'Joe Rogan is a radio personality.', 'Jason Kramer hosted a show on a public radio station.']	['MusicSupervisor(jasonKramer) ∧ American(jasonKramer)', '∃x (American(x) ∧ MusicSupervisor(x) ∧ RadioPersonality(x))', '∀x (HostShowOnPublicRadioStation(x) → RadioPersonality(x))', 'RadioPersonality(joeRogan)', 'HostShowOnPublicRadioStation(jasonKramer)']	True	wiki
430	1228	Civet Coffee is produced in France.	['No coffee sold in Walmart is produced in France. ', 'All coffee supplied by the company is sold in Walmart. ', 'All coffee produced in Columbia is produced in France. ', 'All coffee favored by local residents is coffee produced in Columbia. ', 'All coffee with high prices is favored by local residents. ', 'Civet Coffee is not produced in Columbia and is cheap.', 'Jamaica Blue is sold in Walmart or favored by local residents.']	['∀x (Walmart(x) → ¬France(x))', '∀x (Company(x) → Walmart(x))', '∀x (Columbia(x) → France(x))', '∀x (Favored(x) → Columbia(x))', '∀x (HighPrice(x) → Favored(x))', '¬(Columbia(civetcoffee) ∧ HighPrice(civetcoffee))', 'Walmart(jamaicablue) ∨ Favored(jamaicablue)']	Unknown	hyb
430	1229	Civet Coffee is not produced in France.	['No coffee sold in Walmart is produced in France. ', 'All coffee supplied by the company is sold in Walmart. ', 'All coffee produced in Columbia is produced in France. ', 'All coffee favored by local residents is coffee produced in Columbia. ', 'All coffee with high prices is favored by local residents. ', 'Civet Coffee is not produced in Columbia and is cheap.', 'Jamaica Blue is sold in Walmart or favored by local residents.']	['∀x (Walmart(x) → ¬France(x))', '∀x (Company(x) → Walmart(x))', '∀x (Columbia(x) → France(x))', '∀x (Favored(x) → Columbia(x))', '∀x (HighPrice(x) → Favored(x))', '¬(Columbia(civetcoffee) ∧ HighPrice(civetcoffee))', 'Walmart(jamaicablue) ∨ Favored(jamaicablue)']	Unknown	hyb
430	1230	Jamaica Blue is expensive and supplied by the company.	['No coffee sold in Walmart is produced in France. ', 'All coffee supplied by the company is sold in Walmart. ', 'All coffee produced in Columbia is produced in France. ', 'All coffee favored by local residents is coffee produced in Columbia. ', 'All coffee with high prices is favored by local residents. ', 'Civet Coffee is not produced in Columbia and is cheap.', 'Jamaica Blue is sold in Walmart or favored by local residents.']	['∀x (Walmart(x) → ¬France(x))', '∀x (Company(x) → Walmart(x))', '∀x (Columbia(x) → France(x))', '∀x (Favored(x) → Columbia(x))', '∀x (HighPrice(x) → Favored(x))', '¬(Columbia(civetcoffee) ∧ HighPrice(civetcoffee))', 'Walmart(jamaicablue) ∨ Favored(jamaicablue)']	False	hyb
430	1231	Jamaica Blue is not expensive and is not supplied by the company.	['No coffee sold in Walmart is produced in France. ', 'All coffee supplied by the company is sold in Walmart. ', 'All coffee produced in Columbia is produced in France. ', 'All coffee favored by local residents is coffee produced in Columbia. ', 'All coffee with high prices is favored by local residents. ', 'Civet Coffee is not produced in Columbia and is cheap.', 'Jamaica Blue is sold in Walmart or favored by local residents.']	['∀x (Walmart(x) → ¬France(x))', '∀x (Company(x) → Walmart(x))', '∀x (Columbia(x) → France(x))', '∀x (Favored(x) → Columbia(x))', '∀x (HighPrice(x) → Favored(x))', '¬(Columbia(civetcoffee) ∧ HighPrice(civetcoffee))', 'Walmart(jamaicablue) ∨ Favored(jamaicablue)']	True	hyb
209	600	Rochelle lives in Galicia.	['There are two places named Galicia: either in Spain or in Poland.', 'Spain is in Europe.', 'Poland is in Europe.', 'Rochelle lives in Europe.', 'Dominique does not live in Europe.', 'Alfonso lives in Galicia.']	['∀x (Galicia(x) → Spain(x) ⊕ Poland(x))', '∀x (Spain(x) → Europe(x))', '∀x (Poland(x) → Europe(x))', '∀x (RochelleLive(x) → Europe(x))', '∀x (DominiqueLive(x) → ¬Europe(x))', '∀x (AlfonsoLive(x) → Galicia(x))']	Unknown	wiki
209	601	Dominique does not live in Spain.	['There are two places named Galicia: either in Spain or in Poland.', 'Spain is in Europe.', 'Poland is in Europe.', 'Rochelle lives in Europe.', 'Dominique does not live in Europe.', 'Alfonso lives in Galicia.']	['∀x (Galicia(x) → Spain(x) ⊕ Poland(x))', '∀x (Spain(x) → Europe(x))', '∀x (Poland(x) → Europe(x))', '∀x (RochelleLive(x) → Europe(x))', '∀x (DominiqueLive(x) → ¬Europe(x))', '∀x (AlfonsoLive(x) → Galicia(x))']	True	wiki
209	602	Alfonso lives in Europe.	['There are two places named Galicia: either in Spain or in Poland.', 'Spain is in Europe.', 'Poland is in Europe.', 'Rochelle lives in Europe.', 'Dominique does not live in Europe.', 'Alfonso lives in Galicia.']	['∀x (Galicia(x) → Spain(x) ⊕ Poland(x))', '∀x (Spain(x) → Europe(x))', '∀x (Poland(x) → Europe(x))', '∀x (RochelleLive(x) → Europe(x))', '∀x (DominiqueLive(x) → ¬Europe(x))', '∀x (AlfonsoLive(x) → Galicia(x))']	True	wiki
106	322	Ralph Hammerthaler is a writer born in Asia.	['Ralph Hammerthaler was born in Wasserburg am Inn.', 'Wasserburg am Inn is in Germany.', 'Germany is in Europe.', 'Ralph Hammerthaler is a German writer.', 'Ralph Hammerthaler was born in 1965. ']	['BornIn(ralphHammerthaler, wasserburgAmInn)', 'LocatedIn(wasserbAmInn, germany)', 'LocatedIn(germany, europe)', 'Writer(ralphHammerthaler)', 'BornIn1965(ralphHammerthaler)']	Unknown	wiki
106	323	Ralph Hammerthaler lives in Germany.	['Ralph Hammerthaler was born in Wasserburg am Inn.', 'Wasserburg am Inn is in Germany.', 'Germany is in Europe.', 'Ralph Hammerthaler is a German writer.', 'Ralph Hammerthaler was born in 1965. ']	['BornIn(ralphHammerthaler, wasserburgAmInn)', 'LocatedIn(wasserbAmInn, germany)', 'LocatedIn(germany, europe)', 'Writer(ralphHammerthaler)', 'BornIn1965(ralphHammerthaler)']	Unknown	wiki
415	1171	2001 is a book that has won a Hugo Award.	['All books written by Tomas have sold more than 1 million copies. ', 'Some books that have won Hugo Awards are written by Tomas.', 'All books about the future are inspired by Shakespeare. ', '2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.', '2001 is a book that has either sold more than 1 million copies or it was written by Tomas.']	['∀x (WrittenByTomas(x) → SoldOneMillion(x))', '∃x (WinningHugoAward(x) ∧ WrittenByTomas(x))', '∀x (AboutFuture(x) → InspiredFromShakespeare(x))', 'InspiredFromShakespeare(y2001) ⊕ SoldOneMillion(y2001) ', 'SoldOneMillion(y2001) ⊕ WrittenByTomas(y2001)']	Unknown	hyb
415	1172	2001 is a book that has won a Hugo Award and is about the future.	['All books written by Tomas have sold more than 1 million copies. ', 'Some books that have won Hugo Awards are written by Tomas.', 'All books about the future are inspired by Shakespeare. ', '2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.', '2001 is a book that has either sold more than 1 million copies or it was written by Tomas.']	['∀x (WrittenByTomas(x) → SoldOneMillion(x))', '∃x (WinningHugoAward(x) ∧ WrittenByTomas(x))', '∀x (AboutFuture(x) → InspiredFromShakespeare(x))', 'InspiredFromShakespeare(y2001) ⊕ SoldOneMillion(y2001) ', 'SoldOneMillion(y2001) ⊕ WrittenByTomas(y2001)']	False	hyb
415	1173	If 2001 either has won a Hugo Award and is about the future, or neither has won a Hugo Award nor is about the future, then 2001 has neither won a Hugo Award nor is written by Tomas.	['All books written by Tomas have sold more than 1 million copies. ', 'Some books that have won Hugo Awards are written by Tomas.', 'All books about the future are inspired by Shakespeare. ', '2001 is a book either inspired from Shakespeare or it has sold more than 1 million copies.', '2001 is a book that has either sold more than 1 million copies or it was written by Tomas.']	['∀x (WrittenByTomas(x) → SoldOneMillion(x))', '∃x (WinningHugoAward(x) ∧ WrittenByTomas(x))', '∀x (AboutFuture(x) → InspiredFromShakespeare(x))', 'InspiredFromShakespeare(y2001) ⊕ SoldOneMillion(y2001) ', 'SoldOneMillion(y2001) ⊕ WrittenByTomas(y2001)']	True	hyb
479	1398	Grapes are a food.	['No grass is food. ', 'All meadows are grass.', 'All edible things are food. ', 'All fruits are edible.', 'All lemons are fruit.', 'Grapes are not edible and lemons.', 'Bananas are grass or fruit.']	['∀x (Grass(x) → ¬Food(x))', '∀x (Meadow(x) → Grass(x))', '∀x (Edible(x) → Food(x))', '∀x (Fruit(x) → Edible(x))', '∀x (Lemon(x) → Fruit(x))', '¬(Edible(grape) ∧ Lemon(grape))', 'Grass(banana) ∨ Fruit(banana)']	Unknown	hyb
479	1399	Grapes are not a food.	['No grass is food. ', 'All meadows are grass.', 'All edible things are food. ', 'All fruits are edible.', 'All lemons are fruit.', 'Grapes are not edible and lemons.', 'Bananas are grass or fruit.']	['∀x (Grass(x) → ¬Food(x))', '∀x (Meadow(x) → Grass(x))', '∀x (Edible(x) → Food(x))', '∀x (Fruit(x) → Edible(x))', '∀x (Lemon(x) → Fruit(x))', '¬(Edible(grape) ∧ Lemon(grape))', 'Grass(banana) ∨ Fruit(banana)']	Unknown	hyb
479	1400	Bananas are a lemon and meadow.	['No grass is food. ', 'All meadows are grass.', 'All edible things are food. ', 'All fruits are edible.', 'All lemons are fruit.', 'Grapes are not edible and lemons.', 'Bananas are grass or fruit.']	['∀x (Grass(x) → ¬Food(x))', '∀x (Meadow(x) → Grass(x))', '∀x (Edible(x) → Food(x))', '∀x (Fruit(x) → Edible(x))', '∀x (Lemon(x) → Fruit(x))', '¬(Edible(grape) ∧ Lemon(grape))', 'Grass(banana) ∨ Fruit(banana)']	False	hyb
479	1401	Bananas are not both a lemon and a meadow.	['No grass is food. ', 'All meadows are grass.', 'All edible things are food. ', 'All fruits are edible.', 'All lemons are fruit.', 'Grapes are not edible and lemons.', 'Bananas are grass or fruit.']	['∀x (Grass(x) → ¬Food(x))', '∀x (Meadow(x) → Grass(x))', '∀x (Edible(x) → Food(x))', '∀x (Fruit(x) → Edible(x))', '∀x (Lemon(x) → Fruit(x))', '¬(Edible(grape) ∧ Lemon(grape))', 'Grass(banana) ∨ Fruit(banana)']	True	hyb
21	60	The Boston Celtics is from San Francisco.	['The Golden State Warriors are a team from San Francisco.', 'The Golden State Warriors won the NBA finals.', 'All teams attending the NBA finals have more than thirty years of history.', 'Boston Celtics are a team that lost the NBA finals.', 'If a team wins the NBA finals, then they will have more income.', 'If a team wins or loses at the NBA finals, then they are attending the finals.']	['Team(goldenstatewarriors) ∧ From(goldenstatewarriors, sanfrancisco)', 'Won(goldenstatewarriors, nbafinals)', '∀x (team(x) ∧ Attending(x, nbafinals) → HasMoreThan(x, thirtyyearsofhistory))', 'Team(bostonceltics) ∧ Lost(bostonceltics, nbafinals)', '∀x (Team(x) ∧ Won(x, nbafinals) → MoreIncome(x))', '∀x (Won(x, nbafinals) ∨ Lost(x, nbafinals) → Attending(x, nbafinals))']	Unknown	wiki
21	61	The Boston Celtics has more than 30 years of experience.	['The Golden State Warriors are a team from San Francisco.', 'The Golden State Warriors won the NBA finals.', 'All teams attending the NBA finals have more than thirty years of history.', 'Boston Celtics are a team that lost the NBA finals.', 'If a team wins the NBA finals, then they will have more income.', 'If a team wins or loses at the NBA finals, then they are attending the finals.']	['Team(goldenstatewarriors) ∧ From(goldenstatewarriors, sanfrancisco)', 'Won(goldenstatewarriors, nbafinals)', '∀x (team(x) ∧ Attending(x, nbafinals) → HasMoreThan(x, thirtyyearsofhistory))', 'Team(bostonceltics) ∧ Lost(bostonceltics, nbafinals)', '∀x (Team(x) ∧ Won(x, nbafinals) → MoreIncome(x))', '∀x (Won(x, nbafinals) ∨ Lost(x, nbafinals) → Attending(x, nbafinals))']	True	wiki
21	62	The Golden State Warriors will have more income for gate receipts.	['The Golden State Warriors are a team from San Francisco.', 'The Golden State Warriors won the NBA finals.', 'All teams attending the NBA finals have more than thirty years of history.', 'Boston Celtics are a team that lost the NBA finals.', 'If a team wins the NBA finals, then they will have more income.', 'If a team wins or loses at the NBA finals, then they are attending the finals.']	['Team(goldenstatewarriors) ∧ From(goldenstatewarriors, sanfrancisco)', 'Won(goldenstatewarriors, nbafinals)', '∀x (team(x) ∧ Attending(x, nbafinals) → HasMoreThan(x, thirtyyearsofhistory))', 'Team(bostonceltics) ∧ Lost(bostonceltics, nbafinals)', '∀x (Team(x) ∧ Won(x, nbafinals) → MoreIncome(x))', '∀x (Won(x, nbafinals) ∨ Lost(x, nbafinals) → Attending(x, nbafinals))']	True	wiki
218	624	Maya will not play violin.	['Maya will play violin if and only if she never injures her fingers.', 'Volleyball players can injure their ankle, fingers, or shoulder.', 'Maya is a volleyball player.']	['CanInjureFingures(maya) → ¬WillPlayViolin(maya)', '∀x (VolleyballPlayer(x) → CanInjureFingures(x))', 'VolleyballPlayer(maya)']	True	wiki
428	1220	IPod1 is controlled by managers.	['All devices belonging to the company are connected to Google Home. ', 'All devices with the company logo belong to the company. ', 'A device is either with the company logo or belongs to employees. ', "All devices belonging to employees are available to connect to the company's wifi. ", 'All devices connected to Google Home are controlled by managers. ', "All devices that connect to the company's wifi are easy to operate. ", 'All devices that are easy to operate are produced after 2020. ', 'IPod1 is produced before 2020. ']	['∀x (InCompany(x) → GoogleHome(x))', '∀x (CompanyLogo(x) → InCompany(x))', '∀x (CompanyLogo(x) ∨ Employee(x))', '∀x (Employee(x) → Wifi(x))', '∀x (GoogleHome(x) → ControlledByManager(x))', '∀x (Wifi(x) → EasyToOperate(x))', '∀x (EasyToOperate(x) → ProducedAfter2020(x))', '¬ProducedAfter2020(iPod1)']	True	hyb
428	1221	IPod1 is either produced after 2020 or controlled by managers.	['All devices belonging to the company are connected to Google Home. ', 'All devices with the company logo belong to the company. ', 'A device is either with the company logo or belongs to employees. ', "All devices belonging to employees are available to connect to the company's wifi. ", 'All devices connected to Google Home are controlled by managers. ', "All devices that connect to the company's wifi are easy to operate. ", 'All devices that are easy to operate are produced after 2020. ', 'IPod1 is produced before 2020. ']	['∀x (InCompany(x) → GoogleHome(x))', '∀x (CompanyLogo(x) → InCompany(x))', '∀x (CompanyLogo(x) ∨ Employee(x))', '∀x (Employee(x) → Wifi(x))', '∀x (GoogleHome(x) → ControlledByManager(x))', '∀x (Wifi(x) → EasyToOperate(x))', '∀x (EasyToOperate(x) → ProducedAfter2020(x))', '¬ProducedAfter2020(iPod1)']	True	hyb
428	1222	IPod1 is not with the company logo, and managers do not control it.	['All devices belonging to the company are connected to Google Home. ', 'All devices with the company logo belong to the company. ', 'A device is either with the company logo or belongs to employees. ', "All devices belonging to employees are available to connect to the company's wifi. ", 'All devices connected to Google Home are controlled by managers. ', "All devices that connect to the company's wifi are easy to operate. ", 'All devices that are easy to operate are produced after 2020. ', 'IPod1 is produced before 2020. ']	['∀x (InCompany(x) → GoogleHome(x))', '∀x (CompanyLogo(x) → InCompany(x))', '∀x (CompanyLogo(x) ∨ Employee(x))', '∀x (Employee(x) → Wifi(x))', '∀x (GoogleHome(x) → ControlledByManager(x))', '∀x (Wifi(x) → EasyToOperate(x))', '∀x (EasyToOperate(x) → ProducedAfter2020(x))', '¬ProducedAfter2020(iPod1)']	False	hyb
428	1223	IPod1 is either with the company logo or controlled by managers.	['All devices belonging to the company are connected to Google Home. ', 'All devices with the company logo belong to the company. ', 'A device is either with the company logo or belongs to employees. ', "All devices belonging to employees are available to connect to the company's wifi. ", 'All devices connected to Google Home are controlled by managers. ', "All devices that connect to the company's wifi are easy to operate. ", 'All devices that are easy to operate are produced after 2020. ', 'IPod1 is produced before 2020. ']	['∀x (InCompany(x) → GoogleHome(x))', '∀x (CompanyLogo(x) → InCompany(x))', '∀x (CompanyLogo(x) ∨ Employee(x))', '∀x (Employee(x) → Wifi(x))', '∀x (GoogleHome(x) → ControlledByManager(x))', '∀x (Wifi(x) → EasyToOperate(x))', '∀x (EasyToOperate(x) → ProducedAfter2020(x))', '¬ProducedAfter2020(iPod1)']	False	hyb
266	715	Some CD players are suitable toys for children.	['All CD players are delicate mechanisms.', 'No delicate mechanisms are suitable toys for children.']	['∀x (CDPlayer(x) → DelicateMechanism(x))', '∀x (DelicateMechanism(x) → ¬SuitableToyForChildren(x))']	Unknown	wiki
347	921	Jumbo is sleepy.	['All mammals are living beings.', 'All elephants are mammals.', 'All baby elephants are elephants.', 'Some baby elephants are sleepy.', 'If Jumbo is a living being, then Jumbo is not an elephant or a mammal.', 'If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant.']	['∀x (Mammal(x) → LivingBeing(x)) ', '∀x (Elephant(x) → Mammal(x))', '∀x (BabyElephant(x) → Elephant(x))', '∃x (BabyElephant(x) ∧ Sleepy(x))', 'LivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))', 'Sleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)']	False	hyb
347	922	Jumbo is not sleepy.	['All mammals are living beings.', 'All elephants are mammals.', 'All baby elephants are elephants.', 'Some baby elephants are sleepy.', 'If Jumbo is a living being, then Jumbo is not an elephant or a mammal.', 'If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant.']	['∀x (Mammal(x) → LivingBeing(x)) ', '∀x (Elephant(x) → Mammal(x))', '∀x (BabyElephant(x) → Elephant(x))', '∃x (BabyElephant(x) ∧ Sleepy(x))', 'LivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))', 'Sleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)']	True	hyb
347	923	Jumbo is a living being.	['All mammals are living beings.', 'All elephants are mammals.', 'All baby elephants are elephants.', 'Some baby elephants are sleepy.', 'If Jumbo is a living being, then Jumbo is not an elephant or a mammal.', 'If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant.']	['∀x (Mammal(x) → LivingBeing(x)) ', '∀x (Elephant(x) → Mammal(x))', '∀x (BabyElephant(x) → Elephant(x))', '∃x (BabyElephant(x) ∧ Sleepy(x))', 'LivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))', 'Sleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)']	Unknown	hyb
347	924	Jumbo is neither sleepy nor a baby elephant.	['All mammals are living beings.', 'All elephants are mammals.', 'All baby elephants are elephants.', 'Some baby elephants are sleepy.', 'If Jumbo is a living being, then Jumbo is not an elephant or a mammal.', 'If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant.']	['∀x (Mammal(x) → LivingBeing(x)) ', '∀x (Elephant(x) → Mammal(x))', '∀x (BabyElephant(x) → Elephant(x))', '∃x (BabyElephant(x) ∧ Sleepy(x))', 'LivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))', 'Sleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)']	True	hyb
347	925	Jumbo is not sleepy or an elephant.	['All mammals are living beings.', 'All elephants are mammals.', 'All baby elephants are elephants.', 'Some baby elephants are sleepy.', 'If Jumbo is a living being, then Jumbo is not an elephant or a mammal.', 'If Jumbo is sleepy, then Jumbo is a baby elephant or an elephant.']	['∀x (Mammal(x) → LivingBeing(x)) ', '∀x (Elephant(x) → Mammal(x))', '∀x (BabyElephant(x) → Elephant(x))', '∃x (BabyElephant(x) ∧ Sleepy(x))', 'LivingBeing(jumbo) → ¬(Elephant(jumbo) ∨ Mammal(jumbo))', 'Sleepy(jumbo) → BabyElephant(jumbo) ∨ Mammal(jumbo)']	True	hyb
447	1291	Jill works at a school.	['No faculty does homework.', 'All students do homework.', 'All kids are students.', 'If someone works at a school, then they are faculty.', 'If Jill works at a school or is a teacher, then Jill works at a school.']	['∀x (Faculty(x) → ¬DoesHomework(x))', '∀x (Student(x) → DoesHomework(x))', '∀x (Kid(x) → Student(x))', '∀x (WorkAtSchool(x) → Faculty(x))', 'WorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)']	Unknown	hyb
447	1292	Jill is a kid.	['No faculty does homework.', 'All students do homework.', 'All kids are students.', 'If someone works at a school, then they are faculty.', 'If Jill works at a school or is a teacher, then Jill works at a school.']	['∀x (Faculty(x) → ¬DoesHomework(x))', '∀x (Student(x) → DoesHomework(x))', '∀x (Kid(x) → Student(x))', '∀x (WorkAtSchool(x) → Faculty(x))', 'WorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)']	False	hyb
447	1293	Jill is not a kid.	['No faculty does homework.', 'All students do homework.', 'All kids are students.', 'If someone works at a school, then they are faculty.', 'If Jill works at a school or is a teacher, then Jill works at a school.']	['∀x (Faculty(x) → ¬DoesHomework(x))', '∀x (Student(x) → DoesHomework(x))', '∀x (Kid(x) → Student(x))', '∀x (WorkAtSchool(x) → Faculty(x))', 'WorkAtSchool(jill) ∨ DoesHomework(jill) → WorkAtSchool(jill)']	True	hyb
353	941	“As it was” by Harry Styles needs to be written with words.	['Either Max listens to classical music or Max listens to rap. ', 'All the songs that Max listens to that are classical music are from the 12th century.', 'If the song Max listens to is rap, then the song is from Kanye West. ', 'If a songs is from Kanye West, then the song is full of lyrics. ', 'All songs that are full of lyrics need to be written with words', 'If “As it was” by Harry Styles is classical music that Max listens to or  from the 12th century, then “As it was” by Harry Styles is either classical music that Max listens to, or the songs are from 12th century.']	['∀x (MaxListensToClassicalMusic(x) ∨ MaxListensToRap(x))', '∀x (MaxListensToClassicalMusic(x) → SongsFrom12thCentury(x))', '∀x (MaxListensToRap(x) → SongsFromKanyeWest(x))', '∀x (SongsFromKanyeWest(x) → SongsFullOfLyrics(x))', '∀x (SongsFullOfLyrics(x) → NeedToBeWrittenWithWords(x))', 'MaxListensToClassicalMusic(asItWasByHarryStyles) ∨ SongsFrom12thCentury(asItWasByHarryStyles) → MaxListensToClassicalMusic(asItWasByHarryStyles) ⊕ SongsFrom12thCentury(asItWasByHarryStyles)']	True	hyb
353	942	"As it was” by Harry Styles is a song from the 12th century.	['Either Max listens to classical music or Max listens to rap. ', 'All the songs that Max listens to that are classical music are from the 12th century.', 'If the song Max listens to is rap, then the song is from Kanye West. ', 'If a songs is from Kanye West, then the song is full of lyrics. ', 'All songs that are full of lyrics need to be written with words', 'If “As it was” by Harry Styles is classical music that Max listens to or  from the 12th century, then “As it was” by Harry Styles is either classical music that Max listens to, or the songs are from 12th century.']	['∀x (MaxListensToClassicalMusic(x) ∨ MaxListensToRap(x))', '∀x (MaxListensToClassicalMusic(x) → SongsFrom12thCentury(x))', '∀x (MaxListensToRap(x) → SongsFromKanyeWest(x))', '∀x (SongsFromKanyeWest(x) → SongsFullOfLyrics(x))', '∀x (SongsFullOfLyrics(x) → NeedToBeWrittenWithWords(x))', 'MaxListensToClassicalMusic(asItWasByHarryStyles) ∨ SongsFrom12thCentury(asItWasByHarryStyles) → MaxListensToClassicalMusic(asItWasByHarryStyles) ⊕ SongsFrom12thCentury(asItWasByHarryStyles)']	Unknown	hyb
353	943	"As it was” by Harry Styles is not a song from Kanye West and needs to be written with words.	['Either Max listens to classical music or Max listens to rap. ', 'All the songs that Max listens to that are classical music are from the 12th century.', 'If the song Max listens to is rap, then the song is from Kanye West. ', 'If a songs is from Kanye West, then the song is full of lyrics. ', 'All songs that are full of lyrics need to be written with words', 'If “As it was” by Harry Styles is classical music that Max listens to or  from the 12th century, then “As it was” by Harry Styles is either classical music that Max listens to, or the songs are from 12th century.']	['∀x (MaxListensToClassicalMusic(x) ∨ MaxListensToRap(x))', '∀x (MaxListensToClassicalMusic(x) → SongsFrom12thCentury(x))', '∀x (MaxListensToRap(x) → SongsFromKanyeWest(x))', '∀x (SongsFromKanyeWest(x) → SongsFullOfLyrics(x))', '∀x (SongsFullOfLyrics(x) → NeedToBeWrittenWithWords(x))', 'MaxListensToClassicalMusic(asItWasByHarryStyles) ∨ SongsFrom12thCentury(asItWasByHarryStyles) → MaxListensToClassicalMusic(asItWasByHarryStyles) ⊕ SongsFrom12thCentury(asItWasByHarryStyles)']	False	hyb
39	114	"Your Woman" was extremely popular.	['"Your Woman" is a song by British one-man band White Town.', '"Your Woman" song peaked at No. 1 on the UK Singles Chart.', 'If a song peaked at No.1 at a cetain place, then it was extremely popular.', '"Your Woman" also peaked No. 1 in Iceland, Israel and Spain.']	['Produce(whiteTown, yourWoman)', 'Peak(yourWoman, uKSinglesChart)', '∀x ∀y (Peak(x, y) → Popular(x))', 'Peak(yourWoman, iceland) ∧ Peak(yourWoman, isarel) ∧ Peak(yourWoman, spain)']	True	wiki
39	115	White Town did not produce any popular song.	['"Your Woman" is a song by British one-man band White Town.', '"Your Woman" song peaked at No. 1 on the UK Singles Chart.', 'If a song peaked at No.1 at a cetain place, then it was extremely popular.', '"Your Woman" also peaked No. 1 in Iceland, Israel and Spain.']	['Produce(whiteTown, yourWoman)', 'Peak(yourWoman, uKSinglesChart)', '∀x ∀y (Peak(x, y) → Popular(x))', 'Peak(yourWoman, iceland) ∧ Peak(yourWoman, isarel) ∧ Peak(yourWoman, spain)']	False	wiki
39	116	White Town was a successful band.	['"Your Woman" is a song by British one-man band White Town.', '"Your Woman" song peaked at No. 1 on the UK Singles Chart.', 'If a song peaked at No.1 at a cetain place, then it was extremely popular.', '"Your Woman" also peaked No. 1 in Iceland, Israel and Spain.']	['Produce(whiteTown, yourWoman)', 'Peak(yourWoman, uKSinglesChart)', '∀x ∀y (Peak(x, y) → Popular(x))', 'Peak(yourWoman, iceland) ∧ Peak(yourWoman, isarel) ∧ Peak(yourWoman, spain)']	Unknown	wiki
374	1001	Mark limps often and regularly.	['All people who limp often and regularly have long-term medical issues with underlying causes.', 'If people have long-term medical issues with underlying causes, then they are not often spry and energetic.', 'People either stay indoors and rest a lot at home or people are often tired and disinterested in their activities.', 'If people stay indoors and rest a lot at home, then they do not visit the gym at least once a day.', 'If Mark either limps often and regularly or is often spry and energetic, then Mark limps often and regularly or is often tired and disinterested in his activities.']	['∀x (Limp(x) → Medical(x))', '∀x (Medical(x) → ¬Spry(x))', '∀x (Spry(x) ⊕ Tired(x)) ∧ (∀x (Tired(x) → Indoors(x)))', '∀x (Indoors(x) → ¬Gym(x))', '(Limp(Mark) ⊕ Spry(Mark)) → Limp(Mark) ∨ Tired(Mark)']	Unknown	hyb
374	1002	Mark visits the gym at least once a day.	['All people who limp often and regularly have long-term medical issues with underlying causes.', 'If people have long-term medical issues with underlying causes, then they are not often spry and energetic.', 'People either stay indoors and rest a lot at home or people are often tired and disinterested in their activities.', 'If people stay indoors and rest a lot at home, then they do not visit the gym at least once a day.', 'If Mark either limps often and regularly or is often spry and energetic, then Mark limps often and regularly or is often tired and disinterested in his activities.']	['∀x (Limp(x) → Medical(x))', '∀x (Medical(x) → ¬Spry(x))', '∀x (Spry(x) ⊕ Tired(x)) ∧ (∀x (Tired(x) → Indoors(x)))', '∀x (Indoors(x) → ¬Gym(x))', '(Limp(Mark) ⊕ Spry(Mark)) → Limp(Mark) ∨ Tired(Mark)']	False	hyb
374	1003	Mark stays indoors and rests regularly at his home or visits the gym at least once a day.	['All people who limp often and regularly have long-term medical issues with underlying causes.', 'If people have long-term medical issues with underlying causes, then they are not often spry and energetic.', 'People either stay indoors and rest a lot at home or people are often tired and disinterested in their activities.', 'If people stay indoors and rest a lot at home, then they do not visit the gym at least once a day.', 'If Mark either limps often and regularly or is often spry and energetic, then Mark limps often and regularly or is often tired and disinterested in his activities.']	['∀x (Limp(x) → Medical(x))', '∀x (Medical(x) → ¬Spry(x))', '∀x (Spry(x) ⊕ Tired(x)) ∧ (∀x (Tired(x) → Indoors(x)))', '∀x (Indoors(x) → ¬Gym(x))', '(Limp(Mark) ⊕ Spry(Mark)) → Limp(Mark) ∨ Tired(Mark)']	True	hyb
188	543	Real Madrid and Atlético Madrid needed to play a penalty shoot-out in 2016 UCL final.	['If two soccer teams score the same number of goals in one UCL final during the regular time, they need to play for the extra time.', 'If two soccer teams score the same number of goals in one UCL final during both the regular time and extra time, they need to play the penalty shoot-out.', 'Real Madrid and Atlético Madrid both scored one goal in 2016 UCL final during the regular time.', 'Real Madrid and Atlético Madrid both scored zero goals in 2016 UCL final during the extra time.']	['∀x ∀y (SoccerTeam(x) ∧ SoccerTeam(y) ∧ SameScore(x, y) ∧ During(regularTime) → PlayExtra(x, y))', '∀x ∀y (SoccerTeam(x) ∧ SoccerTeam(y) ∧ SameScore(x, y) ∧ During(regularTime) ∧ During(extraTime) → PlayPenalty(x, y))', 'SoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(regularTime)', 'SoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(extraTime)']	True	wiki
188	544	Real Madrid and Atlético Madrid did not need to play a penalty shoot-out in 2016 UCL final.	['If two soccer teams score the same number of goals in one UCL final during the regular time, they need to play for the extra time.', 'If two soccer teams score the same number of goals in one UCL final during both the regular time and extra time, they need to play the penalty shoot-out.', 'Real Madrid and Atlético Madrid both scored one goal in 2016 UCL final during the regular time.', 'Real Madrid and Atlético Madrid both scored zero goals in 2016 UCL final during the extra time.']	['∀x ∀y (SoccerTeam(x) ∧ SoccerTeam(y) ∧ SameScore(x, y) ∧ During(regularTime) → PlayExtra(x, y))', '∀x ∀y (SoccerTeam(x) ∧ SoccerTeam(y) ∧ SameScore(x, y) ∧ During(regularTime) ∧ During(extraTime) → PlayPenalty(x, y))', 'SoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(regularTime)', 'SoccerTeam(realMadrid) ∧ SoccerTeam(atleticoMadrid) ∧ SameScore(realMadrid, atleticoMadrid) ∧ During(extraTime)']	False	wiki
13	35	System 7 was formed by former members of Gong.	['System 7 is a UK-based electronic dance music band.', 'Steve Hillage and Miquette Giraudy formed System 7.', 'Steve Hillage and Miquette Giraudy are former members of the band Gong.', 'Electric dance music bands are bands.', 'System 7 has released several club singles.', 'Club singles are not singles.']	['BasedOn(system7, uk) ∧ ElectronicDanceMusicBand(system7)', 'Formed(stevehillage, system7) ∧ Formed(miquettegiraudy, system7)', 'FormerMemberOf(stevehillage, gong) ∧ FormerMemberOf(miquettegiraudy, gong)', '∀x (ElectronicDanceMusicBand(x) → Band(x))', '∃x (ClubSingle(x) ∧ Released(system7, x))', '∀x (ClubSingle(x) → ¬Single(x))']	True	wiki
13	36	System 7 has released several singles.	['System 7 is a UK-based electronic dance music band.', 'Steve Hillage and Miquette Giraudy formed System 7.', 'Steve Hillage and Miquette Giraudy are former members of the band Gong.', 'Electric dance music bands are bands.', 'System 7 has released several club singles.', 'Club singles are not singles.']	['BasedOn(system7, uk) ∧ ElectronicDanceMusicBand(system7)', 'Formed(stevehillage, system7) ∧ Formed(miquettegiraudy, system7)', 'FormerMemberOf(stevehillage, gong) ∧ FormerMemberOf(miquettegiraudy, gong)', '∀x (ElectronicDanceMusicBand(x) → Band(x))', '∃x (ClubSingle(x) ∧ Released(system7, x))', '∀x (ClubSingle(x) → ¬Single(x))']	Unknown	wiki
13	37	System 7 is not a band.	['System 7 is a UK-based electronic dance music band.', 'Steve Hillage and Miquette Giraudy formed System 7.', 'Steve Hillage and Miquette Giraudy are former members of the band Gong.', 'Electric dance music bands are bands.', 'System 7 has released several club singles.', 'Club singles are not singles.']	['BasedOn(system7, uk) ∧ ElectronicDanceMusicBand(system7)', 'Formed(stevehillage, system7) ∧ Formed(miquettegiraudy, system7)', 'FormerMemberOf(stevehillage, gong) ∧ FormerMemberOf(miquettegiraudy, gong)', '∀x (ElectronicDanceMusicBand(x) → Band(x))', '∃x (ClubSingle(x) ∧ Released(system7, x))', '∀x (ClubSingle(x) → ¬Single(x))']	False	wiki
189	545	Extractive models are always faithful.	['A summarization model is always faithful if it uses content from the input documents.', 'Extractive models are a kind of summarization models.', 'Extractive model can only use content from the input documents.']	['∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))', '∀x (Model(x) ∧ Extractive(x) → Summarization(x))', '∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))']	True	wiki
189	546	Extractive models are not always faithful.	['A summarization model is always faithful if it uses content from the input documents.', 'Extractive models are a kind of summarization models.', 'Extractive model can only use content from the input documents.']	['∀x (Model(x) ∧ Summarization(x) ∧ OnlyUseInputDocument(x) → Faithful(x))', '∀x (Model(x) ∧ Extractive(x) → Summarization(x))', '∀x (Model(x) ∧ Extractive(x) → OnlyUseInputDocument(x))']	False	wiki
370	989	Robin is a person who studies hard.	['If people practice coding questions, then they are not studying to go to medical school to become a doctor.', 'If people want to work in the software engineering industry, then they practice coding questions.', 'If people enjoy healthcare fields and want to help people with medical issues, then they are studying to go to medical school to become a doctor.', 'If people grew up with parents who worked as doctors, then they enjoy healthcare fields and want to help people with medical issues.', 'If people study hard, then they grew up with parents who worked as doctors.', 'If Robin neither enjoys healthcare fields and wants to help people with medical issues nor grew up with parents who worked as doctors, then Robin is either a person who studies hard or grew up with parents who worked as doctors.']	['∀x Coding(x) → ¬StudyingToBeDoctor(x)', '∀x Industry(x) → Coding(x)', '∀x Healthcare(x) → StudyingToBeDoctor(x)', '∀x ParentDoctors(x) → Healthcare(x)', '∀x Study(x) → ParentDoctors(x)', '¬(Healthcare(Robin) ∨ ParentDoctors(Robin)) → (Study(Robin) ∨ ParentDoctors(Robin)) ']	Unknown	hyb
370	990	Robin practices coding questions and wants to work in the software engineering industry.	['If people practice coding questions, then they are not studying to go to medical school to become a doctor.', 'If people want to work in the software engineering industry, then they practice coding questions.', 'If people enjoy healthcare fields and want to help people with medical issues, then they are studying to go to medical school to become a doctor.', 'If people grew up with parents who worked as doctors, then they enjoy healthcare fields and want to help people with medical issues.', 'If people study hard, then they grew up with parents who worked as doctors.', 'If Robin neither enjoys healthcare fields and wants to help people with medical issues nor grew up with parents who worked as doctors, then Robin is either a person who studies hard or grew up with parents who worked as doctors.']	['∀x Coding(x) → ¬StudyingToBeDoctor(x)', '∀x Industry(x) → Coding(x)', '∀x Healthcare(x) → StudyingToBeDoctor(x)', '∀x ParentDoctors(x) → Healthcare(x)', '∀x Study(x) → ParentDoctors(x)', '¬(Healthcare(Robin) ∨ ParentDoctors(Robin)) → (Study(Robin) ∨ ParentDoctors(Robin)) ']	False	hyb
370	991	Robin neither practices coding questions nor works to work in the software engineering industry.	['If people practice coding questions, then they are not studying to go to medical school to become a doctor.', 'If people want to work in the software engineering industry, then they practice coding questions.', 'If people enjoy healthcare fields and want to help people with medical issues, then they are studying to go to medical school to become a doctor.', 'If people grew up with parents who worked as doctors, then they enjoy healthcare fields and want to help people with medical issues.', 'If people study hard, then they grew up with parents who worked as doctors.', 'If Robin neither enjoys healthcare fields and wants to help people with medical issues nor grew up with parents who worked as doctors, then Robin is either a person who studies hard or grew up with parents who worked as doctors.']	['∀x Coding(x) → ¬StudyingToBeDoctor(x)', '∀x Industry(x) → Coding(x)', '∀x Healthcare(x) → StudyingToBeDoctor(x)', '∀x ParentDoctors(x) → Healthcare(x)', '∀x Study(x) → ParentDoctors(x)', '¬(Healthcare(Robin) ∨ ParentDoctors(Robin)) → (Study(Robin) ∨ ParentDoctors(Robin)) ']	True	hyb
383	1028	Jess frivolously spends a lot of money every time they go out.	['If people go to the spa at least once a week, then they are not people who are miserly and need to save a large portion of their income.', 'People are either miserly and need to save a large portion of their income, or people that frivolously spend a lot of money every time they go out.', 'If people frivolously spend a lot of money every time they go out, then they value quality manufacturing and luxury items.', 'If people value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.', 'If Jess is not miserly and needs to save a large portion of their income, then Jess does not value quality manufacturing and luxury items.', 'If Jess either values quality manufacturing and luxury items or, if he does not, then he is miserly and needs to save a large portion of his income, then Jess frivolously spends a lot of money every time he goes out.']	['∀x Spa(x) → ¬Miserly(x)', '∀x Miserly(x) ∨ Frivolous(x)', '∀x Frivolous(x) → Luxury(x)', '∀x Luxury(x) → Shopping(x)', '¬Miserly(Jess) → ¬Luxury(Jess)', 'Luxury(Jess) ⊕ Miserly(Jess)) →  Luxury(Jess)']	Unknown	hyb
383	1029	Jess either enjoys shopping for materialistic items in his free time or, if he does not, then he goes to the spa at least once a week.	['If people go to the spa at least once a week, then they are not people who are miserly and need to save a large portion of their income.', 'People are either miserly and need to save a large portion of their income, or people that frivolously spend a lot of money every time they go out.', 'If people frivolously spend a lot of money every time they go out, then they value quality manufacturing and luxury items.', 'If people value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.', 'If Jess is not miserly and needs to save a large portion of their income, then Jess does not value quality manufacturing and luxury items.', 'If Jess either values quality manufacturing and luxury items or, if he does not, then he is miserly and needs to save a large portion of his income, then Jess frivolously spends a lot of money every time he goes out.']	['∀x Spa(x) → ¬Miserly(x)', '∀x Miserly(x) ∨ Frivolous(x)', '∀x Frivolous(x) → Luxury(x)', '∀x Luxury(x) → Shopping(x)', '¬Miserly(Jess) → ¬Luxury(Jess)', 'Luxury(Jess) ⊕ Miserly(Jess)) →  Luxury(Jess)']	True	hyb
383	1030	If Jess either enjoys shopping for materialistic items in his free time or, if he does not, then he goes to the spa at least once a week, then Jess neither values quality manufacturing and luxury items nor goes to the spa at least once a week.	['If people go to the spa at least once a week, then they are not people who are miserly and need to save a large portion of their income.', 'People are either miserly and need to save a large portion of their income, or people that frivolously spend a lot of money every time they go out.', 'If people frivolously spend a lot of money every time they go out, then they value quality manufacturing and luxury items.', 'If people value quality manufacturing and luxury items, then they enjoy shopping for materialistic items in their free time.', 'If Jess is not miserly and needs to save a large portion of their income, then Jess does not value quality manufacturing and luxury items.', 'If Jess either values quality manufacturing and luxury items or, if he does not, then he is miserly and needs to save a large portion of his income, then Jess frivolously spends a lot of money every time he goes out.']	['∀x Spa(x) → ¬Miserly(x)', '∀x Miserly(x) ∨ Frivolous(x)', '∀x Frivolous(x) → Luxury(x)', '∀x Luxury(x) → Shopping(x)', '¬Miserly(Jess) → ¬Luxury(Jess)', 'Luxury(Jess) ⊕ Miserly(Jess)) →  Luxury(Jess)']	False	hyb
220	628	The album "Wolfgang Amadeus Phoenix" is a certified gold album.	['The indie pop band Phoenix has released 6 albums. ', 'Phoenix\'s album "Wolfgang Amadeus Phoenix" sold over 500,000 copies. ', 'A certified gold album or single is one which sold over half a million copies. ', '"1901" is a single from Phoenix\'s album "Wolfgang Amadeus Phoenix."', 'Over 400,000 copies of "1901" have been sold. ']	['AlbumsReleased(phoenix, l6)', 'Album(wolfgangamadeusphoenix) ∧ IsAlbumOf(wolfgangamadeusphoenix, phoenix) ∧ SoldOver(wolfgangamadeusphoenix, l500000)', '∀x ((Album(x) ∨ Single(x)) ∧ SoldOver(x, l500000) → CertifiedGold(x))', 'Single(l1901) ∧ From(l1901, wolfgangamadeusphoenix) ∧ By(l1901, phoenix)', 'SoldOver(l1901, l400000)']	True	wiki
220	629	The single "1901" is a certified gold single.	['The indie pop band Phoenix has released 6 albums. ', 'Phoenix\'s album "Wolfgang Amadeus Phoenix" sold over 500,000 copies. ', 'A certified gold album or single is one which sold over half a million copies. ', '"1901" is a single from Phoenix\'s album "Wolfgang Amadeus Phoenix."', 'Over 400,000 copies of "1901" have been sold. ']	['AlbumsReleased(phoenix, l6)', 'Album(wolfgangamadeusphoenix) ∧ IsAlbumOf(wolfgangamadeusphoenix, phoenix) ∧ SoldOver(wolfgangamadeusphoenix, l500000)', '∀x ((Album(x) ∨ Single(x)) ∧ SoldOver(x, l500000) → CertifiedGold(x))', 'Single(l1901) ∧ From(l1901, wolfgangamadeusphoenix) ∧ By(l1901, phoenix)', 'SoldOver(l1901, l400000)']	Unknown	wiki
5	11	If the Hulk does not wake up, then Thor is not happy.	['Peter Parker is a either a superhero or a civilian.', 'The Hulk is a destroyer.', 'The Hulk wakes up when he is angry.', 'If the Hulk wakes up, then he will break a bridge.', 'Thor is a god.', 'Thor will break a bridge when he is happy.', 'A god is not a destroyer and a destroyer is not a god.', 'Peter Parker wears a uniform when he is a superhero.', 'Peter Parker is not a civilian if and only if a destroyer is breaking a bridge.', 'If Thor is happy, the Hulk is angry.']	['Superhero(peter) ⊕ Civilian(peter)', 'Destroyer(hulk)', 'Angry(hulk) → Wake(hulk)', 'Wake(hulk) → BreakBridge(hulk)', 'God(thor)', 'Happy(thor) → BreakBridge(thor)', '∀x (God(x) ↔ ¬Destroyer(x))', 'Superhero(peter) → WearUniform(peter)', '∀x (¬Civilian(peter) ↔ (Destroyer(x) ∧ BreakBridge(x)))', 'Happy(thor) → Angry(hulk)']	True	wiki
5	12	If Thor is happy, then Peter Parker wears a uniform.	['Peter Parker is a either a superhero or a civilian.', 'The Hulk is a destroyer.', 'The Hulk wakes up when he is angry.', 'If the Hulk wakes up, then he will break a bridge.', 'Thor is a god.', 'Thor will break a bridge when he is happy.', 'A god is not a destroyer and a destroyer is not a god.', 'Peter Parker wears a uniform when he is a superhero.', 'Peter Parker is not a civilian if and only if a destroyer is breaking a bridge.', 'If Thor is happy, the Hulk is angry.']	['Superhero(peter) ⊕ Civilian(peter)', 'Destroyer(hulk)', 'Angry(hulk) → Wake(hulk)', 'Wake(hulk) → BreakBridge(hulk)', 'God(thor)', 'Happy(thor) → BreakBridge(thor)', '∀x (God(x) ↔ ¬Destroyer(x))', 'Superhero(peter) → WearUniform(peter)', '∀x (¬Civilian(peter) ↔ (Destroyer(x) ∧ BreakBridge(x)))', 'Happy(thor) → Angry(hulk)']	True	wiki
5	13	If Thor is not happy, then no bridge will be broken.	['Peter Parker is a either a superhero or a civilian.', 'The Hulk is a destroyer.', 'The Hulk wakes up when he is angry.', 'If the Hulk wakes up, then he will break a bridge.', 'Thor is a god.', 'Thor will break a bridge when he is happy.', 'A god is not a destroyer and a destroyer is not a god.', 'Peter Parker wears a uniform when he is a superhero.', 'Peter Parker is not a civilian if and only if a destroyer is breaking a bridge.', 'If Thor is happy, the Hulk is angry.']	['Superhero(peter) ⊕ Civilian(peter)', 'Destroyer(hulk)', 'Angry(hulk) → Wake(hulk)', 'Wake(hulk) → BreakBridge(hulk)', 'God(thor)', 'Happy(thor) → BreakBridge(thor)', '∀x (God(x) ↔ ¬Destroyer(x))', 'Superhero(peter) → WearUniform(peter)', '∀x (¬Civilian(peter) ↔ (Destroyer(x) ∧ BreakBridge(x)))', 'Happy(thor) → Angry(hulk)']	Unknown	wiki
85	259	Diethylcarbamazine is not preferred for the treatment of river blindness.	['Diethylcarbamazine is a medication discovered in the year 1947.', 'Diethylcarbamazine can be used to treat river blindness.', 'The only preferred treatment for river blindness is ivermectin.', 'Diethylcarbamazine is not ivermectin.']	['∀x (Diethylcarbamazine(x) ∧ Medication(x) ∧ DiscoveredIn(x, year1947))', '∀x ∀y (Diethylcarbamazine(x) ∧ RiverBlindness(y) → Treats(x, y))', '∀x ∀y (RiverBlindness(y) ∧ PreferredTreatment(x, y) → Ivermectin(x))', '∀x (Diethylcarbamazine(x) → ¬Ivermectin(x))']	True	wiki
85	260	Diethylcarbamazine was often used to treat river blindness.	['Diethylcarbamazine is a medication discovered in the year 1947.', 'Diethylcarbamazine can be used to treat river blindness.', 'The only preferred treatment for river blindness is ivermectin.', 'Diethylcarbamazine is not ivermectin.']	['∀x (Diethylcarbamazine(x) ∧ Medication(x) ∧ DiscoveredIn(x, year1947))', '∀x ∀y (Diethylcarbamazine(x) ∧ RiverBlindness(y) → Treats(x, y))', '∀x ∀y (RiverBlindness(y) ∧ PreferredTreatment(x, y) → Ivermectin(x))', '∀x (Diethylcarbamazine(x) → ¬Ivermectin(x))']	Unknown	wiki
85	261	Diethylcarbamazine is used in the treatment of filariasis.	['Diethylcarbamazine is a medication discovered in the year 1947.', 'Diethylcarbamazine can be used to treat river blindness.', 'The only preferred treatment for river blindness is ivermectin.', 'Diethylcarbamazine is not ivermectin.']	['∀x (Diethylcarbamazine(x) ∧ Medication(x) ∧ DiscoveredIn(x, year1947))', '∀x ∀y (Diethylcarbamazine(x) ∧ RiverBlindness(y) → Treats(x, y))', '∀x ∀y (RiverBlindness(y) ∧ PreferredTreatment(x, y) → Ivermectin(x))', '∀x (Diethylcarbamazine(x) → ¬Ivermectin(x))']	Unknown	wiki
392	1062	Latent Dirichlet allocation model is implementing machine learning algorithms.	['All univariate analyses use a generalized linear model. ', 'All multivoxel (pattern) analyses are implementing machine learning algorithms.', 'All implementing machine learning algorithms are to learn and classify multivariate data.', 'The Latent Dirichlet allocation model uses a generalized linear model or a univariate analysis. ', 'If the Latent Dirichlet allocation model does not learn and classify multivariate data, then the Latent Dirichlet allocation model uses a generalized linear model and a multivoxel (pattern) analysis.']	['∀x (UnivariateAnalysis(x) → UsesGeneralizedLinearModel(x)) ', ' ∀x (MultivoxelPatternAnalysis(x) → ImplementingMachineLearningAlgorithms(x))', ' ∀x (ImplementingMachineLearningAlgorithms(x) → LearnAndClassifyMultivariateData(x)) ', ' UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∨ UnivariateAnalysis(latentDirichletAllocationModel)', ' ¬LearnAndClassifyMultivariateData(latentDirichletAllocationModel) → UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∧ MultivoxelPatternAnalysis(latentDirichletAllocationModel)']	Unknown	hyb
392	1063	Latent Dirichlet allocation model uses a generalized linear model and learns and classifies multivariate data.	['All univariate analyses use a generalized linear model. ', 'All multivoxel (pattern) analyses are implementing machine learning algorithms.', 'All implementing machine learning algorithms are to learn and classify multivariate data.', 'The Latent Dirichlet allocation model uses a generalized linear model or a univariate analysis. ', 'If the Latent Dirichlet allocation model does not learn and classify multivariate data, then the Latent Dirichlet allocation model uses a generalized linear model and a multivoxel (pattern) analysis.']	['∀x (UnivariateAnalysis(x) → UsesGeneralizedLinearModel(x)) ', ' ∀x (MultivoxelPatternAnalysis(x) → ImplementingMachineLearningAlgorithms(x))', ' ∀x (ImplementingMachineLearningAlgorithms(x) → LearnAndClassifyMultivariateData(x)) ', ' UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∨ UnivariateAnalysis(latentDirichletAllocationModel)', ' ¬LearnAndClassifyMultivariateData(latentDirichletAllocationModel) → UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∧ MultivoxelPatternAnalysis(latentDirichletAllocationModel)']	True	hyb
392	1064	Latent Dirichlet allocation model either uses a generalized linear model or learns and classifies multivariate data.	['All univariate analyses use a generalized linear model. ', 'All multivoxel (pattern) analyses are implementing machine learning algorithms.', 'All implementing machine learning algorithms are to learn and classify multivariate data.', 'The Latent Dirichlet allocation model uses a generalized linear model or a univariate analysis. ', 'If the Latent Dirichlet allocation model does not learn and classify multivariate data, then the Latent Dirichlet allocation model uses a generalized linear model and a multivoxel (pattern) analysis.']	['∀x (UnivariateAnalysis(x) → UsesGeneralizedLinearModel(x)) ', ' ∀x (MultivoxelPatternAnalysis(x) → ImplementingMachineLearningAlgorithms(x))', ' ∀x (ImplementingMachineLearningAlgorithms(x) → LearnAndClassifyMultivariateData(x)) ', ' UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∨ UnivariateAnalysis(latentDirichletAllocationModel)', ' ¬LearnAndClassifyMultivariateData(latentDirichletAllocationModel) → UsesGeneralizedLinearModel(latentDirichletAllocationModel) ∧ MultivoxelPatternAnalysis(latentDirichletAllocationModel)']	False	hyb
387	1040	Bladder cancer is mild.	['If something requires a medical diagnosis, then lab tests or imaging is required. ', 'All rare diseases require a medical diagnosis.', 'If something is mild, then no lab tests or imaging is required. ', 'All blood cancers are rare diseases.', 'All Leukemia is blood cancer. ', 'If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia.']	['∀x (RequiresAMedicalDiagnosis(x) → LabTestsOrImagingRequired(x)) ', '∀x (RareDiseases(x) → RequiresAMedicalDiagnosis(x))', '∀x (Mild(x) → ¬LabTestsOrImagingRequired(x)) ', '∀x (BloodCancer(x) → RareDiseases(x))', '∀x (Leukemia(x) → BloodCancer(x))', '¬(BloodCancer(bladderCancer) ⊕ Leukemia(bladderCancer)) → Leukemia(bladderCancer)']	False	hyb
387	1041	Bladder cancer is Leukemia.	['If something requires a medical diagnosis, then lab tests or imaging is required. ', 'All rare diseases require a medical diagnosis.', 'If something is mild, then no lab tests or imaging is required. ', 'All blood cancers are rare diseases.', 'All Leukemia is blood cancer. ', 'If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia.']	['∀x (RequiresAMedicalDiagnosis(x) → LabTestsOrImagingRequired(x)) ', '∀x (RareDiseases(x) → RequiresAMedicalDiagnosis(x))', '∀x (Mild(x) → ¬LabTestsOrImagingRequired(x)) ', '∀x (BloodCancer(x) → RareDiseases(x))', '∀x (Leukemia(x) → BloodCancer(x))', '¬(BloodCancer(bladderCancer) ⊕ Leukemia(bladderCancer)) → Leukemia(bladderCancer)']	Unknown	hyb
387	1042	Bladder cancer is either a rare disease or mild.	['If something requires a medical diagnosis, then lab tests or imaging is required. ', 'All rare diseases require a medical diagnosis.', 'If something is mild, then no lab tests or imaging is required. ', 'All blood cancers are rare diseases.', 'All Leukemia is blood cancer. ', 'If bladder cancer is either both blood cancer and Leukemia or neither blood cancer nor Leukemia, then bladder cancer is Leukemia.']	['∀x (RequiresAMedicalDiagnosis(x) → LabTestsOrImagingRequired(x)) ', '∀x (RareDiseases(x) → RequiresAMedicalDiagnosis(x))', '∀x (Mild(x) → ¬LabTestsOrImagingRequired(x)) ', '∀x (BloodCancer(x) → RareDiseases(x))', '∀x (Leukemia(x) → BloodCancer(x))', '¬(BloodCancer(bladderCancer) ⊕ Leukemia(bladderCancer)) → Leukemia(bladderCancer)']	True	hyb
390	1049	Lithium is a rare earth metal.	["No precious metals aren't scarce.", 'All non-rare earth metals are not scarce.', 'Either non-rare earth metals or rare earth metals. ', 'All rare earth metals can be used for batteries.', 'All rare earth metals are essential for electric vehicles.', 'Lithium is neither a non-rare earth metal nor essential for electric vehicles.']	['∀x (PreciousMetals(x) → ¬NotScarce(x))', ' ∀x (Non-rareEarthMetals(x) → NotScarce(x)) ', ' ∀x (Non-rareEarthMetals(x) ∨ RareEarthMetals(x)) ', ' ∀x (RareEarthMetals(x) → BeUsedForBatteries(x)) ', ' ∀x (RareEarthMetals(x) → EssentialForElectricVehicles(x))', ' ¬Non-rareEarthMetals(lithium) ⊕ ¬EssentialForElectricVehicles(lithium)']	Unknown	hyb
390	1050	Lithium is a precious metal and is used for batteries.	["No precious metals aren't scarce.", 'All non-rare earth metals are not scarce.', 'Either non-rare earth metals or rare earth metals. ', 'All rare earth metals can be used for batteries.', 'All rare earth metals are essential for electric vehicles.', 'Lithium is neither a non-rare earth metal nor essential for electric vehicles.']	['∀x (PreciousMetals(x) → ¬NotScarce(x))', ' ∀x (Non-rareEarthMetals(x) → NotScarce(x)) ', ' ∀x (Non-rareEarthMetals(x) ∨ RareEarthMetals(x)) ', ' ∀x (RareEarthMetals(x) → BeUsedForBatteries(x)) ', ' ∀x (RareEarthMetals(x) → EssentialForElectricVehicles(x))', ' ¬Non-rareEarthMetals(lithium) ⊕ ¬EssentialForElectricVehicles(lithium)']	False	hyb
390	1051	If Lithium is not essential for electric vehicles or a precious metal, then Lithium is not a non-rare earth metal or usable for batteries.	["No precious metals aren't scarce.", 'All non-rare earth metals are not scarce.', 'Either non-rare earth metals or rare earth metals. ', 'All rare earth metals can be used for batteries.', 'All rare earth metals are essential for electric vehicles.', 'Lithium is neither a non-rare earth metal nor essential for electric vehicles.']	['∀x (PreciousMetals(x) → ¬NotScarce(x))', ' ∀x (Non-rareEarthMetals(x) → NotScarce(x)) ', ' ∀x (Non-rareEarthMetals(x) ∨ RareEarthMetals(x)) ', ' ∀x (RareEarthMetals(x) → BeUsedForBatteries(x)) ', ' ∀x (RareEarthMetals(x) → EssentialForElectricVehicles(x))', ' ¬Non-rareEarthMetals(lithium) ⊕ ¬EssentialForElectricVehicles(lithium)']	True	hyb
332	863	Jack lives in the suburbs.	['If people own at least one pet, then they do not have tidy houses.', 'If people grew up with childhood pets, then they own at least one pet.', 'If people hire a maid or cleaning service, then they have tidy houses.', 'If people live in the suburbs, then they have tidy houses.', 'Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet.']	['∀x (OwnPet(x) → ¬TidyHouse(x))', '∀x (ChildhoodPet(x) → OwnPet(x))', '∀x (HireCleaning(x) → TidyHouse(x))', '∀x (Suburbs(x) → ChildhoodPet(x))', '¬(HireCleaning(jack) ⊕ OwnPet(jack))']	False	hyb
332	864	Jack does not live in the suburbs.	['If people own at least one pet, then they do not have tidy houses.', 'If people grew up with childhood pets, then they own at least one pet.', 'If people hire a maid or cleaning service, then they have tidy houses.', 'If people live in the suburbs, then they have tidy houses.', 'Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet.']	['∀x (OwnPet(x) → ¬TidyHouse(x))', '∀x (ChildhoodPet(x) → OwnPet(x))', '∀x (HireCleaning(x) → TidyHouse(x))', '∀x (Suburbs(x) → ChildhoodPet(x))', '¬(HireCleaning(jack) ⊕ OwnPet(jack))']	True	hyb
332	865	Jack has a tidy house.	['If people own at least one pet, then they do not have tidy houses.', 'If people grew up with childhood pets, then they own at least one pet.', 'If people hire a maid or cleaning service, then they have tidy houses.', 'If people live in the suburbs, then they have tidy houses.', 'Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet.']	['∀x (OwnPet(x) → ¬TidyHouse(x))', '∀x (ChildhoodPet(x) → OwnPet(x))', '∀x (HireCleaning(x) → TidyHouse(x))', '∀x (Suburbs(x) → ChildhoodPet(x))', '¬(HireCleaning(jack) ⊕ OwnPet(jack))']	Unknown	hyb
332	866	Jack neither lives in the suburbs nor owns at least one pet.	['If people own at least one pet, then they do not have tidy houses.', 'If people grew up with childhood pets, then they own at least one pet.', 'If people hire a maid or cleaning service, then they have tidy houses.', 'If people live in the suburbs, then they have tidy houses.', 'Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet.']	['∀x (OwnPet(x) → ¬TidyHouse(x))', '∀x (ChildhoodPet(x) → OwnPet(x))', '∀x (HireCleaning(x) → TidyHouse(x))', '∀x (Suburbs(x) → ChildhoodPet(x))', '¬(HireCleaning(jack) ⊕ OwnPet(jack))']	True	hyb
332	867	Jack grew up with childhood pets and lives in the suburbs.	['If people own at least one pet, then they do not have tidy houses.', 'If people grew up with childhood pets, then they own at least one pet.', 'If people hire a maid or cleaning service, then they have tidy houses.', 'If people live in the suburbs, then they have tidy houses.', 'Jack either does not hire a maid or cleaning service or, if he does, then he does not own at least one pet.']	['∀x (OwnPet(x) → ¬TidyHouse(x))', '∀x (ChildhoodPet(x) → OwnPet(x))', '∀x (HireCleaning(x) → TidyHouse(x))', '∀x (Suburbs(x) → ChildhoodPet(x))', '¬(HireCleaning(jack) ⊕ OwnPet(jack))']	False	hyb
278	727	The bottle is toppled over.	['A bottle is either standing upright or toppled over. ', 'The bottle is not upright.']	['Upright(bottle) ⊕ ToppledOver(bottle)', '¬Upright(bottle)']	True	wiki
359	957	John is good at staying organized and motivated.	['If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day.', 'All young children below the age of ten eat cereal and milk every day for breakfast.', 'People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.', 'If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.', 'If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated.', 'John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day.']	['∀x (Cereal(x) → BusyMorning(x))', '∀x (YoungChildren(x) → BusyMorning(x))', '∀x (YoungChildren(x) ⊕ Committments(x))', '∀x (Committments(x) → Hardworking(x))', '∀x (Hardworking(x) → ¬Organized(x))', '(Hardworking(john) ∧ BusyMorning(john)) ⊕ (¬Hardworking(john) ∧ ¬BusyMorning(john))']	False	hyb
359	958	John eats cereal and milk every day for breakfast.	['If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day.', 'All young children below the age of ten eat cereal and milk every day for breakfast.', 'People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.', 'If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.', 'If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated.', 'John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day.']	['∀x (Cereal(x) → BusyMorning(x))', '∀x (YoungChildren(x) → BusyMorning(x))', '∀x (YoungChildren(x) ⊕ Committments(x))', '∀x (Committments(x) → Hardworking(x))', '∀x (Hardworking(x) → ¬Organized(x))', '(Hardworking(john) ∧ BusyMorning(john)) ⊕ (¬Hardworking(john) ∧ ¬BusyMorning(john))']	Unknown	hyb
359	959	John is either a hardworking individual with high ambitions and goals for the future or is good at staying organized and motivated.	['If people eat cereal and milk every day for breakfast, then they have very busy morning schedules every day.', 'All young children below the age of ten eat cereal and milk every day for breakfast.', 'People are either young children below the age of ten or have a lot of commitments they voluntarily signed up for.', 'If people have a lot of commitments they voluntarily signed up for, then they are hardworking individuals with high ambitions and goals for the future.', 'If people are hardworking individuals with high ambitions and goals for the future, then they are not good at staying organized and motivated.', 'John either is both a hardworking individual with high ambitions and goals for the future and has busy morning schedules every day, or he is neither a hardworking individual with high ambitions and goals for the future nor does he have a busy morning schedule every day.']	['∀x (Cereal(x) → BusyMorning(x))', '∀x (YoungChildren(x) → BusyMorning(x))', '∀x (YoungChildren(x) ⊕ Committments(x))', '∀x (Committments(x) → Hardworking(x))', '∀x (Hardworking(x) → ¬Organized(x))', '(Hardworking(john) ∧ BusyMorning(john)) ⊕ (¬Hardworking(john) ∧ ¬BusyMorning(john))']	True	hyb
78	238	Ableton is a multinational company.	['Ableton has an office in Germany.', 'Ableton has an office in the USA.', 'USA and Germany are different countries.', 'Any company that has offices in different countries is a multinational company.', 'Ableton makes music software.']	['OfficeIn(ableton, germany)', 'OfficeIn(ableton, usa)', '¬SameCountry(germany, usa)', '∀x ∀y ∀z (OfficeIn(x, y) ∧ OfficeIn(x, z) ∧ ¬SameCountry(y, z) → IsMultinationalCompany(x))', 'MakesMusicSoftware(ableton)']	True	wiki
78	239	Ableton makes AI software.	['Ableton has an office in Germany.', 'Ableton has an office in the USA.', 'USA and Germany are different countries.', 'Any company that has offices in different countries is a multinational company.', 'Ableton makes music software.']	['OfficeIn(ableton, germany)', 'OfficeIn(ableton, usa)', '¬SameCountry(germany, usa)', '∀x ∀y ∀z (OfficeIn(x, y) ∧ OfficeIn(x, z) ∧ ¬SameCountry(y, z) → IsMultinationalCompany(x))', 'MakesMusicSoftware(ableton)']	Unknown	wiki
78	240	Ableton does not have an office in Germany.	['Ableton has an office in Germany.', 'Ableton has an office in the USA.', 'USA and Germany are different countries.', 'Any company that has offices in different countries is a multinational company.', 'Ableton makes music software.']	['OfficeIn(ableton, germany)', 'OfficeIn(ableton, usa)', '¬SameCountry(germany, usa)', '∀x ∀y ∀z (OfficeIn(x, y) ∧ OfficeIn(x, z) ∧ ¬SameCountry(y, z) → IsMultinationalCompany(x))', 'MakesMusicSoftware(ableton)']	False	wiki
450	1300	Fido eats fish they catch themselves.	['Every swimmer can go underwater.', 'Everyone that eats fish they catch themselves is a swimmer.', 'Every penguin eats fish they catch themselves.', 'All nonflying birds in Antarctica are penguins.', 'Fido is a penguin or a swimmer.']	['∀x (Swimmer(x) → GoesUnderwater(x))', '∀x (EatsFishCaughtThemselves(x) → Swimmer(x))', '∀x (Penguin(x) → EatsFishCaughtThemselves(x))', '∀x (NonFlyingBirdAntartica(x) → Penguin(x))', 'Penguin(fido) ∨ Swimmer(fido)']	Unknown	hyb
450	1301	Fido is neither a non-flying bird nor can Fido go underwater.	['Every swimmer can go underwater.', 'Everyone that eats fish they catch themselves is a swimmer.', 'Every penguin eats fish they catch themselves.', 'All nonflying birds in Antarctica are penguins.', 'Fido is a penguin or a swimmer.']	['∀x (Swimmer(x) → GoesUnderwater(x))', '∀x (EatsFishCaughtThemselves(x) → Swimmer(x))', '∀x (Penguin(x) → EatsFishCaughtThemselves(x))', '∀x (NonFlyingBirdAntartica(x) → Penguin(x))', 'Penguin(fido) ∨ Swimmer(fido)']	False	hyb
450	1302	If Fido can either go underwater or is a swimmer, then Fido is a nonflying bird in Antartica.	['Every swimmer can go underwater.', 'Everyone that eats fish they catch themselves is a swimmer.', 'Every penguin eats fish they catch themselves.', 'All nonflying birds in Antarctica are penguins.', 'Fido is a penguin or a swimmer.']	['∀x (Swimmer(x) → GoesUnderwater(x))', '∀x (EatsFishCaughtThemselves(x) → Swimmer(x))', '∀x (Penguin(x) → EatsFishCaughtThemselves(x))', '∀x (NonFlyingBirdAntartica(x) → Penguin(x))', 'Penguin(fido) ∨ Swimmer(fido)']	True	hyb
469	1359	Leon is a professor.	['All professors are teachers.', 'All researchers are professors.', 'No teachers are students.', 'All people who study are students.', 'Leon is not studying or a researcher.', 'If Leon is not studying, then Leon is a teacher.']	['∀x (Professor(x) → Teacher(x))', '∀x (Researcher(x) → Professor(x))', '∀x (Teacher(x) → ¬Student(x))', '∀x (Study(x) → Student(x))', '¬Study(leon) ⊕ Researcher(leon)', '¬Study(leon) → Teacher(leon)']	Unknown	hyb
469	1360	Leon is neither a student nor a researcher.	['All professors are teachers.', 'All researchers are professors.', 'No teachers are students.', 'All people who study are students.', 'Leon is not studying or a researcher.', 'If Leon is not studying, then Leon is a teacher.']	['∀x (Professor(x) → Teacher(x))', '∀x (Researcher(x) → Professor(x))', '∀x (Teacher(x) → ¬Student(x))', '∀x (Study(x) → Student(x))', '¬Study(leon) ⊕ Researcher(leon)', '¬Study(leon) → Teacher(leon)']	True	hyb
469	1361	If Leon is not a researcher, then Leon is a student.	['All professors are teachers.', 'All researchers are professors.', 'No teachers are students.', 'All people who study are students.', 'Leon is not studying or a researcher.', 'If Leon is not studying, then Leon is a teacher.']	['∀x (Professor(x) → Teacher(x))', '∀x (Researcher(x) → Professor(x))', '∀x (Teacher(x) → ¬Student(x))', '∀x (Study(x) → Student(x))', '¬Study(leon) ⊕ Researcher(leon)', '¬Study(leon) → Teacher(leon)']	False	hyb
114	345	No cutmen appear in boxing matches.	['A cutman is responsible for preventing and treating physical damage to a fighter.', 'Cutmen appear in matches such as a boxing, kickboxing or a mixed martial arts bout. ', 'Cutmen typically handle swelling, nosebleeds and lacerations. ', 'Jack is a cutman.']	['∀x (Cutman(x) → Prevent(x, physicalDamage) ∧ Treat(x, physicalDamage))', '∀x (Cutman(x) → Appear(x, boxing) ∨ Appear(x, kickboxing) ∨ Appear(x, mixedMartialBout))', '∀x (Cutman(x) → Handle(x, swelling) ∧ Handle(x, nosebleeds) ∧ Handle(x, lacerations))', 'Cutman(jack)']	Unknown	wiki
114	346	If someone is not a cutman, then they cannot handle nosebleeds.	['A cutman is responsible for preventing and treating physical damage to a fighter.', 'Cutmen appear in matches such as a boxing, kickboxing or a mixed martial arts bout. ', 'Cutmen typically handle swelling, nosebleeds and lacerations. ', 'Jack is a cutman.']	['∀x (Cutman(x) → Prevent(x, physicalDamage) ∧ Treat(x, physicalDamage))', '∀x (Cutman(x) → Appear(x, boxing) ∨ Appear(x, kickboxing) ∨ Appear(x, mixedMartialBout))', '∀x (Cutman(x) → Handle(x, swelling) ∧ Handle(x, nosebleeds) ∧ Handle(x, lacerations))', 'Cutman(jack)']	Unknown	wiki
114	347	Jack can treat physical damage.	['A cutman is responsible for preventing and treating physical damage to a fighter.', 'Cutmen appear in matches such as a boxing, kickboxing or a mixed martial arts bout. ', 'Cutmen typically handle swelling, nosebleeds and lacerations. ', 'Jack is a cutman.']	['∀x (Cutman(x) → Prevent(x, physicalDamage) ∧ Treat(x, physicalDamage))', '∀x (Cutman(x) → Appear(x, boxing) ∨ Appear(x, kickboxing) ∨ Appear(x, mixedMartialBout))', '∀x (Cutman(x) → Handle(x, swelling) ∧ Handle(x, nosebleeds) ∧ Handle(x, lacerations))', 'Cutman(jack)']	True	wiki
170	491	One of the world's best-known artworks is painted by a scientist.	["The Mona Lisa is one of the world's best-known artworks.", 'The Mona Lisa is a portrait painted by Leonardo da Vinci.', 'Leonardo da Vinci was a scientist and painter.', 'Painting genres are history, portrait, animal, landscape, and still life.']	['Painting(monaLisa) ∧ WorldsBestKnown(monaLisa)', 'PaintedBy(monaLisa, leonardodaVinci) ∧ Portrait(monaLisa)', 'Scientist(leonardodaVinci) ∧ Painter(leonardodaVinci)', '∀x (Painting(x) → (History(x) ∨ Portrait(x) ∨ Animal(x) ∨ Landscape(x) ∨ StillLife(x)))']	True	wiki
170	492	Leonardo da Vinci has artworks in the landscape genre.	["The Mona Lisa is one of the world's best-known artworks.", 'The Mona Lisa is a portrait painted by Leonardo da Vinci.', 'Leonardo da Vinci was a scientist and painter.', 'Painting genres are history, portrait, animal, landscape, and still life.']	['Painting(monaLisa) ∧ WorldsBestKnown(monaLisa)', 'PaintedBy(monaLisa, leonardodaVinci) ∧ Portrait(monaLisa)', 'Scientist(leonardodaVinci) ∧ Painter(leonardodaVinci)', '∀x (Painting(x) → (History(x) ∨ Portrait(x) ∨ Animal(x) ∨ Landscape(x) ∨ StillLife(x)))']	Unknown	wiki
170	493	No world's best-known artworks are portraits.	["The Mona Lisa is one of the world's best-known artworks.", 'The Mona Lisa is a portrait painted by Leonardo da Vinci.', 'Leonardo da Vinci was a scientist and painter.', 'Painting genres are history, portrait, animal, landscape, and still life.']	['Painting(monaLisa) ∧ WorldsBestKnown(monaLisa)', 'PaintedBy(monaLisa, leonardodaVinci) ∧ Portrait(monaLisa)', 'Scientist(leonardodaVinci) ∧ Painter(leonardodaVinci)', '∀x (Painting(x) → (History(x) ∨ Portrait(x) ∨ Animal(x) ∨ Landscape(x) ∨ StillLife(x)))']	False	wiki
339	892	Nadal is a Grand Slam umpire.	['No professional tennis umpires are professional tennis players.', 'If you are a World Tour player, then you are a professional tennis player.', 'All Grand Slam champions are World Tour players.', 'All Grand Slam umpires are professional tennis umpires.', 'Nadal is a World Tour player or a Grand Slam champion']	['∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))', '∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))', '∀x (GrandSlamChampion(x) → WorldTourPlayer(x))', '∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))', 'WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)']	False	hyb
339	893	Nadal is not a Grand Slam umpire.	['No professional tennis umpires are professional tennis players.', 'If you are a World Tour player, then you are a professional tennis player.', 'All Grand Slam champions are World Tour players.', 'All Grand Slam umpires are professional tennis umpires.', 'Nadal is a World Tour player or a Grand Slam champion']	['∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))', '∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))', '∀x (GrandSlamChampion(x) → WorldTourPlayer(x))', '∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))', 'WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)']	True	hyb
339	894	Nadal is a Grand Slam champion.	['No professional tennis umpires are professional tennis players.', 'If you are a World Tour player, then you are a professional tennis player.', 'All Grand Slam champions are World Tour players.', 'All Grand Slam umpires are professional tennis umpires.', 'Nadal is a World Tour player or a Grand Slam champion']	['∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))', '∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))', '∀x (GrandSlamChampion(x) → WorldTourPlayer(x))', '∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))', 'WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)']	Unknown	hyb
339	895	Nadal is neither a Grand Slam umpire nor a professional tennis umpire.	['No professional tennis umpires are professional tennis players.', 'If you are a World Tour player, then you are a professional tennis player.', 'All Grand Slam champions are World Tour players.', 'All Grand Slam umpires are professional tennis umpires.', 'Nadal is a World Tour player or a Grand Slam champion']	['∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))', '∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))', '∀x (GrandSlamChampion(x) → WorldTourPlayer(x))', '∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))', 'WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)']	True	hyb
339	896	If Nadal is a professional tennis umpire, then Nadal is a Grand Slam Umpire.	['No professional tennis umpires are professional tennis players.', 'If you are a World Tour player, then you are a professional tennis player.', 'All Grand Slam champions are World Tour players.', 'All Grand Slam umpires are professional tennis umpires.', 'Nadal is a World Tour player or a Grand Slam champion']	['∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))', '∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))', '∀x (GrandSlamChampion(x) → WorldTourPlayer(x))', '∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))', 'WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)']	True	hyb
339	897	If Nadal is a Grand Slam umpire or a professional tennis player, then Nadal is a Grand Slam umpire.	['No professional tennis umpires are professional tennis players.', 'If you are a World Tour player, then you are a professional tennis player.', 'All Grand Slam champions are World Tour players.', 'All Grand Slam umpires are professional tennis umpires.', 'Nadal is a World Tour player or a Grand Slam champion']	['∀x (ProfessionalTennisUmpire(x) → ¬ProfessionalTennisPlayer(x))', '∀x (WorldTourPlayer(x) → ProfessionalTennisPlayer(x))', '∀x (GrandSlamChampion(x) → WorldTourPlayer(x))', '∀x (GrandSlamUmpire(x) → ProfessionalTennisUmpire(x))', 'WorldTourPlayer(nadal) ∨ GrandSlamChampion(nadal)']	False	hyb
123	368	Crude Oil Data Exchange is sanctioned.	['Buisnesses are either sanctioned or unsanctioned.', 'Sanctioned buisnesses are limited.', 'Unsanctioned buisnesses are free.', "The Crude Oil Data Exchange is a buisness that isn't free."]	['∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))', '∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))', '∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))', 'Buisness(crudeoildataexchange) ∧ ¬Free(crudeoildataexchange)']	True	wiki
123	369	Crude Oil Data Exchange is unsanctioned.	['Buisnesses are either sanctioned or unsanctioned.', 'Sanctioned buisnesses are limited.', 'Unsanctioned buisnesses are free.', "The Crude Oil Data Exchange is a buisness that isn't free."]	['∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))', '∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))', '∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))', 'Buisness(crudeoildataexchange) ∧ ¬Free(crudeoildataexchange)']	False	wiki
123	370	Crude Oil Data Exchange is limited.	['Buisnesses are either sanctioned or unsanctioned.', 'Sanctioned buisnesses are limited.', 'Unsanctioned buisnesses are free.', "The Crude Oil Data Exchange is a buisness that isn't free."]	['∀x (Buisness(x) → Sanctioned(x) ⊕ ¬Sanctioned(x))', '∀x (Buisness(x) ∧ Sanctioned(x) → Limited(x))', '∀x (Buisness(x) ∧ ¬Sanctioned(x) → Free(x))', 'Buisness(crudeoildataexchange) ∧ ¬Free(crudeoildataexchange)']	True	wiki
301	750	V is invigorating	['When something is depressing, it is sad.', 'V is depressing. ']	['∀x (Depressing(x) → Sad(x))', '∀x (V(x) → Depressing(x))']	Unknown	wiki
103	314	John Evans Popularized the term paalstab.	['Palstaves are a type of early bronze axe.', 'Commonly found in northern, western and south-western Europe, palstaves are cast in moulds.', 'John Evans is an archeologist who popularized the term "palstave".', 'A paalstab is not an axe, but rather a digging shovel.']	['∀x (Palstave(x) → From(x, earlybronzeage) ∧ Axe(x))', '∀x ∀y (Palstave(x) ∧ Mould(y) → FoundIn(x, northerneurope) ∧ FoundIn(x, westerneurope) ∧ FoundIn(x, south-westerneurope) ∧ CastIn(x, y))', 'Archeologist(johnevans) ∧ Popularized(johnevans, termpalstave)', '∀x (Paalstab(x) → ¬Axe(x) ∧ DiggingShovel(x))']	Unknown	wiki
103	315	There is an axe that is commonly found in Western Europe.	['Palstaves are a type of early bronze axe.', 'Commonly found in northern, western and south-western Europe, palstaves are cast in moulds.', 'John Evans is an archeologist who popularized the term "palstave".', 'A paalstab is not an axe, but rather a digging shovel.']	['∀x (Palstave(x) → From(x, earlybronzeage) ∧ Axe(x))', '∀x ∀y (Palstave(x) ∧ Mould(y) → FoundIn(x, northerneurope) ∧ FoundIn(x, westerneurope) ∧ FoundIn(x, south-westerneurope) ∧ CastIn(x, y))', 'Archeologist(johnevans) ∧ Popularized(johnevans, termpalstave)', '∀x (Paalstab(x) → ¬Axe(x) ∧ DiggingShovel(x))']	Unknown	wiki
103	316	Archeologists haven't popularized anything.	['Palstaves are a type of early bronze axe.', 'Commonly found in northern, western and south-western Europe, palstaves are cast in moulds.', 'John Evans is an archeologist who popularized the term "palstave".', 'A paalstab is not an axe, but rather a digging shovel.']	['∀x (Palstave(x) → From(x, earlybronzeage) ∧ Axe(x))', '∀x ∀y (Palstave(x) ∧ Mould(y) → FoundIn(x, northerneurope) ∧ FoundIn(x, westerneurope) ∧ FoundIn(x, south-westerneurope) ∧ CastIn(x, y))', 'Archeologist(johnevans) ∧ Popularized(johnevans, termpalstave)', '∀x (Paalstab(x) → ¬Axe(x) ∧ DiggingShovel(x))']	False	wiki
90	274	Koei Tecmo holds another company.	['Koei Tecmo is a Japanese video game and anime holding company.', 'Holding companies hold several companies.', 'Tecmo was disbanded in Japan, while Koei survived, but was renamed.', 'Video game holding companies are holding companies.']	['Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)', '∀x ∃y (HoldingCompany(x) → Company(y) ∧ Holds(x, y))', 'Disbanded(tecmo) ∧ DisbandedIn(tecmo, japan) ∧ Survived(koei) ∧ Renamed(koei)', '∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))']	True	wiki
90	275	Tecmo holds another company.	['Koei Tecmo is a Japanese video game and anime holding company.', 'Holding companies hold several companies.', 'Tecmo was disbanded in Japan, while Koei survived, but was renamed.', 'Video game holding companies are holding companies.']	['Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)', '∀x ∃y (HoldingCompany(x) → Company(y) ∧ Holds(x, y))', 'Disbanded(tecmo) ∧ DisbandedIn(tecmo, japan) ∧ Survived(koei) ∧ Renamed(koei)', '∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))']	Unknown	wiki
90	276	Koei Tecmo holds anime.	['Koei Tecmo is a Japanese video game and anime holding company.', 'Holding companies hold several companies.', 'Tecmo was disbanded in Japan, while Koei survived, but was renamed.', 'Video game holding companies are holding companies.']	['Japanese(koeitecmo) ∧ VideoGameHoldingCompany(koeitecmo) ∧ AnimeHoldingCompany(koeitecmo)', '∀x ∃y (HoldingCompany(x) → Company(y) ∧ Holds(x, y))', 'Disbanded(tecmo) ∧ DisbandedIn(tecmo, japan) ∧ Survived(koei) ∧ Renamed(koei)', '∀x (VideoGameHoldingCompany(x) → HoldingCompany(x))']	Unknown	wiki
199	570	The Playstation Eye can be used with the Playstation 2 and the Playstation 3.	['The PlayStation EyeToy is a camera accessory for the Playstation 2. ', 'The PlayStation Eye is a camera accessory for the Playstation 3.', 'The Playstation Camera is a camera accessory for the Playstation 4 and the Playstation 5.', 'Camera accessory for the system is compatible with that system', 'Only the Playstation Camera is compatible with more than one system.']	['Accessory(pseyetoy, ps2)', 'Accessory(pseye, ps3)', 'Accessory(pscamera, ps4) ∧ Accessory(pscamera, ps5)', '∀x ∀y (Accessory(x, y) → Compatible(x, y))', '¬Compatible(pseye, ps2) ∧ ¬Compatible(pseye, ps4)∧¬Compatible(pseye, ps5)∧¬Compatible(pseyetoy, ps3)∧¬Compatible(pseyetoy, ps4)∧¬Compatible(pseyetoy, ps5)']	False	wiki
199	571	The Playstation EyeToy is compatible with the Playstation 2.	['The PlayStation EyeToy is a camera accessory for the Playstation 2. ', 'The PlayStation Eye is a camera accessory for the Playstation 3.', 'The Playstation Camera is a camera accessory for the Playstation 4 and the Playstation 5.', 'Camera accessory for the system is compatible with that system', 'Only the Playstation Camera is compatible with more than one system.']	['Accessory(pseyetoy, ps2)', 'Accessory(pseye, ps3)', 'Accessory(pscamera, ps4) ∧ Accessory(pscamera, ps5)', '∀x ∀y (Accessory(x, y) → Compatible(x, y))', '¬Compatible(pseye, ps2) ∧ ¬Compatible(pseye, ps4)∧¬Compatible(pseye, ps5)∧¬Compatible(pseyetoy, ps3)∧¬Compatible(pseyetoy, ps4)∧¬Compatible(pseyetoy, ps5)']	True	wiki
199	572	The Playstation Camera can be used for all Playstation consoles.	['The PlayStation EyeToy is a camera accessory for the Playstation 2. ', 'The PlayStation Eye is a camera accessory for the Playstation 3.', 'The Playstation Camera is a camera accessory for the Playstation 4 and the Playstation 5.', 'Camera accessory for the system is compatible with that system', 'Only the Playstation Camera is compatible with more than one system.']	['Accessory(pseyetoy, ps2)', 'Accessory(pseye, ps3)', 'Accessory(pscamera, ps4) ∧ Accessory(pscamera, ps5)', '∀x ∀y (Accessory(x, y) → Compatible(x, y))', '¬Compatible(pseye, ps2) ∧ ¬Compatible(pseye, ps4)∧¬Compatible(pseye, ps5)∧¬Compatible(pseyetoy, ps3)∧¬Compatible(pseyetoy, ps4)∧¬Compatible(pseyetoy, ps5)']	Unknown	wiki
274	723	Adam Buska plays what Americans call soccer.	['Adam Buska is a European football player.', 'If a European plays football, they play what Americans call soccer.']	['FootballPlayer(adambuska) ∧ European(adambuska)', '∀x ((FootballPlayer(x) ∧ European(x)) → PlaysAmericanSoccer(x))']	True	wiki
411	1157	FIFA21 is published before 2010	['If the game has sold more than 1 million copies, then it is on the Best Seller list. ', 'All Games developed by Paradox Development Studio sold more than 1 million copies. ', 'Some games published before 2010 support the Linux OS system. ', 'All games on the Best Seller list are popular among young people. ', 'FIFA22 neither supports the Linux OS system nor is it popular among young people.']	['∀x (SoldMillion(x) → BestSeller(x))', '∀x (DevelopedByParadox(x) → SoldMillion(x))', '∃x ((PublishedBefore2010(x) ∧ SupportLinuxSystem(x)))', '∀x (BestSeller(x) → Popular(x))', '¬(SupportLinuxSystem(fifa21) ∨ Popular(fifa21))']	Unknown	hyb
411	1158	FIFA21 is published before 2010 and developed by Paradox Development Studio	['If the game has sold more than 1 million copies, then it is on the Best Seller list. ', 'All Games developed by Paradox Development Studio sold more than 1 million copies. ', 'Some games published before 2010 support the Linux OS system. ', 'All games on the Best Seller list are popular among young people. ', 'FIFA22 neither supports the Linux OS system nor is it popular among young people.']	['∀x (SoldMillion(x) → BestSeller(x))', '∀x (DevelopedByParadox(x) → SoldMillion(x))', '∃x ((PublishedBefore2010(x) ∧ SupportLinuxSystem(x)))', '∀x (BestSeller(x) → Popular(x))', '¬(SupportLinuxSystem(fifa21) ∨ Popular(fifa21))']	False	hyb
411	1159	if FIFA21 is either a game published before 2010 or developed by Paradox Development Studio, then it is either in the Best Seller list and sold more than 1 million copies; or not in the Best Seller list and hasn't sold more than 1 million copies.	['If the game has sold more than 1 million copies, then it is on the Best Seller list. ', 'All Games developed by Paradox Development Studio sold more than 1 million copies. ', 'Some games published before 2010 support the Linux OS system. ', 'All games on the Best Seller list are popular among young people. ', 'FIFA22 neither supports the Linux OS system nor is it popular among young people.']	['∀x (SoldMillion(x) → BestSeller(x))', '∀x (DevelopedByParadox(x) → SoldMillion(x))', '∃x ((PublishedBefore2010(x) ∧ SupportLinuxSystem(x)))', '∀x (BestSeller(x) → Popular(x))', '¬(SupportLinuxSystem(fifa21) ∨ Popular(fifa21))']	True	hyb
206	593	All people from BRICS neither speak Hindi nor speak English.	['China is one of BRICS and its economy is emerging.', 'India is one of BRICS and its economy is emerging.', 'All people from China speak Chinese.', 'All people from India speak Hindi or English.', 'There is an Indian.']	['∀x (China(x) → BRICS(x) ∧ EmergingEconomy(x))', '∀x (India(x) → BRICS(x) ∧ EmergingEconomy(x))', '∀x ∀y (From(x, y) ∧ China(y) → Speak(x, chinese))', '∀x ∀y (From(x, y) ∧ India(y) → Speak(x, hindi) ∨ Speak(x, english))', '∃x ∃y (From(x, y) ∧ India(y))']	False	wiki
206	594	India's economy is not emerging.	['China is one of BRICS and its economy is emerging.', 'India is one of BRICS and its economy is emerging.', 'All people from China speak Chinese.', 'All people from India speak Hindi or English.', 'There is an Indian.']	['∀x (China(x) → BRICS(x) ∧ EmergingEconomy(x))', '∀x (India(x) → BRICS(x) ∧ EmergingEconomy(x))', '∀x ∀y (From(x, y) ∧ China(y) → Speak(x, chinese))', '∀x ∀y (From(x, y) ∧ India(y) → Speak(x, hindi) ∨ Speak(x, english))', '∃x ∃y (From(x, y) ∧ India(y))']	False	wiki
206	595	There is a person from BRICS speaking Hindi.	['China is one of BRICS and its economy is emerging.', 'India is one of BRICS and its economy is emerging.', 'All people from China speak Chinese.', 'All people from India speak Hindi or English.', 'There is an Indian.']	['∀x (China(x) → BRICS(x) ∧ EmergingEconomy(x))', '∀x (India(x) → BRICS(x) ∧ EmergingEconomy(x))', '∀x ∀y (From(x, y) ∧ China(y) → Speak(x, chinese))', '∀x ∀y (From(x, y) ∧ India(y) → Speak(x, hindi) ∨ Speak(x, english))', '∃x ∃y (From(x, y) ∧ India(y))']	Unknown	wiki
87	265	Hamilton is a film.	['Daveed Diggs is an actor and film producer.', 'Daveed Diggs played two roles in the musical Hamilton.', 'One of the actors from Hamilton won the best actor award.', 'The actor playing Thomas Jefferson won the best actor award.', 'Daveed Diggs played Thomas Jefferson.', 'Musicals are not films.']	['Actor(daveedDiggs) ∧ FilmProducer(daveedDiggs)', 'PlayedTwoRoles(daveedDiggs) ∧ PlayedIn(daveedDiggs, hamilton) ∧ Musical(hamilton)', '∃x (Actor(x) ∧ PlayedIn(x, hamilton) ∧ WonBestActorAward(x))', '∀x (Actor(x) ∧ Played(x, thomasJefferson) → WonBestActorAward(x))', 'Played(daveedDiggs, thomasJefferson)', '∀x (Musical(x) → ¬Film(x))']	False	wiki
87	266	Daveed Diggs won the best actor award.	['Daveed Diggs is an actor and film producer.', 'Daveed Diggs played two roles in the musical Hamilton.', 'One of the actors from Hamilton won the best actor award.', 'The actor playing Thomas Jefferson won the best actor award.', 'Daveed Diggs played Thomas Jefferson.', 'Musicals are not films.']	['Actor(daveedDiggs) ∧ FilmProducer(daveedDiggs)', 'PlayedTwoRoles(daveedDiggs) ∧ PlayedIn(daveedDiggs, hamilton) ∧ Musical(hamilton)', '∃x (Actor(x) ∧ PlayedIn(x, hamilton) ∧ WonBestActorAward(x))', '∀x (Actor(x) ∧ Played(x, thomasJefferson) → WonBestActorAward(x))', 'Played(daveedDiggs, thomasJefferson)', '∀x (Musical(x) → ¬Film(x))']	True	wiki
87	267	Hamilton won two awards.	['Daveed Diggs is an actor and film producer.', 'Daveed Diggs played two roles in the musical Hamilton.', 'One of the actors from Hamilton won the best actor award.', 'The actor playing Thomas Jefferson won the best actor award.', 'Daveed Diggs played Thomas Jefferson.', 'Musicals are not films.']	['Actor(daveedDiggs) ∧ FilmProducer(daveedDiggs)', 'PlayedTwoRoles(daveedDiggs) ∧ PlayedIn(daveedDiggs, hamilton) ∧ Musical(hamilton)', '∃x (Actor(x) ∧ PlayedIn(x, hamilton) ∧ WonBestActorAward(x))', '∀x (Actor(x) ∧ Played(x, thomasJefferson) → WonBestActorAward(x))', 'Played(daveedDiggs, thomasJefferson)', '∀x (Musical(x) → ¬Film(x))']	Unknown	wiki
221	630	Ernest Pohl has not scored more than 180 goals.	['Ernest Pohl was a Polish football player. ', 'A football player in the Polish First Division has scored over 180 goals. ', 'Ernest Pohl scored more than 180 goals in the Polish First Division. ', "Górnik Zabrze's stadium was named after a soccer player from Ruda Śląska. ", 'Ernest Pohl is from Ruda Śląska. ']	['PolishFootballPlayer(ernestpohl)', '∃x (In(x, polishfirstdivision) ∧ ScoredMoreThan180Goals(x))', 'ScoredMoreThan180Goals(ernestpohl) ∧ In(ernestpohl, polishfirstdivision)', '∃x (NamedAfter(gornikzabrze, x) ∧ FootballPlayer(x) ∧ From(x, rudaslaska))', 'From(ernestpohl, rudaslaska)']	False	wiki
221	631	Górnik Zabrze's stadium was named after Ernest Pohl.	['Ernest Pohl was a Polish football player. ', 'A football player in the Polish First Division has scored over 180 goals. ', 'Ernest Pohl scored more than 180 goals in the Polish First Division. ', "Górnik Zabrze's stadium was named after a soccer player from Ruda Śląska. ", 'Ernest Pohl is from Ruda Śląska. ']	['PolishFootballPlayer(ernestpohl)', '∃x (In(x, polishfirstdivision) ∧ ScoredMoreThan180Goals(x))', 'ScoredMoreThan180Goals(ernestpohl) ∧ In(ernestpohl, polishfirstdivision)', '∃x (NamedAfter(gornikzabrze, x) ∧ FootballPlayer(x) ∧ From(x, rudaslaska))', 'From(ernestpohl, rudaslaska)']	Unknown	wiki
142	418	Ann J. Land was elected to the Philadelphia City Council in 1980.	['Ann J. Land was a member of the Philadelphia City Council and was also a member of the Democratic Party.', 'Ann J. Land ran unopposed for the Philadephia City Council in 1980.', 'People who run unopposed for the Philadelphia City Council are elected to the positions they run for in the same year.', 'Michael Nutter was a political challenger.', 'Ann J. Land defeated Michael Nutter and ran for the Philadelphia City Council in 1987.']	['PhiladephiaCouncil(annJLand) ∧ DemocraticParty(annJLand)', 'Year(y1980) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand)', '∀x (RunFor(x) ∧ PhiladephiaCouncil(x) → Elected(x))', 'Challenger(nutter)', 'Year(y1987) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand) ∧ Defeated(annJLand, nutter)']	True	wiki
142	419	Ann J. Land was elected to the Philadelphia City Council in 1987.	['Ann J. Land was a member of the Philadelphia City Council and was also a member of the Democratic Party.', 'Ann J. Land ran unopposed for the Philadephia City Council in 1980.', 'People who run unopposed for the Philadelphia City Council are elected to the positions they run for in the same year.', 'Michael Nutter was a political challenger.', 'Ann J. Land defeated Michael Nutter and ran for the Philadelphia City Council in 1987.']	['PhiladephiaCouncil(annJLand) ∧ DemocraticParty(annJLand)', 'Year(y1980) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand)', '∀x (RunFor(x) ∧ PhiladephiaCouncil(x) → Elected(x))', 'Challenger(nutter)', 'Year(y1987) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand) ∧ Defeated(annJLand, nutter)']	True	wiki
142	420	There was some member of the Democratic Party elected to the Philadelphia City Council in 1980.	['Ann J. Land was a member of the Philadelphia City Council and was also a member of the Democratic Party.', 'Ann J. Land ran unopposed for the Philadephia City Council in 1980.', 'People who run unopposed for the Philadelphia City Council are elected to the positions they run for in the same year.', 'Michael Nutter was a political challenger.', 'Ann J. Land defeated Michael Nutter and ran for the Philadelphia City Council in 1987.']	['PhiladephiaCouncil(annJLand) ∧ DemocraticParty(annJLand)', 'Year(y1980) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand)', '∀x (RunFor(x) ∧ PhiladephiaCouncil(x) → Elected(x))', 'Challenger(nutter)', 'Year(y1987) → PhiladephiaCouncil(annJLand) ∧ RunFor(annJLand) ∧ Defeated(annJLand, nutter)']	True	wiki
111	337	Rangers won the cup in 2015.	['Aberdeen won the cup in the 2013 final.', 'Rangers won the cup in 2014 final.', 'Aberdeen and Rangers are different teams.', "Different teams cannot win the same cup in a given year's final."]	['WonCup(aberdeen, twentythirteen)', 'WonCup(rangers, twentyfourteen)', 'Different(aberdeen, rangers) ∧ Different(rangers, aberdeen)', '∀x ∀y ∀z (Different(x, y)  ∧ WonCup(x, z)  → ¬WonCup(y, z))']	Unknown	wiki
111	338	Rangers won the cup in 2013.	['Aberdeen won the cup in the 2013 final.', 'Rangers won the cup in 2014 final.', 'Aberdeen and Rangers are different teams.', "Different teams cannot win the same cup in a given year's final."]	['WonCup(aberdeen, twentythirteen)', 'WonCup(rangers, twentyfourteen)', 'Different(aberdeen, rangers) ∧ Different(rangers, aberdeen)', '∀x ∀y ∀z (Different(x, y)  ∧ WonCup(x, z)  → ¬WonCup(y, z))']	False	wiki
111	339	Aberdeen has won a cup before.	['Aberdeen won the cup in the 2013 final.', 'Rangers won the cup in 2014 final.', 'Aberdeen and Rangers are different teams.', "Different teams cannot win the same cup in a given year's final."]	['WonCup(aberdeen, twentythirteen)', 'WonCup(rangers, twentyfourteen)', 'Different(aberdeen, rangers) ∧ Different(rangers, aberdeen)', '∀x ∀y ∀z (Different(x, y)  ∧ WonCup(x, z)  → ¬WonCup(y, z))']	True	wiki
329	848	Mary is a person who lives in Manhattan.	['All young working professionals who have regular 9-5 jobs also have pets.', 'Some people who live in Manhattan are young working professionals who have regular 9-5 jobs.', 'All people who have pets are people who have at least one child.', 'People who do not have at least one child are people who own a sports car.', 'Mary either does not own a sports car or, if they do, then they do not have at least one child.']	['∀x (Working(x) → Pets(x))', '∃x (Manhattan(x) ∧ Working(x))', '∀x (Pets(x) → Child(x))', '∀x (Child(x) → ¬Car(x))', '¬(Car(mary) ⊕ Child(mary))']	Unknown	hyb
329	849	Mary is a person who lives in Manhattan and is a young working professional who has a regular 9-5 job.	['All young working professionals who have regular 9-5 jobs also have pets.', 'Some people who live in Manhattan are young working professionals who have regular 9-5 jobs.', 'All people who have pets are people who have at least one child.', 'People who do not have at least one child are people who own a sports car.', 'Mary either does not own a sports car or, if they do, then they do not have at least one child.']	['∀x (Working(x) → Pets(x))', '∃x (Manhattan(x) ∧ Working(x))', '∀x (Pets(x) → Child(x))', '∀x (Child(x) → ¬Car(x))', '¬(Car(mary) ⊕ Child(mary))']	False	hyb
329	850	If Mary is a young working professional who has a regular 9-5 job, then Mary does not live in Manhattan.	['All young working professionals who have regular 9-5 jobs also have pets.', 'Some people who live in Manhattan are young working professionals who have regular 9-5 jobs.', 'All people who have pets are people who have at least one child.', 'People who do not have at least one child are people who own a sports car.', 'Mary either does not own a sports car or, if they do, then they do not have at least one child.']	['∀x (Working(x) → Pets(x))', '∃x (Manhattan(x) ∧ Working(x))', '∀x (Pets(x) → Child(x))', '∀x (Child(x) → ¬Car(x))', '¬(Car(mary) ⊕ Child(mary))']	True	hyb
397	1085	Picture memory is preceded by data processing.	['Either block design or event-related design. ', 'All event-related designs are brain image acquisition.', 'All brain image acquisition is preceded by data processing.', 'Nothing preceded by data processing acquires data.', 'Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data.']	['∀x (BlockDesign(x) ∨ Event-relatedDesign(x))', '∀x (Event-relatedDesign(x) → BrainImageAcquisition(x))', '∀x (BrainImageAcquisition(x) → PrecededByDataProcessing(x))', '∀x (PrecededByDataProcessing(x) → ¬AcquiringData(x))', '(Event-relatedDesign(pictureMemory) ∧ AcquiringData(pictureMemory)) ∨ (¬Event-relatedDesign(pictureMemory) ∧ ¬AcquiringData(pictureMemory))']	Unknown	hyb
397	1086	Picture memory is a block design.	['Either block design or event-related design. ', 'All event-related designs are brain image acquisition.', 'All brain image acquisition is preceded by data processing.', 'Nothing preceded by data processing acquires data.', 'Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data.']	['∀x (BlockDesign(x) ∨ Event-relatedDesign(x))', '∀x (Event-relatedDesign(x) → BrainImageAcquisition(x))', '∀x (BrainImageAcquisition(x) → PrecededByDataProcessing(x))', '∀x (PrecededByDataProcessing(x) → ¬AcquiringData(x))', '(Event-relatedDesign(pictureMemory) ∧ AcquiringData(pictureMemory)) ∨ (¬Event-relatedDesign(pictureMemory) ∧ ¬AcquiringData(pictureMemory))']	True	hyb
397	1087	Picture memory is either a block design or acquiring data.	['Either block design or event-related design. ', 'All event-related designs are brain image acquisition.', 'All brain image acquisition is preceded by data processing.', 'Nothing preceded by data processing acquires data.', 'Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data.']	['∀x (BlockDesign(x) ∨ Event-relatedDesign(x))', '∀x (Event-relatedDesign(x) → BrainImageAcquisition(x))', '∀x (BrainImageAcquisition(x) → PrecededByDataProcessing(x))', '∀x (PrecededByDataProcessing(x) → ¬AcquiringData(x))', '(Event-relatedDesign(pictureMemory) ∧ AcquiringData(pictureMemory)) ∨ (¬Event-relatedDesign(pictureMemory) ∧ ¬AcquiringData(pictureMemory))']	True	hyb
397	1088	If picture memory is not acquiring data, then picture memory is a block design and acquiring data.	['Either block design or event-related design. ', 'All event-related designs are brain image acquisition.', 'All brain image acquisition is preceded by data processing.', 'Nothing preceded by data processing acquires data.', 'Picture memory is either an event-related design and acquiring data or neither an event-related design nor acquiring data.']	['∀x (BlockDesign(x) ∨ Event-relatedDesign(x))', '∀x (Event-relatedDesign(x) → BrainImageAcquisition(x))', '∀x (BrainImageAcquisition(x) → PrecededByDataProcessing(x))', '∀x (PrecededByDataProcessing(x) → ¬AcquiringData(x))', '(Event-relatedDesign(pictureMemory) ∧ AcquiringData(pictureMemory)) ∨ (¬Event-relatedDesign(pictureMemory) ∧ ¬AcquiringData(pictureMemory))']	False	hyb
277	726	The USS Lyon is decommissioned.	['The USS Lyon was a US Navy ship involved in WWII.', 'All ships involved in WWII are currently decommissioned or in a museum.']	['(USNavyShip(usslyon) ∧ InWWII(usslyon))', '∀x (InWWII(x) → (Decommissioned(x) ∨ InMuseum(x)))']	Unknown	wiki
349	929	Chopsticks at restaurants are eco-friendly.	['All disposable chopsticks are made from trees.', 'Some chopsticks are eco-friendly.', 'Either disposable chopsticks or reusable chopsticks. ', 'If chopsticks are made from metals, then they are not made from plastics. ', 'All reusable chopsticks are made from metal.', 'Chopsticks at restaurants are either made from metals and made from plastics, or neither made from metals nor made from plastics.']	['∀x (DisposableChopsticks(x) → MadeFromTrees(x))', '∃x (EcoFriendly(x))', '∀x (DisposableChopsticks(x) ⊕ Reusable(x)) ', '∀x (MadeFromMetals(x) → ¬MadeFromPlastics(x))', '∀x (Reusable(x) → MadeFromMetals(x))', '¬(MadeFromMetals(chopsticksAtRestaurants) ⊕ MadeFromPlastics(chopsticksAtRestaurants))']	Unknown	hyb
349	930	Chopsticks at restaurants are eco-friendly or made from trees.	['All disposable chopsticks are made from trees.', 'Some chopsticks are eco-friendly.', 'Either disposable chopsticks or reusable chopsticks. ', 'If chopsticks are made from metals, then they are not made from plastics. ', 'All reusable chopsticks are made from metal.', 'Chopsticks at restaurants are either made from metals and made from plastics, or neither made from metals nor made from plastics.']	['∀x (DisposableChopsticks(x) → MadeFromTrees(x))', '∃x (EcoFriendly(x))', '∀x (DisposableChopsticks(x) ⊕ Reusable(x)) ', '∀x (MadeFromMetals(x) → ¬MadeFromPlastics(x))', '∀x (Reusable(x) → MadeFromMetals(x))', '¬(MadeFromMetals(chopsticksAtRestaurants) ⊕ MadeFromPlastics(chopsticksAtRestaurants))']	True	hyb
349	931	If Chopsticks at restaurants are made from plastics or made from trees, then Chopsticks at restaurants are made from plastics and are eco-friendly.	['All disposable chopsticks are made from trees.', 'Some chopsticks are eco-friendly.', 'Either disposable chopsticks or reusable chopsticks. ', 'If chopsticks are made from metals, then they are not made from plastics. ', 'All reusable chopsticks are made from metal.', 'Chopsticks at restaurants are either made from metals and made from plastics, or neither made from metals nor made from plastics.']	['∀x (DisposableChopsticks(x) → MadeFromTrees(x))', '∃x (EcoFriendly(x))', '∀x (DisposableChopsticks(x) ⊕ Reusable(x)) ', '∀x (MadeFromMetals(x) → ¬MadeFromPlastics(x))', '∀x (Reusable(x) → MadeFromMetals(x))', '¬(MadeFromMetals(chopsticksAtRestaurants) ⊕ MadeFromPlastics(chopsticksAtRestaurants))']	False	hyb
445	1285	Sid is an animal.	['Anything that is lazy is unproductive.', 'No one unproductive is an energetic person.', 'If something is a sloth, then it is lazy.', 'Some animals are sloths.', 'Sid is not either an energetic person or a sloth.']	['∀x (Lazy(x) → Unproductive(x))', '∀x (Unproductive(x) → ¬Energetic(x))', '∀x (Sloth(x) → Lazy(x))', '∃x (Animal(x) ∧ Sloth(x))', '¬Energetic(sid) ∨ Sloth(sid)']	Unknown	hyb
445	1286	Sid is an energetic person and an animal.	['Anything that is lazy is unproductive.', 'No one unproductive is an energetic person.', 'If something is a sloth, then it is lazy.', 'Some animals are sloths.', 'Sid is not either an energetic person or a sloth.']	['∀x (Lazy(x) → Unproductive(x))', '∀x (Unproductive(x) → ¬Energetic(x))', '∀x (Sloth(x) → Lazy(x))', '∃x (Animal(x) ∧ Sloth(x))', '¬Energetic(sid) ∨ Sloth(sid)']	False	hyb
445	1287	If Sid is either an animal or unproductive, then Sid is not an energetic person.	['Anything that is lazy is unproductive.', 'No one unproductive is an energetic person.', 'If something is a sloth, then it is lazy.', 'Some animals are sloths.', 'Sid is not either an energetic person or a sloth.']	['∀x (Lazy(x) → Unproductive(x))', '∀x (Unproductive(x) → ¬Energetic(x))', '∀x (Sloth(x) → Lazy(x))', '∃x (Animal(x) ∧ Sloth(x))', '¬Energetic(sid) ∨ Sloth(sid)']	True	hyb
187	542	Manchester City has a higher ranking than Manchester United.	['European soccer clubs can attend UCL, UEL and UECL.', 'A soccer club eligible to attend UCL has a higher ranking than a soccer club eligible to attend UEL.', 'A soccer club eligible to attend UEL has a higher ranking than a soccer club eligible to attend UECL.', 'Manchester United and Machester City are both European soccer clubs.', 'Manchester United is eligible to attend UEL next season.', 'Manchester City is eligible to attend UCL next season.']	['∀x (European(x) ∧ SoccerClub(x) → Attend(x, ucl) ∨ Attend(x, uel) ∨ Attend(x, uecl))', '∀x ∀y (SoccerClub(x) ∧ SoccerClub(y) ∧ Attend(x, ucl) ∧ Attend(y, uel) → HigherRank(x, y))', '∀x ∀y (SoccerClub(x) ∧ SoccerClub(y) ∧ Attend(x, uel) ∧ Attend(y, uecl) → HigherRank(x, y))', 'European(manchesterunited) ∧ SoccerClub(manchesterunited) ∧ European(manchestercity) ∧ SoccerClub(manchestercity)', 'Attend(manchesterunited, uel)', 'Attend(manchestercity, ucl)']	True	wiki
65	193	Dennis Green is a football coach.	['If a person coach a football club, the person is a football coach.', 'If a person has a position in a club for a position in a year, and the club is in NFL in the same year, the person plays in NFL.', 'Minnesota Vikings is a football club.', 'Dennis Green coached Minnesota Vikings.', 'Cris Carter had 13 touchdown receptions.', 'Minnesota Vikings was in the National Football League in 1997.', 'John Randle was Minnesota Vikings defensive tackle in 1997.']	['∀x ∀y (Coach(x, y) ∧ IsFootballClub(y) → IsFootballCoach(x))', '∀x ∀y ∀z (PlayFor(x, y) ∧ NFLTeamYear(y, z) ∧ InTeam(x, z) → PlayInNFL(x))', 'IsFootballClub(minnesota_Vikings)', 'Coach(dennis_Green, minnesota_Vikings)', 'TouchDownReceptionTime(cris_Carter, t13)', 'NFLTeamYear(minnesota_Vikings, y1997)', 'Position(john_Randle, defensive_tackle) ∧ InTeam(john_Randle, y1997) ∧ PlayFor(john_Randle, minnesota_Vikings)']	True	wiki
65	194	John Randle didn't play in the National Football League.	['If a person coach a football club, the person is a football coach.', 'If a person has a position in a club for a position in a year, and the club is in NFL in the same year, the person plays in NFL.', 'Minnesota Vikings is a football club.', 'Dennis Green coached Minnesota Vikings.', 'Cris Carter had 13 touchdown receptions.', 'Minnesota Vikings was in the National Football League in 1997.', 'John Randle was Minnesota Vikings defensive tackle in 1997.']	['∀x ∀y (Coach(x, y) ∧ IsFootballClub(y) → IsFootballCoach(x))', '∀x ∀y ∀z (PlayFor(x, y) ∧ NFLTeamYear(y, z) ∧ InTeam(x, z) → PlayInNFL(x))', 'IsFootballClub(minnesota_Vikings)', 'Coach(dennis_Green, minnesota_Vikings)', 'TouchDownReceptionTime(cris_Carter, t13)', 'NFLTeamYear(minnesota_Vikings, y1997)', 'Position(john_Randle, defensive_tackle) ∧ InTeam(john_Randle, y1997) ∧ PlayFor(john_Randle, minnesota_Vikings)']	False	wiki
65	195	Cris Carter played for Minnesota Vikings.	['If a person coach a football club, the person is a football coach.', 'If a person has a position in a club for a position in a year, and the club is in NFL in the same year, the person plays in NFL.', 'Minnesota Vikings is a football club.', 'Dennis Green coached Minnesota Vikings.', 'Cris Carter had 13 touchdown receptions.', 'Minnesota Vikings was in the National Football League in 1997.', 'John Randle was Minnesota Vikings defensive tackle in 1997.']	['∀x ∀y (Coach(x, y) ∧ IsFootballClub(y) → IsFootballCoach(x))', '∀x ∀y ∀z (PlayFor(x, y) ∧ NFLTeamYear(y, z) ∧ InTeam(x, z) → PlayInNFL(x))', 'IsFootballClub(minnesota_Vikings)', 'Coach(dennis_Green, minnesota_Vikings)', 'TouchDownReceptionTime(cris_Carter, t13)', 'NFLTeamYear(minnesota_Vikings, y1997)', 'Position(john_Randle, defensive_tackle) ∧ InTeam(john_Randle, y1997) ∧ PlayFor(john_Randle, minnesota_Vikings)']	Unknown	wiki
462	1338	Grace is a ghost.	['All cats are cute.', 'Ghosts do not exist.', 'An animal is either a cat or a dog.', 'Nothing that barks is lovely. ', 'If something is a dog, then it barks.', 'Grace is either a cat and a dog, or neither a cat nor a dog.']	['∀x (Cat(x) → Cute(x))', '∀x (¬Ghost(x))', '∀x (Cat(x) ∨ Dog(x))', '∀x (Bark(x) → ¬Lovely(x))', '∀x (Dog(x) → Bark(x))', '(Cat(grace) ∧ Dog(grace)) ⊕ (¬Cat(grace) ∧ ¬Dog(grace))']	Unknown	hyb
462	1339	If Grace is either both cute and lovely, or neither cute nor lovely, then Grace is either a dog or a ghost.	['All cats are cute.', 'Ghosts do not exist.', 'An animal is either a cat or a dog.', 'Nothing that barks is lovely. ', 'If something is a dog, then it barks.', 'Grace is either a cat and a dog, or neither a cat nor a dog.']	['∀x (Cat(x) → Cute(x))', '∀x (¬Ghost(x))', '∀x (Cat(x) ∨ Dog(x))', '∀x (Bark(x) → ¬Lovely(x))', '∀x (Dog(x) → Bark(x))', '(Cat(grace) ∧ Dog(grace)) ⊕ (¬Cat(grace) ∧ ¬Dog(grace))']	True	hyb
462	1340	If Grace is not both a ghost and lovely, then Grace is either a cat or cute.	['All cats are cute.', 'Ghosts do not exist.', 'An animal is either a cat or a dog.', 'Nothing that barks is lovely. ', 'If something is a dog, then it barks.', 'Grace is either a cat and a dog, or neither a cat nor a dog.']	['∀x (Cat(x) → Cute(x))', '∀x (¬Ghost(x))', '∀x (Cat(x) ∨ Dog(x))', '∀x (Bark(x) → ¬Lovely(x))', '∀x (Dog(x) → Bark(x))', '(Cat(grace) ∧ Dog(grace)) ⊕ (¬Cat(grace) ∧ ¬Dog(grace))']	False	hyb
99	299	Baku is southeast of Shafaq-Asiman.	['Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.', 'Baku is northwest of Shafaq-Asiman.', 'If place A is northwest of place B, then place B is southeast of place A.']	['LargeComplex(shafaq-asiman) ∧ LargeComplex(shafaq-asiman) ∧ Offshore(shafaq-asiman) ∧ GeologicalStructures(shafaq-asiman) ∧ In(shafaq-asiman, caspiansea)', 'NorthwestOf(baku, shafaq-asiman)', '∀x ∀y (NorthwestOf(x, y) → SoutheastOf(y, x))']	Unknown	wiki
99	300	A large complex is southeast of Baku.	['Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.', 'Baku is northwest of Shafaq-Asiman.', 'If place A is northwest of place B, then place B is southeast of place A.']	['LargeComplex(shafaq-asiman) ∧ LargeComplex(shafaq-asiman) ∧ Offshore(shafaq-asiman) ∧ GeologicalStructures(shafaq-asiman) ∧ In(shafaq-asiman, caspiansea)', 'NorthwestOf(baku, shafaq-asiman)', '∀x ∀y (NorthwestOf(x, y) → SoutheastOf(y, x))']	True	wiki
99	301	Baku is not northwest of an offshore geological structures.	['Shafaq-Asiman is a large complex of offshore geological structures in the Caspian Sea.', 'Baku is northwest of Shafaq-Asiman.', 'If place A is northwest of place B, then place B is southeast of place A.']	['LargeComplex(shafaq-asiman) ∧ LargeComplex(shafaq-asiman) ∧ Offshore(shafaq-asiman) ∧ GeologicalStructures(shafaq-asiman) ∧ In(shafaq-asiman, caspiansea)', 'NorthwestOf(baku, shafaq-asiman)', '∀x ∀y (NorthwestOf(x, y) → SoutheastOf(y, x))']	False	wiki
71	214	Herodicus tutored Hippocrates.	['Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.', 'Herodicus was born in the city of Selymbria.', 'Selymbria is a colony of the city-state Megara.', 'One of the tutors of Hippocrates was Herodicus.', 'Massages were recommended by Herodicus.', 'Some of theories of Herodicus are considered to be the foundation of sports medicine.']	['Greek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ GymnasticMaster(herodicus)', 'Born(herodicus, selymbia) ∧ City(selymbia)', 'Colony(selymbia, megara) ∧ CityState(megara)', 'Tutored(herodicus, hippocrates)', 'Recommended(herodicus, massages)', '∃x (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine))']	True	wiki
71	215	Herodicus was tutored by Hippocrates.	['Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.', 'Herodicus was born in the city of Selymbria.', 'Selymbria is a colony of the city-state Megara.', 'One of the tutors of Hippocrates was Herodicus.', 'Massages were recommended by Herodicus.', 'Some of theories of Herodicus are considered to be the foundation of sports medicine.']	['Greek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ GymnasticMaster(herodicus)', 'Born(herodicus, selymbia) ∧ City(selymbia)', 'Colony(selymbia, megara) ∧ CityState(megara)', 'Tutored(herodicus, hippocrates)', 'Recommended(herodicus, massages)', '∃x (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine))']	Unknown	wiki
71	216	Herodicus was born in a city-state.	['Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.', 'Herodicus was born in the city of Selymbria.', 'Selymbria is a colony of the city-state Megara.', 'One of the tutors of Hippocrates was Herodicus.', 'Massages were recommended by Herodicus.', 'Some of theories of Herodicus are considered to be the foundation of sports medicine.']	['Greek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ GymnasticMaster(herodicus)', 'Born(herodicus, selymbia) ∧ City(selymbia)', 'Colony(selymbia, megara) ∧ CityState(megara)', 'Tutored(herodicus, hippocrates)', 'Recommended(herodicus, massages)', '∃x (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine))']	Unknown	wiki
71	217	Herodicus did not recommend massages.	['Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.', 'Herodicus was born in the city of Selymbria.', 'Selymbria is a colony of the city-state Megara.', 'One of the tutors of Hippocrates was Herodicus.', 'Massages were recommended by Herodicus.', 'Some of theories of Herodicus are considered to be the foundation of sports medicine.']	['Greek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ GymnasticMaster(herodicus)', 'Born(herodicus, selymbia) ∧ City(selymbia)', 'Colony(selymbia, megara) ∧ CityState(megara)', 'Tutored(herodicus, hippocrates)', 'Recommended(herodicus, massages)', '∃x (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine))']	False	wiki
71	218	Herodicus was born in a colony of a city-state.	['Herodicus was a Greek physician, dietician, sophist, and gymnastic-master.', 'Herodicus was born in the city of Selymbria.', 'Selymbria is a colony of the city-state Megara.', 'One of the tutors of Hippocrates was Herodicus.', 'Massages were recommended by Herodicus.', 'Some of theories of Herodicus are considered to be the foundation of sports medicine.']	['Greek(herodicus) ∧ Physician(herodicus) ∧ Dietician(herodicus) ∧ Sophist(herodicus) ∧ GymnasticMaster(herodicus)', 'Born(herodicus, selymbia) ∧ City(selymbia)', 'Colony(selymbia, megara) ∧ CityState(megara)', 'Tutored(herodicus, hippocrates)', 'Recommended(herodicus, massages)', '∃x (Theory(x) ∧ From(x, herodicus) ∧ FoundationOf(x, sportsMedicine))']	True	wiki
438	1263	Billy is a student.	['No kid loves the Opera.', 'All adults love the Opera.', 'If someone is a scientist, then they are an adult.', 'Some students are kids.', 'Billy is a kid.']	['∀x (Kid(x) → ¬OperaLover(x))', '∀x (Adult(x) → OperaLover(x))', '∀x (Scientist(x) → Adult(x))', '∃x (Student(x) ∧ Kid(x))', 'Kid(billy)']	Unknown	hyb
438	1264	Billy is a student and a scientist.	['No kid loves the Opera.', 'All adults love the Opera.', 'If someone is a scientist, then they are an adult.', 'Some students are kids.', 'Billy is a kid.']	['∀x (Kid(x) → ¬OperaLover(x))', '∀x (Adult(x) → OperaLover(x))', '∀x (Scientist(x) → Adult(x))', '∃x (Student(x) ∧ Kid(x))', 'Kid(billy)']	False	hyb
438	1265	If Billy is a student or a scientist, then Billy is a student and a kid.	['No kid loves the Opera.', 'All adults love the Opera.', 'If someone is a scientist, then they are an adult.', 'Some students are kids.', 'Billy is a kid.']	['∀x (Kid(x) → ¬OperaLover(x))', '∀x (Adult(x) → OperaLover(x))', '∀x (Scientist(x) → Adult(x))', '∃x (Student(x) ∧ Kid(x))', 'Kid(billy)']	True	hyb
69	205	There is a son of a referee observer that plays football.	['Brian Winter is a Scottish football referee.', 'After being injured, Brian Winter retired in 2012.', 'Brian Winter was appointed as a referee observer after his retirement.', 'Some football referees become referee observers.', 'The son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical.']	['Scottish(brianwinter) ∧ FootballReferee(brianwinter)', 'Injured(brianwinter) ∧ Retired(brianwinter)', 'RefereeObserver(brianwinter)', '∃x (FootballReferee(x) ∧ RefereeObserver(x))', 'Son(andywinter, brianwinter) ∧ FootballPlayer(andywinter) ∧ PlaysFor(andywinter, hamiltonacademical)']	True	wiki
69	206	Brian Winter is not a referee observer.	['Brian Winter is a Scottish football referee.', 'After being injured, Brian Winter retired in 2012.', 'Brian Winter was appointed as a referee observer after his retirement.', 'Some football referees become referee observers.', 'The son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical.']	['Scottish(brianwinter) ∧ FootballReferee(brianwinter)', 'Injured(brianwinter) ∧ Retired(brianwinter)', 'RefereeObserver(brianwinter)', '∃x (FootballReferee(x) ∧ RefereeObserver(x))', 'Son(andywinter, brianwinter) ∧ FootballPlayer(andywinter) ∧ PlaysFor(andywinter, hamiltonacademical)']	False	wiki
69	207	Brian Winter is retired.	['Brian Winter is a Scottish football referee.', 'After being injured, Brian Winter retired in 2012.', 'Brian Winter was appointed as a referee observer after his retirement.', 'Some football referees become referee observers.', 'The son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical.']	['Scottish(brianwinter) ∧ FootballReferee(brianwinter)', 'Injured(brianwinter) ∧ Retired(brianwinter)', 'RefereeObserver(brianwinter)', '∃x (FootballReferee(x) ∧ RefereeObserver(x))', 'Son(andywinter, brianwinter) ∧ FootballPlayer(andywinter) ∧ PlaysFor(andywinter, hamiltonacademical)']	True	wiki
69	208	Andy Winter is a referee.	['Brian Winter is a Scottish football referee.', 'After being injured, Brian Winter retired in 2012.', 'Brian Winter was appointed as a referee observer after his retirement.', 'Some football referees become referee observers.', 'The son of Brian Winter, Andy Winter, is a football player who plays for Hamilton Academical.']	['Scottish(brianwinter) ∧ FootballReferee(brianwinter)', 'Injured(brianwinter) ∧ Retired(brianwinter)', 'RefereeObserver(brianwinter)', '∃x (FootballReferee(x) ∧ RefereeObserver(x))', 'Son(andywinter, brianwinter) ∧ FootballPlayer(andywinter) ∧ PlaysFor(andywinter, hamiltonacademical)']	Unknown	wiki
401	1105	Erica plans.	['People are either interested in puzzles or bad at chess.', "If a person is bad at chess, then they don't play a lot of chess.", 'A person is either a planner or a creative person.', 'Erica is someone who plays a lot of chess.', 'If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.']	['∀x (Puzzles(x) ∨ BadChess(x))', '∀x (BadChess(x) → ¬PlaysLots(x))', '∀x (Plans(x) ∨ Creative(x))', 'PlaysLots(erica)', '¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))']	Unknown	hyb
401	1106	Erica is interested in puzzles and is creative.	['People are either interested in puzzles or bad at chess.', "If a person is bad at chess, then they don't play a lot of chess.", 'A person is either a planner or a creative person.', 'Erica is someone who plays a lot of chess.', 'If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.']	['∀x (Puzzles(x) ∨ BadChess(x))', '∀x (BadChess(x) → ¬PlaysLots(x))', '∀x (Plans(x) ∨ Creative(x))', 'PlaysLots(erica)', '¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))']	True	hyb
401	1107	Erica is either interested in puzzles or is creative.	['People are either interested in puzzles or bad at chess.', "If a person is bad at chess, then they don't play a lot of chess.", 'A person is either a planner or a creative person.', 'Erica is someone who plays a lot of chess.', 'If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.']	['∀x (Puzzles(x) ∨ BadChess(x))', '∀x (BadChess(x) → ¬PlaysLots(x))', '∀x (Plans(x) ∨ Creative(x))', 'PlaysLots(erica)', '¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))']	False	hyb
401	1108	If Erica plans ahead or plays a lot of chess matches, then Erica is not interested in puzzles and creative.	['People are either interested in puzzles or bad at chess.', "If a person is bad at chess, then they don't play a lot of chess.", 'A person is either a planner or a creative person.', 'Erica is someone who plays a lot of chess.', 'If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.']	['∀x (Puzzles(x) ∨ BadChess(x))', '∀x (BadChess(x) → ¬PlaysLots(x))', '∀x (Plans(x) ∨ Creative(x))', 'PlaysLots(erica)', '¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))']	False	hyb
401	1109	If Erica is creative, then Erica is not interested in puzzles and creative.	['People are either interested in puzzles or bad at chess.', "If a person is bad at chess, then they don't play a lot of chess.", 'A person is either a planner or a creative person.', 'Erica is someone who plays a lot of chess.', 'If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.']	['∀x (Puzzles(x) ∨ BadChess(x))', '∀x (BadChess(x) → ¬PlaysLots(x))', '∀x (Plans(x) ∨ Creative(x))', 'PlaysLots(erica)', '¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))']	False	hyb
401	1110	If Erica is interested in puzzles and is creative, then Erica is not creative.	['People are either interested in puzzles or bad at chess.', "If a person is bad at chess, then they don't play a lot of chess.", 'A person is either a planner or a creative person.', 'Erica is someone who plays a lot of chess.', 'If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.']	['∀x (Puzzles(x) ∨ BadChess(x))', '∀x (BadChess(x) → ¬PlaysLots(x))', '∀x (Plans(x) ∨ Creative(x))', 'PlaysLots(erica)', '¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))']	False	hyb
401	1111	If Erica either plays a lot of chess matches or is creative, then Erica is neither interested in puzzles nor a person who plays a lot of chess matches.	['People are either interested in puzzles or bad at chess.', "If a person is bad at chess, then they don't play a lot of chess.", 'A person is either a planner or a creative person.', 'Erica is someone who plays a lot of chess.', 'If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.']	['∀x (Puzzles(x) ∨ BadChess(x))', '∀x (BadChess(x) → ¬PlaysLots(x))', '∀x (Plans(x) ∨ Creative(x))', 'PlaysLots(erica)', '¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))']	True	hyb
401	1112	If Erica is interested in puzzles and plays a lot of chess matches, then Erica is either a person who plays a lot of chess matches or a person that is creative.	['People are either interested in puzzles or bad at chess.', "If a person is bad at chess, then they don't play a lot of chess.", 'A person is either a planner or a creative person.', 'Erica is someone who plays a lot of chess.', 'If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.']	['∀x (Puzzles(x) ∨ BadChess(x))', '∀x (BadChess(x) → ¬PlaysLots(x))', '∀x (Plans(x) ∨ Creative(x))', 'PlaysLots(erica)', '¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))']	False	hyb
401	1113	If Erica plans ahead or is interested in puzzles, then Erica is creative.	['People are either interested in puzzles or bad at chess.', "If a person is bad at chess, then they don't play a lot of chess.", 'A person is either a planner or a creative person.', 'Erica is someone who plays a lot of chess.', 'If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.']	['∀x (Puzzles(x) ∨ BadChess(x))', '∀x (BadChess(x) → ¬PlaysLots(x))', '∀x (Plans(x) ∨ Creative(x))', 'PlaysLots(erica)', '¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))']	True	hyb
401	1114	If Erica is either bad at chess or interested in puzzles, then Erica is not a person who plays a lot of chess matches and creative.	['People are either interested in puzzles or bad at chess.', "If a person is bad at chess, then they don't play a lot of chess.", 'A person is either a planner or a creative person.', 'Erica is someone who plays a lot of chess.', 'If Erica is neither bad at chess nor creative, then Erica is either someone who plans and is creative, or someone who neither plans nor is creative.']	['∀x (Puzzles(x) ∨ BadChess(x))', '∀x (BadChess(x) → ¬PlaysLots(x))', '∀x (Plans(x) ∨ Creative(x))', 'PlaysLots(erica)', '¬(BadChess(erica) ∨ Creative(erica)) → (Plans(erica) ⊕ Creative(erica))']	False	hyb
125	374	Cristiano Ronaldo is a top soccer player.	['Soccer players have a right foot and a left foot.', 'Top soccer players are soccer players who can use their both feet very efficiently.', 'If a soccer player can score many goals using left foot, then they can use that foot very efficiently.', 'If a soccer player can score many goals using right foot, then they can use that foot very efficiently.', 'Cristiano Ronaldo is a soccer player.', 'Cristiano Ronaldo can use his right foot very efficiently.', 'Cristiano Ronaldo have scored more than one hundred goals using his left foot.']	['∀x (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))', '∀x (SoccerPlayer(x) ∧ Efficient(x, left) ∧ Efficient(x, right) → Top(x))', '∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, left) → Efficient(x, left))', '∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, right) → Efficient(x, right))', 'SoccerPlayer(ronaldo)', 'Efficient(ronaldo, right)', 'ScoreManyGoals(ronaldo, left)']	True	wiki
125	375	Cristiano Ronaldo is not a top soccer player.	['Soccer players have a right foot and a left foot.', 'Top soccer players are soccer players who can use their both feet very efficiently.', 'If a soccer player can score many goals using left foot, then they can use that foot very efficiently.', 'If a soccer player can score many goals using right foot, then they can use that foot very efficiently.', 'Cristiano Ronaldo is a soccer player.', 'Cristiano Ronaldo can use his right foot very efficiently.', 'Cristiano Ronaldo have scored more than one hundred goals using his left foot.']	['∀x (SoccerPlayer(x) → HasLeftFoot(x) ∧ HasRightFoot(x))', '∀x (SoccerPlayer(x) ∧ Efficient(x, left) ∧ Efficient(x, right) → Top(x))', '∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, left) → Efficient(x, left))', '∀x (SoccerPlayer(x) ∧ ScoreManyGoals(x, right) → Efficient(x, right))', 'SoccerPlayer(ronaldo)', 'Efficient(ronaldo, right)', 'ScoreManyGoals(ronaldo, left)']	False	wiki
177	512	The National Lobster Hatchery is for conservation.	['The National Lobster Hatchery is a hatchery located in Padstow England.', 'The National Lobster Hatchery is open to visitors.', 'A hatchery is either for profit, or for conservation.', 'If a hatchery is for conservation, it might release animals into the wild.', 'The National Lobster Hatchery is not for profit.']	['Hatchery(nationallobsterhatchery) ∧ LocatedIn(nationallobsterhatchery, padstowengland)', 'OpenToVisitors(nationallobsterhatchery)', '∀x (Hatchery(x) → ForConservation(x) ∨ ForProfit(x))', '∃x (Hatchery(x) ∧ ForConservation(x) ∧ ReleasesAnimalsToWild(x))', '¬ForProfit(nationallobsterhatchery)']	True	wiki
177	513	All hatcheries are open to visitors.	['The National Lobster Hatchery is a hatchery located in Padstow England.', 'The National Lobster Hatchery is open to visitors.', 'A hatchery is either for profit, or for conservation.', 'If a hatchery is for conservation, it might release animals into the wild.', 'The National Lobster Hatchery is not for profit.']	['Hatchery(nationallobsterhatchery) ∧ LocatedIn(nationallobsterhatchery, padstowengland)', 'OpenToVisitors(nationallobsterhatchery)', '∀x (Hatchery(x) → ForConservation(x) ∨ ForProfit(x))', '∃x (Hatchery(x) ∧ ForConservation(x) ∧ ReleasesAnimalsToWild(x))', '¬ForProfit(nationallobsterhatchery)']	Unknown	wiki
177	514	The National Lobster Hatchery releases animals into the wild.	['The National Lobster Hatchery is a hatchery located in Padstow England.', 'The National Lobster Hatchery is open to visitors.', 'A hatchery is either for profit, or for conservation.', 'If a hatchery is for conservation, it might release animals into the wild.', 'The National Lobster Hatchery is not for profit.']	['Hatchery(nationallobsterhatchery) ∧ LocatedIn(nationallobsterhatchery, padstowengland)', 'OpenToVisitors(nationallobsterhatchery)', '∀x (Hatchery(x) → ForConservation(x) ∨ ForProfit(x))', '∃x (Hatchery(x) ∧ ForConservation(x) ∧ ReleasesAnimalsToWild(x))', '¬ForProfit(nationallobsterhatchery)']	Unknown	wiki
224	636	Rhos Aelwyd F.C. won the 2005-06 Premier Division.	['Rhos Aelwyd F.C. is a Welsh football club.', 'Rhos Aelwyd F.C. is the only club based in Ponciau. ', 'The Premier Division was won in 2005–06 by a team from Ponciau. ', 'The winner of the Premier Division in 2009–10 was promoted back to the Cymru Alliance.', 'The Premier Division in 2009–10 was won by the same team that won in 2005-06. ']	['∀x (Rhosaelwydfc(x) → FootballClub(x) ∧ BasedInPonciau(x) ∧ Welsh(x))', '∀x (BasedInPonciau(x) ↔ Rhosaelwydfc(x))', '∃x (BasedInPonciau(x) ∧ WonPremierDivisionDuring(x, y2005))', '∀x (WonPremierDivisionDuring(x, y2009) → Promoted(x))', '∀x (WonPremierDivisionDuring(x, y2009) ↔ WonPremierDivisionDuring(x, y2005))']	True	wiki
224	637	Rhos Aelwyd F.C. was promoted to the Cymru Alliance.	['Rhos Aelwyd F.C. is a Welsh football club.', 'Rhos Aelwyd F.C. is the only club based in Ponciau. ', 'The Premier Division was won in 2005–06 by a team from Ponciau. ', 'The winner of the Premier Division in 2009–10 was promoted back to the Cymru Alliance.', 'The Premier Division in 2009–10 was won by the same team that won in 2005-06. ']	['∀x (Rhosaelwydfc(x) → FootballClub(x) ∧ BasedInPonciau(x) ∧ Welsh(x))', '∀x (BasedInPonciau(x) ↔ Rhosaelwydfc(x))', '∃x (BasedInPonciau(x) ∧ WonPremierDivisionDuring(x, y2005))', '∀x (WonPremierDivisionDuring(x, y2009) → Promoted(x))', '∀x (WonPremierDivisionDuring(x, y2009) ↔ WonPremierDivisionDuring(x, y2005))']	True	wiki
470	1362	Burger is popular.	['All OS are software.', 'All Mac are OS.', 'An OS is either Mac or Windows.', 'All Windows are convenient.', 'All software has code.', 'If something is convenient, then it is popular.', 'Burger is a piece of code and a Mac.', 'PyTorch is either Windows and software, or neither Windows nor software.']	['∀x (OS(x) → Software(x))', '∀x (Mac(x) → OS(x))', '∀x (Mac(x) ∨ Windows(x))', '∀x (Windows(x) → Convenient(x))', '∀x (Software(x) → Code(x))', '∀x (Convenient(x) → Popular(x))', 'Code(burger) ∧ Mac(burger))', '(Windows(pytorch) ∧ Software(pytorch)) ⊕ (¬Windows(pytorch) ∧ ¬Software(pytorch))']	Unknown	hyb
470	1363	Burger is not popular.	['All OS are software.', 'All Mac are OS.', 'An OS is either Mac or Windows.', 'All Windows are convenient.', 'All software has code.', 'If something is convenient, then it is popular.', 'Burger is a piece of code and a Mac.', 'PyTorch is either Windows and software, or neither Windows nor software.']	['∀x (OS(x) → Software(x))', '∀x (Mac(x) → OS(x))', '∀x (Mac(x) ∨ Windows(x))', '∀x (Windows(x) → Convenient(x))', '∀x (Software(x) → Code(x))', '∀x (Convenient(x) → Popular(x))', 'Code(burger) ∧ Mac(burger))', '(Windows(pytorch) ∧ Software(pytorch)) ⊕ (¬Windows(pytorch) ∧ ¬Software(pytorch))']	Unknown	hyb
470	1364	PyTorch is popular and has code.	['All OS are software.', 'All Mac are OS.', 'An OS is either Mac or Windows.', 'All Windows are convenient.', 'All software has code.', 'If something is convenient, then it is popular.', 'Burger is a piece of code and a Mac.', 'PyTorch is either Windows and software, or neither Windows nor software.']	['∀x (OS(x) → Software(x))', '∀x (Mac(x) → OS(x))', '∀x (Mac(x) ∨ Windows(x))', '∀x (Windows(x) → Convenient(x))', '∀x (Software(x) → Code(x))', '∀x (Convenient(x) → Popular(x))', 'Code(burger) ∧ Mac(burger))', '(Windows(pytorch) ∧ Software(pytorch)) ⊕ (¬Windows(pytorch) ∧ ¬Software(pytorch))']	True	hyb
470	1365	PyTorch is not popular and has code.	['All OS are software.', 'All Mac are OS.', 'An OS is either Mac or Windows.', 'All Windows are convenient.', 'All software has code.', 'If something is convenient, then it is popular.', 'Burger is a piece of code and a Mac.', 'PyTorch is either Windows and software, or neither Windows nor software.']	['∀x (OS(x) → Software(x))', '∀x (Mac(x) → OS(x))', '∀x (Mac(x) ∨ Windows(x))', '∀x (Windows(x) → Convenient(x))', '∀x (Software(x) → Code(x))', '∀x (Convenient(x) → Popular(x))', 'Code(burger) ∧ Mac(burger))', '(Windows(pytorch) ∧ Software(pytorch)) ⊕ (¬Windows(pytorch) ∧ ¬Software(pytorch))']	False	hyb
117	353	Road one will last longer than Road two	['Roads are made of either concrete or asphalt.', 'Roads made of concrete last longer than roads made with asphalt.', 'Roads made of asphalt are smoother than roads made of concrete.', 'Everyone prefers the smoother of two roads. ', 'Road one is made of concrete and Road two is made of asphalt.']	['∀x (Road(x) → (MadeOfConcrete(x) ∨ MadeOfAsphalt(x))', '∀x ∀y (Road(x) ∧ MadeOfConcrete(x) ∧ Road(y) ∧ MadeOfAsphalt(y) → LastLonger(x, y))', '∀x ∀y (Road(x) ∧ MadeOfAsphalt(x) ∧ Road(y) ∧ MadeOfConcrete(y) → Smoother(x, y))', '∀x ∀y ∀z (Road(x) ∧ Road(y) ∧ Smoother(x, y) → Prefers(z, x))', 'Road(one) ∧ MadeOfConcrete(one) ∧ Road(two) ∧ MadeOfAsphalt(two)']	True	wiki
117	354	Road two is not smoother than Road one.	['Roads are made of either concrete or asphalt.', 'Roads made of concrete last longer than roads made with asphalt.', 'Roads made of asphalt are smoother than roads made of concrete.', 'Everyone prefers the smoother of two roads. ', 'Road one is made of concrete and Road two is made of asphalt.']	['∀x (Road(x) → (MadeOfConcrete(x) ∨ MadeOfAsphalt(x))', '∀x ∀y (Road(x) ∧ MadeOfConcrete(x) ∧ Road(y) ∧ MadeOfAsphalt(y) → LastLonger(x, y))', '∀x ∀y (Road(x) ∧ MadeOfAsphalt(x) ∧ Road(y) ∧ MadeOfConcrete(y) → Smoother(x, y))', '∀x ∀y ∀z (Road(x) ∧ Road(y) ∧ Smoother(x, y) → Prefers(z, x))', 'Road(one) ∧ MadeOfConcrete(one) ∧ Road(two) ∧ MadeOfAsphalt(two)']	False	wiki
117	355	John prefers Road two.	['Roads are made of either concrete or asphalt.', 'Roads made of concrete last longer than roads made with asphalt.', 'Roads made of asphalt are smoother than roads made of concrete.', 'Everyone prefers the smoother of two roads. ', 'Road one is made of concrete and Road two is made of asphalt.']	['∀x (Road(x) → (MadeOfConcrete(x) ∨ MadeOfAsphalt(x))', '∀x ∀y (Road(x) ∧ MadeOfConcrete(x) ∧ Road(y) ∧ MadeOfAsphalt(y) → LastLonger(x, y))', '∀x ∀y (Road(x) ∧ MadeOfAsphalt(x) ∧ Road(y) ∧ MadeOfConcrete(y) → Smoother(x, y))', '∀x ∀y ∀z (Road(x) ∧ Road(y) ∧ Smoother(x, y) → Prefers(z, x))', 'Road(one) ∧ MadeOfConcrete(one) ∧ Road(two) ∧ MadeOfAsphalt(two)']	True	wiki
74	226	One of Ontario's oldest summer camps is a traditional summer camp for boys and girls.	['Camp Davern is a traditional summer camp for boys and girls.', 'Camp Davern was established in the year 1946.', 'Camp Davern was operated by the YMCA until the year 2015.', "Camp Davern is one of Ontario's oldest summer camps."]	['TraditionalSummerCamp(campdavern) ∧ ForBoysAndGirls(campdavern)', 'EstablishedIn(campdavern, year1946)', 'OperatedByYMCAUntil(campdavern, year2015)', 'OneOf(campdavern, ontariosoldestsummercamps)']	True	wiki
74	227	A traditional summer camp for boys and girls was operated by the YMCA until the year 2015.	['Camp Davern is a traditional summer camp for boys and girls.', 'Camp Davern was established in the year 1946.', 'Camp Davern was operated by the YMCA until the year 2015.', "Camp Davern is one of Ontario's oldest summer camps."]	['TraditionalSummerCamp(campdavern) ∧ ForBoysAndGirls(campdavern)', 'EstablishedIn(campdavern, year1946)', 'OperatedByYMCAUntil(campdavern, year2015)', 'OneOf(campdavern, ontariosoldestsummercamps)']	True	wiki
74	228	Camp Davern was established in 1989.	['Camp Davern is a traditional summer camp for boys and girls.', 'Camp Davern was established in the year 1946.', 'Camp Davern was operated by the YMCA until the year 2015.', "Camp Davern is one of Ontario's oldest summer camps."]	['TraditionalSummerCamp(campdavern) ∧ ForBoysAndGirls(campdavern)', 'EstablishedIn(campdavern, year1946)', 'OperatedByYMCAUntil(campdavern, year2015)', 'OneOf(campdavern, ontariosoldestsummercamps)']	Unknown	wiki
372	995	Emily often holds tenured and high-ranking positions at her workplace.	['If people publish journals, then they do not work in the entertainment industry.', 'All people who are award-winning novelists publish journals.', 'People either work in the entertainment industry or are highly acclaimed in their profession.', 'If people are highly acclaimed in their profession, then they often hold tenured and high-ranking positions at their workplace.', 'If people are highly acclaimed in their profession, then they often receive glowing feedback and recommendations from their colleagues.', 'If Emily is either both highly acclaimed in her profession and often holds tenured and high-ranking positions at her workplace, or she is neither highly acclaimed in her profession nor often holds tenured and high-ranking positions at her workplace, then Emily is not highly acclaimed in her profession. ']	['∀x (PublishJournals(x) → ¬Entertainment(x))', '∀x (Novelist(x) → PublishJournals(x))', '∀x (Entertainment(x) ∨ Acclaimed(x))', '∀x (Acclaimed(x) → Tenured(x))', '∀x (Acclaimed(x) → Glowing(x))', '(Acclaimed(emily) ∧ Tenured(emily)) ∨ (¬Acclaimed(emily) ∧ ¬Tenured(emily)) → ¬Acclaimed(emily)']	Unknown	hyb
372	996	Emily often receives glowing feedback and recommendations from their colleagues and is an award-winning novelist.	['If people publish journals, then they do not work in the entertainment industry.', 'All people who are award-winning novelists publish journals.', 'People either work in the entertainment industry or are highly acclaimed in their profession.', 'If people are highly acclaimed in their profession, then they often hold tenured and high-ranking positions at their workplace.', 'If people are highly acclaimed in their profession, then they often receive glowing feedback and recommendations from their colleagues.', 'If Emily is either both highly acclaimed in her profession and often holds tenured and high-ranking positions at her workplace, or she is neither highly acclaimed in her profession nor often holds tenured and high-ranking positions at her workplace, then Emily is not highly acclaimed in her profession. ']	['∀x (PublishJournals(x) → ¬Entertainment(x))', '∀x (Novelist(x) → PublishJournals(x))', '∀x (Entertainment(x) ∨ Acclaimed(x))', '∀x (Acclaimed(x) → Tenured(x))', '∀x (Acclaimed(x) → Glowing(x))', '(Acclaimed(emily) ∧ Tenured(emily)) ∨ (¬Acclaimed(emily) ∧ ¬Tenured(emily)) → ¬Acclaimed(emily)']	False	hyb
372	997	If Emily either often receives glowing feedback and recommendations from her colleagues or is an award-winning novelist, then Emily does not both publish journals and is an award-winning novelist.	['If people publish journals, then they do not work in the entertainment industry.', 'All people who are award-winning novelists publish journals.', 'People either work in the entertainment industry or are highly acclaimed in their profession.', 'If people are highly acclaimed in their profession, then they often hold tenured and high-ranking positions at their workplace.', 'If people are highly acclaimed in their profession, then they often receive glowing feedback and recommendations from their colleagues.', 'If Emily is either both highly acclaimed in her profession and often holds tenured and high-ranking positions at her workplace, or she is neither highly acclaimed in her profession nor often holds tenured and high-ranking positions at her workplace, then Emily is not highly acclaimed in her profession. ']	['∀x (PublishJournals(x) → ¬Entertainment(x))', '∀x (Novelist(x) → PublishJournals(x))', '∀x (Entertainment(x) ∨ Acclaimed(x))', '∀x (Acclaimed(x) → Tenured(x))', '∀x (Acclaimed(x) → Glowing(x))', '(Acclaimed(emily) ∧ Tenured(emily)) ∨ (¬Acclaimed(emily) ∧ ¬Tenured(emily)) → ¬Acclaimed(emily)']	True	hyb
10	25	Megan Whalen Turner worked with Greenwillow Books.	['Thick as Thieves is a young adult fantasy novel, written by Megan Whalen Turner.', 'Thick as Thieves was published by Greenwillow Books.', 'If a book was published by a company, than the author of that book worked with the company that published the book.', 'The fictional Mede Empire is where Thick as Thieves is set.', 'The Mede Empire plots to swallow up some nearby countries.', 'Attolia and Sounis are countries near the Mede Empire.', 'Thick as Thieves was sold both as a hardcover and an e-book.']	['YoungAdultFantasyNovel(thickastheives) ∧ WrittenBy(thickastheives, megan)', 'PublishedBy(thickastheives, greenwillowbooks)', '∀x ∀y ∀z (WrittenBy(x, y) ∧ PublishedBy(x, z) → WorkedWith(y, z))', 'Fictional(medeempire) ∧ SetIn(thickastheives, medeempire)', '∃x (Country(x) Nearby(medeempire, x) ∧ PlotsToSwallowUp(medeempire, x))', 'Country(attolia) ∧ Nearby(medeempire, attolia) ∧ Country(sounis) ∧ Nearby(medeempire, sounis)', 'SoldAs(thickastheives, hardcover) ∧ SoldAs(thickastheives, softcover)']	True	wiki
10	26	The Mede Empire plans to swallow up Attolia.	['Thick as Thieves is a young adult fantasy novel, written by Megan Whalen Turner.', 'Thick as Thieves was published by Greenwillow Books.', 'If a book was published by a company, than the author of that book worked with the company that published the book.', 'The fictional Mede Empire is where Thick as Thieves is set.', 'The Mede Empire plots to swallow up some nearby countries.', 'Attolia and Sounis are countries near the Mede Empire.', 'Thick as Thieves was sold both as a hardcover and an e-book.']	['YoungAdultFantasyNovel(thickastheives) ∧ WrittenBy(thickastheives, megan)', 'PublishedBy(thickastheives, greenwillowbooks)', '∀x ∀y ∀z (WrittenBy(x, y) ∧ PublishedBy(x, z) → WorkedWith(y, z))', 'Fictional(medeempire) ∧ SetIn(thickastheives, medeempire)', '∃x (Country(x) Nearby(medeempire, x) ∧ PlotsToSwallowUp(medeempire, x))', 'Country(attolia) ∧ Nearby(medeempire, attolia) ∧ Country(sounis) ∧ Nearby(medeempire, sounis)', 'SoldAs(thickastheives, hardcover) ∧ SoldAs(thickastheives, softcover)']	Unknown	wiki
10	27	Thick as Thieves is not set in the mede empire.	['Thick as Thieves is a young adult fantasy novel, written by Megan Whalen Turner.', 'Thick as Thieves was published by Greenwillow Books.', 'If a book was published by a company, than the author of that book worked with the company that published the book.', 'The fictional Mede Empire is where Thick as Thieves is set.', 'The Mede Empire plots to swallow up some nearby countries.', 'Attolia and Sounis are countries near the Mede Empire.', 'Thick as Thieves was sold both as a hardcover and an e-book.']	['YoungAdultFantasyNovel(thickastheives) ∧ WrittenBy(thickastheives, megan)', 'PublishedBy(thickastheives, greenwillowbooks)', '∀x ∀y ∀z (WrittenBy(x, y) ∧ PublishedBy(x, z) → WorkedWith(y, z))', 'Fictional(medeempire) ∧ SetIn(thickastheives, medeempire)', '∃x (Country(x) Nearby(medeempire, x) ∧ PlotsToSwallowUp(medeempire, x))', 'Country(attolia) ∧ Nearby(medeempire, attolia) ∧ Country(sounis) ∧ Nearby(medeempire, sounis)', 'SoldAs(thickastheives, hardcover) ∧ SoldAs(thickastheives, softcover)']	False	wiki
10	28	Megan Whalen Turner did not work with Greenwillow Books.	['Thick as Thieves is a young adult fantasy novel, written by Megan Whalen Turner.', 'Thick as Thieves was published by Greenwillow Books.', 'If a book was published by a company, than the author of that book worked with the company that published the book.', 'The fictional Mede Empire is where Thick as Thieves is set.', 'The Mede Empire plots to swallow up some nearby countries.', 'Attolia and Sounis are countries near the Mede Empire.', 'Thick as Thieves was sold both as a hardcover and an e-book.']	['YoungAdultFantasyNovel(thickastheives) ∧ WrittenBy(thickastheives, megan)', 'PublishedBy(thickastheives, greenwillowbooks)', '∀x ∀y ∀z (WrittenBy(x, y) ∧ PublishedBy(x, z) → WorkedWith(y, z))', 'Fictional(medeempire) ∧ SetIn(thickastheives, medeempire)', '∃x (Country(x) Nearby(medeempire, x) ∧ PlotsToSwallowUp(medeempire, x))', 'Country(attolia) ∧ Nearby(medeempire, attolia) ∧ Country(sounis) ∧ Nearby(medeempire, sounis)', 'SoldAs(thickastheives, hardcover) ∧ SoldAs(thickastheives, softcover)']	False	wiki
116	351	There is a tablet computer that was announced by a German.	['WeTab is a MeeGo-based tablet computer.', 'There is a WeTab product.', 'WeTab was announced by Neofonie.', 'Neofonie is a German producer.', 'Germans speak English or German.']	['∀x (WeTab(x) → MeeGoBased(x) ∧ TabletComputer(x))', '∃x (WeTab(x))', '∀x (WeTab(x) → Announce(neofonie, x))', 'German(neofonie) ∧ Producer(neofonie)', '∀x (German(x) → Speak(x, english) ∨ Speak(x, german))']	True	wiki
116	352	Neofonie doesn't speak English or German.	['WeTab is a MeeGo-based tablet computer.', 'There is a WeTab product.', 'WeTab was announced by Neofonie.', 'Neofonie is a German producer.', 'Germans speak English or German.']	['∀x (WeTab(x) → MeeGoBased(x) ∧ TabletComputer(x))', '∃x (WeTab(x))', '∀x (WeTab(x) → Announce(neofonie, x))', 'German(neofonie) ∧ Producer(neofonie)', '∀x (German(x) → Speak(x, english) ∨ Speak(x, german))']	False	wiki
419	1186	James is good at math.	['Some employees working in business analysis are good at math. ', 'All employees working in business analysis are working in this company. ', 'No employees working in this company are from China. ', 'All employees working in software engineering are from China. ', 'James is working in software engineering. ']	['∃x ( BusinessAnalysis(x) ∧ GoodAtMath(x))', '∀x (BusinessAnalysis(x) → WorkInCompany(x))', '∀x (WorkInCompany(x) → ¬FromChina(x))', '∀x (SoftwareEngineering(x) → FromChina(x))', 'SoftwareEngineering(james)']	Unknown	hyb
419	1187	James is not good at math and he is working in business analysis.	['Some employees working in business analysis are good at math. ', 'All employees working in business analysis are working in this company. ', 'No employees working in this company are from China. ', 'All employees working in software engineering are from China. ', 'James is working in software engineering. ']	['∃x ( BusinessAnalysis(x) ∧ GoodAtMath(x))', '∀x (BusinessAnalysis(x) → WorkInCompany(x))', '∀x (WorkInCompany(x) → ¬FromChina(x))', '∀x (SoftwareEngineering(x) → FromChina(x))', 'SoftwareEngineering(james)']	False	hyb
419	1188	If James is not good at math and he is in business analysis, then he is neither working in this company nor working in software engineering.	['Some employees working in business analysis are good at math. ', 'All employees working in business analysis are working in this company. ', 'No employees working in this company are from China. ', 'All employees working in software engineering are from China. ', 'James is working in software engineering. ']	['∃x ( BusinessAnalysis(x) ∧ GoodAtMath(x))', '∀x (BusinessAnalysis(x) → WorkInCompany(x))', '∀x (WorkInCompany(x) → ¬FromChina(x))', '∀x (SoftwareEngineering(x) → FromChina(x))', 'SoftwareEngineering(james)']	True	hyb
157	452	Blueberries were the most popular fruit at the party.	['The party provides five kinds of fruits: strawberry, orange, blueberry, grape, and cherry.', 'All fruits are provided in the same weight at the beginning of the party.', 'If the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit.', 'At the end of the party, strawberries had the lowest remaining weight.', 'At the end of the party, the amount of leftover blueberries was lower than that of cherries.', 'Benjamin only ate oranges and grapes at the party.']	['Party(strawberry) ∨ Party(orange) ∨ Party(blueberry) ∨ Party(grape) ∨ Party(cherry) ', '∀x (Party(x) → SameWeight(x))', '∀x (LowestAmount(x) → MostPopular(x)) ', 'LowestAmount(strawberries)', 'Lower(blueberry, cherry)', 'Eat(orange, benjamin) ∧ Eat(grape, benjamin) ∧ ¬Eat(blueberry, benjamin) ∧ ¬Eat(cherry, benjamin) ∧ ¬Eat(strawberry, benjamin)']	Unknown	wiki
157	453	Cherries were the most popular fruit at the party.	['The party provides five kinds of fruits: strawberry, orange, blueberry, grape, and cherry.', 'All fruits are provided in the same weight at the beginning of the party.', 'If the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit.', 'At the end of the party, strawberries had the lowest remaining weight.', 'At the end of the party, the amount of leftover blueberries was lower than that of cherries.', 'Benjamin only ate oranges and grapes at the party.']	['Party(strawberry) ∨ Party(orange) ∨ Party(blueberry) ∨ Party(grape) ∨ Party(cherry) ', '∀x (Party(x) → SameWeight(x))', '∀x (LowestAmount(x) → MostPopular(x)) ', 'LowestAmount(strawberries)', 'Lower(blueberry, cherry)', 'Eat(orange, benjamin) ∧ Eat(grape, benjamin) ∧ ¬Eat(blueberry, benjamin) ∧ ¬Eat(cherry, benjamin) ∧ ¬Eat(strawberry, benjamin)']	Unknown	wiki
157	454	Benjamin ate blueberries at the party.	['The party provides five kinds of fruits: strawberry, orange, blueberry, grape, and cherry.', 'All fruits are provided in the same weight at the beginning of the party.', 'If the fruit had the lowest remaining weight at the end of the party, then it means it was the most popular fruit.', 'At the end of the party, strawberries had the lowest remaining weight.', 'At the end of the party, the amount of leftover blueberries was lower than that of cherries.', 'Benjamin only ate oranges and grapes at the party.']	['Party(strawberry) ∨ Party(orange) ∨ Party(blueberry) ∨ Party(grape) ∨ Party(cherry) ', '∀x (Party(x) → SameWeight(x))', '∀x (LowestAmount(x) → MostPopular(x)) ', 'LowestAmount(strawberries)', 'Lower(blueberry, cherry)', 'Eat(orange, benjamin) ∧ Eat(grape, benjamin) ∧ ¬Eat(blueberry, benjamin) ∧ ¬Eat(cherry, benjamin) ∧ ¬Eat(strawberry, benjamin)']	False	wiki
63	187	James attends the conference but not in person.	['All students who attend in person have registered for the conference. ', 'Students either attend the conference in person or remotely. ', 'No students from China attend the conference remotely. ', 'James attends the conference but he does not attend the conference remotely.', 'Jack attends the conference and he is a student from China.']	['∀x (Attend(x) → Registered(x))', '∀x (Attend(x) → InPerson(x) ⊕ Remotely(x))', '∀x ((Attend(x) ∧ China(x)) → ¬Remotely(x))', 'Attend(james) ∧ ¬Remotely(james)', 'China(jack) ∧ Attend(jack)']	False	wiki
63	188	Jack attends the conference in person.	['All students who attend in person have registered for the conference. ', 'Students either attend the conference in person or remotely. ', 'No students from China attend the conference remotely. ', 'James attends the conference but he does not attend the conference remotely.', 'Jack attends the conference and he is a student from China.']	['∀x (Attend(x) → Registered(x))', '∀x (Attend(x) → InPerson(x) ⊕ Remotely(x))', '∀x ((Attend(x) ∧ China(x)) → ¬Remotely(x))', 'Attend(james) ∧ ¬Remotely(james)', 'China(jack) ∧ Attend(jack)']	True	wiki
63	189	Jack has registered for the conference.	['All students who attend in person have registered for the conference. ', 'Students either attend the conference in person or remotely. ', 'No students from China attend the conference remotely. ', 'James attends the conference but he does not attend the conference remotely.', 'Jack attends the conference and he is a student from China.']	['∀x (Attend(x) → Registered(x))', '∀x (Attend(x) → InPerson(x) ⊕ Remotely(x))', '∀x ((Attend(x) ∧ China(x)) → ¬Remotely(x))', 'Attend(james) ∧ ¬Remotely(james)', 'China(jack) ∧ Attend(jack)']	True	wiki
223	633	David Ha'ivri is an Israeli citizen.	["David Ha'ivri is a political strategist. ", 'If you are born in Israel to at least one Israeli parent, then you receive citizenship at birth. ', "David Ha'ivri emigrated to the United States from Israel, where he was born to Israeli parents. ", 'Several Zionist leaders have been elected to the Shomron Regional Municipal council. ', "David Ha'ivri is a Zionist leader. "]	['PoliticalStrategist(davidhaivri)', '∀x ∃y (BornInIsrael(x) ∧ ParentOf(x, y) ∧ Israeli(y) → IsraeliCitizen(x))', '∃x (EmigratedTo(davidhaivri, america) ∧ BornInIsrael(davidhaivri) ∧ ParentOf(davidhaivri, x) ∧ Israeli(x))', '∃x (ZionistLeader(x) ∧ ElectedTo(x, shomronmunicipalcouncil))', 'ZionstLeader(davidhaivri)']	True	wiki
223	634	David Ha'ivri is a United States citizen.	["David Ha'ivri is a political strategist. ", 'If you are born in Israel to at least one Israeli parent, then you receive citizenship at birth. ', "David Ha'ivri emigrated to the United States from Israel, where he was born to Israeli parents. ", 'Several Zionist leaders have been elected to the Shomron Regional Municipal council. ', "David Ha'ivri is a Zionist leader. "]	['PoliticalStrategist(davidhaivri)', '∀x ∃y (BornInIsrael(x) ∧ ParentOf(x, y) ∧ Israeli(y) → IsraeliCitizen(x))', '∃x (EmigratedTo(davidhaivri, america) ∧ BornInIsrael(davidhaivri) ∧ ParentOf(davidhaivri, x) ∧ Israeli(x))', '∃x (ZionistLeader(x) ∧ ElectedTo(x, shomronmunicipalcouncil))', 'ZionstLeader(davidhaivri)']	Unknown	wiki
223	635	David Ha'ivri has been elected to the Shomron Regional Municipal council.	["David Ha'ivri is a political strategist. ", 'If you are born in Israel to at least one Israeli parent, then you receive citizenship at birth. ', "David Ha'ivri emigrated to the United States from Israel, where he was born to Israeli parents. ", 'Several Zionist leaders have been elected to the Shomron Regional Municipal council. ', "David Ha'ivri is a Zionist leader. "]	['PoliticalStrategist(davidhaivri)', '∀x ∃y (BornInIsrael(x) ∧ ParentOf(x, y) ∧ Israeli(y) → IsraeliCitizen(x))', '∃x (EmigratedTo(davidhaivri, america) ∧ BornInIsrael(davidhaivri) ∧ ParentOf(davidhaivri, x) ∧ Israeli(x))', '∃x (ZionistLeader(x) ∧ ElectedTo(x, shomronmunicipalcouncil))', 'ZionstLeader(davidhaivri)']	Unknown	wiki
1	3	Either Mary or Susan has influenza.	['Mary has the flu.', 'Flu and influenza are the same disease.', "Susan doesn't have influenza."]	['Have(mary, flu)', '∀x (Have(x, flu) ↔ Have(x, influenza))', '¬Have(susan, influenza)']	True	wiki
42	121	No lawyer ever sat in the House of Commons.	['James Cocks was a British lawyer.', 'James Cocks was a Whig politician who sat in the House of Commons.', 'A British is a European.', 'Any lawyer is familiar with laws.', 'Some Whigs speak French.']	['British(james) ∧ Lawyer(james)', 'Whig(james) ∧ Politician(james) ∧ SatInHouseOfCommons(james)', '∀x (British(x) → European(x))', '∀x (Lawyer(x) → FamiliarWithLaws(x))', '∃x (Whig(x) ∧ SpeakFrench(x))']	False	wiki
42	122	Some European is familiar with laws.	['James Cocks was a British lawyer.', 'James Cocks was a Whig politician who sat in the House of Commons.', 'A British is a European.', 'Any lawyer is familiar with laws.', 'Some Whigs speak French.']	['British(james) ∧ Lawyer(james)', 'Whig(james) ∧ Politician(james) ∧ SatInHouseOfCommons(james)', '∀x (British(x) → European(x))', '∀x (Lawyer(x) → FamiliarWithLaws(x))', '∃x (Whig(x) ∧ SpeakFrench(x))']	True	wiki
42	123	James Cocks speaks French.	['James Cocks was a British lawyer.', 'James Cocks was a Whig politician who sat in the House of Commons.', 'A British is a European.', 'Any lawyer is familiar with laws.', 'Some Whigs speak French.']	['British(james) ∧ Lawyer(james)', 'Whig(james) ∧ Politician(james) ∧ SatInHouseOfCommons(james)', '∀x (British(x) → European(x))', '∀x (Lawyer(x) → FamiliarWithLaws(x))', '∃x (Whig(x) ∧ SpeakFrench(x))']	Unknown	wiki
122	365	Beasts of prey is a fantasy novel.	['Beasts of Prey is either a fantasy novel or a science fiction novel.', 'Science fiction novels are not about mythological creatures', 'Beasts of Prey Is about a creature known as the Shetani.', 'Shetanis are mythological.']	['Novel(beastsofprey) ∧ Fantasy(beastsofprey) ∨ ScienceFiction(beastsofprey)', '∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))', 'About(beastsofprey, shetani) ∧ Creature(shetani)', 'Mythological(shetani)']	True	wiki
122	366	Beasts of prey isn't a science fiction novel.	['Beasts of Prey is either a fantasy novel or a science fiction novel.', 'Science fiction novels are not about mythological creatures', 'Beasts of Prey Is about a creature known as the Shetani.', 'Shetanis are mythological.']	['Novel(beastsofprey) ∧ Fantasy(beastsofprey) ∨ ScienceFiction(beastsofprey)', '∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))', 'About(beastsofprey, shetani) ∧ Creature(shetani)', 'Mythological(shetani)']	True	wiki
122	367	A shetani is either mythological or a creature.	['Beasts of Prey is either a fantasy novel or a science fiction novel.', 'Science fiction novels are not about mythological creatures', 'Beasts of Prey Is about a creature known as the Shetani.', 'Shetanis are mythological.']	['Novel(beastsofprey) ∧ Fantasy(beastsofprey) ∨ ScienceFiction(beastsofprey)', '∀x ∀y (ScienceFiction(x) ∧ Mythological(y) ∧ Creature(y) → ¬About(x, y))', 'About(beastsofprey, shetani) ∧ Creature(shetani)', 'Mythological(shetani)']	False	wiki
17	47	Jack Odell is a notable people.	['Odell is an English surname originating in Odell, Bedfordshire.', "In some families Odell is spelled O'Dell, in a mistaken Irish adaptation.", 'Notable people with the surname include Amy Odell, Jack Odell, and Mats Odell.', 'Amy Odell is a British singer-songwriter.', 'Jack Odell is an English toy inventor.']	['∀x (Odell(x) → Surname(x))', '∃x (Odell(x) ∧ SpelledODell(x))', 'Odell(amyOdell) ∧ NotablePeople(amyOdell) ∧ Odell(jackOdell) ∧ NotablePeople(jackOdell) ∧ Odell(matsOdell) ∧ NotablePeople(matsOdell)', 'British(amyOdell) ∧ Singer(amyOdell) ∧ SongWriter(amyOdell)', 'English(jackOdell) ∧ ToyInvertor(jackOdell)']	True	wiki
17	48	Odell is Amy Odell's surname.	['Odell is an English surname originating in Odell, Bedfordshire.', "In some families Odell is spelled O'Dell, in a mistaken Irish adaptation.", 'Notable people with the surname include Amy Odell, Jack Odell, and Mats Odell.', 'Amy Odell is a British singer-songwriter.', 'Jack Odell is an English toy inventor.']	['∀x (Odell(x) → Surname(x))', '∃x (Odell(x) ∧ SpelledODell(x))', 'Odell(amyOdell) ∧ NotablePeople(amyOdell) ∧ Odell(jackOdell) ∧ NotablePeople(jackOdell) ∧ Odell(matsOdell) ∧ NotablePeople(matsOdell)', 'British(amyOdell) ∧ Singer(amyOdell) ∧ SongWriter(amyOdell)', 'English(jackOdell) ∧ ToyInvertor(jackOdell)']	True	wiki
17	49	Amy Odell is an English toy inventor.	['Odell is an English surname originating in Odell, Bedfordshire.', "In some families Odell is spelled O'Dell, in a mistaken Irish adaptation.", 'Notable people with the surname include Amy Odell, Jack Odell, and Mats Odell.', 'Amy Odell is a British singer-songwriter.', 'Jack Odell is an English toy inventor.']	['∀x (Odell(x) → Surname(x))', '∃x (Odell(x) ∧ SpelledODell(x))', 'Odell(amyOdell) ∧ NotablePeople(amyOdell) ∧ Odell(jackOdell) ∧ NotablePeople(jackOdell) ∧ Odell(matsOdell) ∧ NotablePeople(matsOdell)', 'British(amyOdell) ∧ Singer(amyOdell) ∧ SongWriter(amyOdell)', 'English(jackOdell) ∧ ToyInvertor(jackOdell)']	Unknown	wiki
17	50	Amy Odell is also Amy O'dell.	['Odell is an English surname originating in Odell, Bedfordshire.', "In some families Odell is spelled O'Dell, in a mistaken Irish adaptation.", 'Notable people with the surname include Amy Odell, Jack Odell, and Mats Odell.', 'Amy Odell is a British singer-songwriter.', 'Jack Odell is an English toy inventor.']	['∀x (Odell(x) → Surname(x))', '∃x (Odell(x) ∧ SpelledODell(x))', 'Odell(amyOdell) ∧ NotablePeople(amyOdell) ∧ Odell(jackOdell) ∧ NotablePeople(jackOdell) ∧ Odell(matsOdell) ∧ NotablePeople(matsOdell)', 'British(amyOdell) ∧ Singer(amyOdell) ∧ SongWriter(amyOdell)', 'English(jackOdell) ∧ ToyInvertor(jackOdell)']	Unknown	wiki
167	482	Mary gets from New Haven to New York City by train.	['If you go somewhere by train, you will not lose time.', 'If you go somewhere by car and meet traffic jam, you will lose time.', 'If you lose time, you will be late for work.', 'Mary can get from New Haven to New York City either by train or car.', 'Mary is late for work.']	['∀x (Train(x) → ¬LoseTime(x))', '∀x ((Car(x) ∧ MeetJam(x)) → LoseTime(x))', '∀x (LoseTime(x) ↔ LateForWork(x))', 'Train(mary) ⊕ Car(mary)', 'LateForWork(mary)']	False	wiki
167	483	Mary gets from New Haven to New York City by car.	['If you go somewhere by train, you will not lose time.', 'If you go somewhere by car and meet traffic jam, you will lose time.', 'If you lose time, you will be late for work.', 'Mary can get from New Haven to New York City either by train or car.', 'Mary is late for work.']	['∀x (Train(x) → ¬LoseTime(x))', '∀x ((Car(x) ∧ MeetJam(x)) → LoseTime(x))', '∀x (LoseTime(x) ↔ LateForWork(x))', 'Train(mary) ⊕ Car(mary)', 'LateForWork(mary)']	True	wiki
167	484	Mary meets traffic jam.	['If you go somewhere by train, you will not lose time.', 'If you go somewhere by car and meet traffic jam, you will lose time.', 'If you lose time, you will be late for work.', 'Mary can get from New Haven to New York City either by train or car.', 'Mary is late for work.']	['∀x (Train(x) → ¬LoseTime(x))', '∀x ((Car(x) ∧ MeetJam(x)) → LoseTime(x))', '∀x (LoseTime(x) ↔ LateForWork(x))', 'Train(mary) ⊕ Car(mary)', 'LateForWork(mary)']	Unknown	wiki
297	746	If a person is not hungry, the person is unhappy.	['If a person is hungry, the person is uncomfortable.', 'If a person is uncomfortable, the person is unhappy.']	['∀x (Hungry(x) → Uncomfortable(x))', '∀x (Uncomfortable(x) → ¬Happy(x))']	Unknown	wiki
309	769	Mary is a white-collar worker.	['Tipped employees do not get a guaranteed minimum wage.', 'If a person is a white-collar worker, they will get a guaranteed minimum wage (All white-collar workers get a guaranteed minimum wage).', 'All lawyers are white-collar workers.', 'Every advocate is a lawyer.', 'Mary is not a lawyer or a tipped employee.']	['∀x (Tipped(x) → ¬GetMinWage(x))', '∀x (WhiteCollar(x) → GetMinWage(x))', '∀x (Lawyer(x) → WhiteCollar(x))', '∀x (Advocate(x) → Lawyer(x))', '¬Lawyer(mary) ⊕ Tipped(mary)']	Unknown	hyb
309	770	Mary is an advocate.	['Tipped employees do not get a guaranteed minimum wage.', 'If a person is a white-collar worker, they will get a guaranteed minimum wage (All white-collar workers get a guaranteed minimum wage).', 'All lawyers are white-collar workers.', 'Every advocate is a lawyer.', 'Mary is not a lawyer or a tipped employee.']	['∀x (Tipped(x) → ¬GetMinWage(x))', '∀x (WhiteCollar(x) → GetMinWage(x))', '∀x (Lawyer(x) → WhiteCollar(x))', '∀x (Advocate(x) → Lawyer(x))', '¬Lawyer(mary) ⊕ Tipped(mary)']	False	hyb
309	771	Mary is not an advocate.	['Tipped employees do not get a guaranteed minimum wage.', 'If a person is a white-collar worker, they will get a guaranteed minimum wage (All white-collar workers get a guaranteed minimum wage).', 'All lawyers are white-collar workers.', 'Every advocate is a lawyer.', 'Mary is not a lawyer or a tipped employee.']	['∀x (Tipped(x) → ¬GetMinWage(x))', '∀x (WhiteCollar(x) → GetMinWage(x))', '∀x (Lawyer(x) → WhiteCollar(x))', '∀x (Advocate(x) → Lawyer(x))', '¬Lawyer(mary) ⊕ Tipped(mary)']	True	hyb
309	772	Mary is either an advocate or a tipped employee.	['Tipped employees do not get a guaranteed minimum wage.', 'If a person is a white-collar worker, they will get a guaranteed minimum wage (All white-collar workers get a guaranteed minimum wage).', 'All lawyers are white-collar workers.', 'Every advocate is a lawyer.', 'Mary is not a lawyer or a tipped employee.']	['∀x (Tipped(x) → ¬GetMinWage(x))', '∀x (WhiteCollar(x) → GetMinWage(x))', '∀x (Lawyer(x) → WhiteCollar(x))', '∀x (Advocate(x) → Lawyer(x))', '¬Lawyer(mary) ⊕ Tipped(mary)']	False	hyb
309	773	If Mary is not an advocate and gets a guaranteed minimum wage, she is not a tipped employee.	['Tipped employees do not get a guaranteed minimum wage.', 'If a person is a white-collar worker, they will get a guaranteed minimum wage (All white-collar workers get a guaranteed minimum wage).', 'All lawyers are white-collar workers.', 'Every advocate is a lawyer.', 'Mary is not a lawyer or a tipped employee.']	['∀x (Tipped(x) → ¬GetMinWage(x))', '∀x (WhiteCollar(x) → GetMinWage(x))', '∀x (Lawyer(x) → WhiteCollar(x))', '∀x (Advocate(x) → Lawyer(x))', '¬Lawyer(mary) ⊕ Tipped(mary)']	True	hyb
309	774	If Mary is either an advocate or a tipped employee, she is an advocate.	['Tipped employees do not get a guaranteed minimum wage.', 'If a person is a white-collar worker, they will get a guaranteed minimum wage (All white-collar workers get a guaranteed minimum wage).', 'All lawyers are white-collar workers.', 'Every advocate is a lawyer.', 'Mary is not a lawyer or a tipped employee.']	['∀x (Tipped(x) → ¬GetMinWage(x))', '∀x (WhiteCollar(x) → GetMinWage(x))', '∀x (Lawyer(x) → WhiteCollar(x))', '∀x (Advocate(x) → Lawyer(x))', '¬Lawyer(mary) ⊕ Tipped(mary)']	True	hyb
76	232	Asa Hoffmann is a New Yorkers.	['Asa Hoffmann was born in New York City.', 'Asa Hoffman lives in Manhattan.', 'Asa Hoffman is a chess player.', 'Some chess players are grandmasters.', 'People born and living in New York City are New Yorkers.', 'People liviing in Manhattan live in New York City.']	['BornIn(asaHoffmann, newyorkcity)', 'LivesIn(asaHoffmann, manhattan)', 'IsChessPlayer(asaHoffmann)', '∃x (IsChestPlayer(x) ∧ IsGrandMaster(x))', '∀x (BornIn(x, newyorkcity) ∧ LivesIn(x, newyorkcity) → IsNewYorker(x))', '∀x (LivesIn(x, manhattan) → LivesIn(x, newyorkcity))']	True	wiki
76	233	Asa Hoffmann is a grandmaster.	['Asa Hoffmann was born in New York City.', 'Asa Hoffman lives in Manhattan.', 'Asa Hoffman is a chess player.', 'Some chess players are grandmasters.', 'People born and living in New York City are New Yorkers.', 'People liviing in Manhattan live in New York City.']	['BornIn(asaHoffmann, newyorkcity)', 'LivesIn(asaHoffmann, manhattan)', 'IsChessPlayer(asaHoffmann)', '∃x (IsChestPlayer(x) ∧ IsGrandMaster(x))', '∀x (BornIn(x, newyorkcity) ∧ LivesIn(x, newyorkcity) → IsNewYorker(x))', '∀x (LivesIn(x, manhattan) → LivesIn(x, newyorkcity))']	Unknown	wiki
76	234	Asa Hoffmann does not live in New York.	['Asa Hoffmann was born in New York City.', 'Asa Hoffman lives in Manhattan.', 'Asa Hoffman is a chess player.', 'Some chess players are grandmasters.', 'People born and living in New York City are New Yorkers.', 'People liviing in Manhattan live in New York City.']	['BornIn(asaHoffmann, newyorkcity)', 'LivesIn(asaHoffmann, manhattan)', 'IsChessPlayer(asaHoffmann)', '∃x (IsChestPlayer(x) ∧ IsGrandMaster(x))', '∀x (BornIn(x, newyorkcity) ∧ LivesIn(x, newyorkcity) → IsNewYorker(x))', '∀x (LivesIn(x, manhattan) → LivesIn(x, newyorkcity))']	False	wiki
313	784	Philip got a Schengen Visa.	['Some of those who apply for a Schengen Visa get it.', 'To apply for a Schengen Visa, you need to provide financial guarantees.', 'If you need to provide financial guarantees, you must request documents from the bank.', 'Do not close your bank account if you request documents from the bank.', 'Philip closed his bank account.']	['∃x (ApplyVisa(x) → GetVisa(x))', '∀x (ApplyVisa(x) → FinancialGuarantees(x))', '∀x (FinancialGuarantees(x) → RequestDocuments(x))', '∀x (RequestDocuments(x) → ¬CloseBankAccount(x))', 'CloseBankAccount(philip)']	Unknown	hyb
313	785	Philip applied for a Schengen Visa and got it.	['Some of those who apply for a Schengen Visa get it.', 'To apply for a Schengen Visa, you need to provide financial guarantees.', 'If you need to provide financial guarantees, you must request documents from the bank.', 'Do not close your bank account if you request documents from the bank.', 'Philip closed his bank account.']	['∃x (ApplyVisa(x) → GetVisa(x))', '∀x (ApplyVisa(x) → FinancialGuarantees(x))', '∀x (FinancialGuarantees(x) → RequestDocuments(x))', '∀x (RequestDocuments(x) → ¬CloseBankAccount(x))', 'CloseBankAccount(philip)']	False	hyb
313	786	If Philip did not request documents from the bank or get a Schengen Visa, he didn’t apply for a Schengen Visa.	['Some of those who apply for a Schengen Visa get it.', 'To apply for a Schengen Visa, you need to provide financial guarantees.', 'If you need to provide financial guarantees, you must request documents from the bank.', 'Do not close your bank account if you request documents from the bank.', 'Philip closed his bank account.']	['∃x (ApplyVisa(x) → GetVisa(x))', '∀x (ApplyVisa(x) → FinancialGuarantees(x))', '∀x (FinancialGuarantees(x) → RequestDocuments(x))', '∀x (RequestDocuments(x) → ¬CloseBankAccount(x))', 'CloseBankAccount(philip)']	True	hyb
296	745	No fears lead to terror.	['Some fears lead to anxiety.', 'Some anxiety leads to terror.']	['∃x (Fear(x) ∧ Anxiety(x))', '∃x (Anxiety(x) ∧ Terror(x))']	Unknown	wiki
208	598	Lake Erie has a major settlement.	['The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.', 'Some major settlements of Lake Erie are in NY, PA, OH, and MI.', 'NY, PA, OH, MI are states in the US.', 'ON is a state of Canada.', 'There is a major settlement of Lake Huron in ON. ', 'All states are in their country.', 'The US is in North America.', 'The Great Lakes began to form at the end of the Last Glacial Period.']	['∀x (GreatLake(x) → Superior(x) ∨ Michigan(x) ∨ Huron(x) ∨ Erie(x) ∨ Ontario(x))', '∃x ∀y (Erie(y) ∧ MajorSettlementOf(x, y) ∧ In(x, ny) ∨ In(x, pa) ∨ In(x, oh) ∨ In(x, mi))', 'State(ny, us) ∧ State(pa, us) ∧ State(oh, us) ∧ State(mi, us)', 'State(on, canada)', '∃x ∀y (Huron(y) ∧ MajorSettlementOf(x, y) ∧ In(x, on))', '∀x ∀y (State(x, y) → In(x, y))', 'In(us, northamerica)', '∀x (GreatLake(x) → FormAtEndOf(x, lastglacialperiod))']	True	wiki
208	599	There is a great lake that did not form at the end of the Last Glacial Period.	['The Great Lakes are Lake Superior, Lake Michigan, Lake Huron, Lake Erie, and Lake Ontario.', 'Some major settlements of Lake Erie are in NY, PA, OH, and MI.', 'NY, PA, OH, MI are states in the US.', 'ON is a state of Canada.', 'There is a major settlement of Lake Huron in ON. ', 'All states are in their country.', 'The US is in North America.', 'The Great Lakes began to form at the end of the Last Glacial Period.']	['∀x (GreatLake(x) → Superior(x) ∨ Michigan(x) ∨ Huron(x) ∨ Erie(x) ∨ Ontario(x))', '∃x ∀y (Erie(y) ∧ MajorSettlementOf(x, y) ∧ In(x, ny) ∨ In(x, pa) ∨ In(x, oh) ∨ In(x, mi))', 'State(ny, us) ∧ State(pa, us) ∧ State(oh, us) ∧ State(mi, us)', 'State(on, canada)', '∃x ∀y (Huron(y) ∧ MajorSettlementOf(x, y) ∧ In(x, on))', '∀x ∀y (State(x, y) → In(x, y))', 'In(us, northamerica)', '∀x (GreatLake(x) → FormAtEndOf(x, lastglacialperiod))']	False	wiki
325	836	Stephen Curry is a professional basketball player.	['All defenders are soccer players.', 'No soccer players are professional basketball players.', 'All centerbacks are defenders.', 'All NBA players are professional basketball players.', 'If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player.']	['∀x (Defender(x) → SoccerPlayer(x))', '∀x (SoccerPlayer(x) → ¬ProfessionalBasketballPlayer(x))', '∀x (CenterBack(x) → Defender(x))', '∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))', '¬NBAPlayer(stephencurry) → ¬(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry))']	Unknown	hyb
325	837	Stephen Curry is a centerback.	['All defenders are soccer players.', 'No soccer players are professional basketball players.', 'All centerbacks are defenders.', 'All NBA players are professional basketball players.', 'If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player.']	['∀x (Defender(x) → SoccerPlayer(x))', '∀x (SoccerPlayer(x) → ¬ProfessionalBasketballPlayer(x))', '∀x (CenterBack(x) → Defender(x))', '∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))', '¬NBAPlayer(stephencurry) → ¬(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry))']	False	hyb
325	838	Stephen Curry is not a centerback.	['All defenders are soccer players.', 'No soccer players are professional basketball players.', 'All centerbacks are defenders.', 'All NBA players are professional basketball players.', 'If Stephen Curry is not an NBA player, then Stephen Curry is not an NBA player or a soccer player.']	['∀x (Defender(x) → SoccerPlayer(x))', '∀x (SoccerPlayer(x) → ¬ProfessionalBasketballPlayer(x))', '∀x (CenterBack(x) → Defender(x))', '∀x (NBAPlayer(x) → ProfessionalBasketballPlayer(x))', '¬NBAPlayer(stephencurry) → ¬(NBAPlayer(stephencurry) ⊕ SoccerPlayer(stephencurry))']	True	hyb
31	90	Thomas Gilovich proposed naive cynicism.	['Naive cynicism was proposed by Justin Kruger and a colleague.', 'Thomas Gilovich is a colleague of Justin Kruger. ', 'Naive cynicism is a philosophy of mind.']	['Proposed(justinKruger, naiveCynicism) ∧ Proposed(colleagueOfJustinKruger, naiveCynicism) ', 'Colleague(thomasGilovich, justinKruger)', 'PhilosophyOfMind(naiveCynicism)']	Unknown	wiki
31	91	Justin Kruger propose a philosophy of mind.	['Naive cynicism was proposed by Justin Kruger and a colleague.', 'Thomas Gilovich is a colleague of Justin Kruger. ', 'Naive cynicism is a philosophy of mind.']	['Proposed(justinKruger, naiveCynicism) ∧ Proposed(colleagueOfJustinKruger, naiveCynicism) ', 'Colleague(thomasGilovich, justinKruger)', 'PhilosophyOfMind(naiveCynicism)']	True	wiki
31	92	Thomas Gilovich worked on philiophies of mind.	['Naive cynicism was proposed by Justin Kruger and a colleague.', 'Thomas Gilovich is a colleague of Justin Kruger. ', 'Naive cynicism is a philosophy of mind.']	['Proposed(justinKruger, naiveCynicism) ∧ Proposed(colleagueOfJustinKruger, naiveCynicism) ', 'Colleague(thomasGilovich, justinKruger)', 'PhilosophyOfMind(naiveCynicism)']	Unknown	wiki
129	383	At least two people who have won the Turing Award worked in the field of artificial intelligence.	['', 'The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming and John McCarthy. ', 'Donald Knuth made major contributions to the analysis of algorithms.', 'Marvin Minsky is recognized by his contributions to the field of artificial intelligence.', 'Richard Hamming did research on numerical methods.', 'John McCarthy had a central role in creating and shaping the field of artificial inteligence. ']	['', 'TuringAwarded(donaldKnuth) ∧ TuringAwarded(marvinMinsky) ∧ TuringAwarded(richardHamming) ∧ TuringAwarded(johnMccarthy)', 'ContributedTo(donaldKnuth, algorithms)', 'ContributedTo(marvinMinsky, ai)', 'ContributedTo(richardHamming, numericalMethods)', 'ContributedTo(johnMccarthy, ai)']	True	wiki
129	384	At least two people who worked in the field of artificial intelligence have won the Turing Award.	['', 'The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming and John McCarthy. ', 'Donald Knuth made major contributions to the analysis of algorithms.', 'Marvin Minsky is recognized by his contributions to the field of artificial intelligence.', 'Richard Hamming did research on numerical methods.', 'John McCarthy had a central role in creating and shaping the field of artificial inteligence. ']	['', 'TuringAwarded(donaldKnuth) ∧ TuringAwarded(marvinMinsky) ∧ TuringAwarded(richardHamming) ∧ TuringAwarded(johnMccarthy)', 'ContributedTo(donaldKnuth, algorithms)', 'ContributedTo(marvinMinsky, ai)', 'ContributedTo(richardHamming, numericalMethods)', 'ContributedTo(johnMccarthy, ai)']	True	wiki
129	385	Only one people who have won the Turing Award made significant contributions to the analysis of algorithms.	['', 'The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming and John McCarthy. ', 'Donald Knuth made major contributions to the analysis of algorithms.', 'Marvin Minsky is recognized by his contributions to the field of artificial intelligence.', 'Richard Hamming did research on numerical methods.', 'John McCarthy had a central role in creating and shaping the field of artificial inteligence. ']	['', 'TuringAwarded(donaldKnuth) ∧ TuringAwarded(marvinMinsky) ∧ TuringAwarded(richardHamming) ∧ TuringAwarded(johnMccarthy)', 'ContributedTo(donaldKnuth, algorithms)', 'ContributedTo(marvinMinsky, ai)', 'ContributedTo(richardHamming, numericalMethods)', 'ContributedTo(johnMccarthy, ai)']	Unknown	wiki
129	386	No Turing Award winners worked in the field of numerical methods.	['', 'The Turing Award has been awarded to Donald Knuth, Marvin Minsky, Richard Hamming and John McCarthy. ', 'Donald Knuth made major contributions to the analysis of algorithms.', 'Marvin Minsky is recognized by his contributions to the field of artificial intelligence.', 'Richard Hamming did research on numerical methods.', 'John McCarthy had a central role in creating and shaping the field of artificial inteligence. ']	['', 'TuringAwarded(donaldKnuth) ∧ TuringAwarded(marvinMinsky) ∧ TuringAwarded(richardHamming) ∧ TuringAwarded(johnMccarthy)', 'ContributedTo(donaldKnuth, algorithms)', 'ContributedTo(marvinMinsky, ai)', 'ContributedTo(richardHamming, numericalMethods)', 'ContributedTo(johnMccarthy, ai)']	False	wiki
429	1224	2Sum is an easy Leetcode problem.	['No easy Leetcode problems have an AC rate lower than 20 percent. ', 'All Leetcode problems recommended to novices are easy.                                                                                                       ', 'Leetcode problems either have an AC rate lower than 20 percent or are starred by more than 1 thousand users. ', 'All hard Leetcode problems are starred by more than 1 thousand users. ', 'No Leetcode problems published after 2022 are starred by more than 1 thousand users. ', '2Sum is not recommended to novices and hard. ', '4Sum is either starred by more than 1 thousand users and published after 2022, or neither starred by more than 1 thousand users nor published after 2022. ']	['∀x (Easy(x) → ¬LowerAC(x))', '∀x (Recommended(x) → Easy(x))', '∀x (LowerAC(x) ⊕ Starred(x))', '∀x (Hard(x) → Starred(x))', '∀x (PublishedAfter2022(x) → ¬Starred(x))', '¬(Recommended(twosum) ∧ Hard(twosum))', '¬(Starred(foursum) ⊕ PublishedAfter2022(foursum))']	Unknown	hyb
429	1225	2Sum is not an easy Leetcode problem.	['No easy Leetcode problems have an AC rate lower than 20 percent. ', 'All Leetcode problems recommended to novices are easy.                                                                                                       ', 'Leetcode problems either have an AC rate lower than 20 percent or are starred by more than 1 thousand users. ', 'All hard Leetcode problems are starred by more than 1 thousand users. ', 'No Leetcode problems published after 2022 are starred by more than 1 thousand users. ', '2Sum is not recommended to novices and hard. ', '4Sum is either starred by more than 1 thousand users and published after 2022, or neither starred by more than 1 thousand users nor published after 2022. ']	['∀x (Easy(x) → ¬LowerAC(x))', '∀x (Recommended(x) → Easy(x))', '∀x (LowerAC(x) ⊕ Starred(x))', '∀x (Hard(x) → Starred(x))', '∀x (PublishedAfter2022(x) → ¬Starred(x))', '¬(Recommended(twosum) ∧ Hard(twosum))', '¬(Starred(foursum) ⊕ PublishedAfter2022(foursum))']	Unknown	hyb
429	1226	4Sum is a Leetcode problem recommended to the novice or is hard.	['No easy Leetcode problems have an AC rate lower than 20 percent. ', 'All Leetcode problems recommended to novices are easy.                                                                                                       ', 'Leetcode problems either have an AC rate lower than 20 percent or are starred by more than 1 thousand users. ', 'All hard Leetcode problems are starred by more than 1 thousand users. ', 'No Leetcode problems published after 2022 are starred by more than 1 thousand users. ', '2Sum is not recommended to novices and hard. ', '4Sum is either starred by more than 1 thousand users and published after 2022, or neither starred by more than 1 thousand users nor published after 2022. ']	['∀x (Easy(x) → ¬LowerAC(x))', '∀x (Recommended(x) → Easy(x))', '∀x (LowerAC(x) ⊕ Starred(x))', '∀x (Hard(x) → Starred(x))', '∀x (PublishedAfter2022(x) → ¬Starred(x))', '¬(Recommended(twosum) ∧ Hard(twosum))', '¬(Starred(foursum) ⊕ PublishedAfter2022(foursum))']	False	hyb
429	1227	4Sum is neither a 2Sum Leetcode problem recommended to the novice nor a Leetcode problem that's hard.	['No easy Leetcode problems have an AC rate lower than 20 percent. ', 'All Leetcode problems recommended to novices are easy.                                                                                                       ', 'Leetcode problems either have an AC rate lower than 20 percent or are starred by more than 1 thousand users. ', 'All hard Leetcode problems are starred by more than 1 thousand users. ', 'No Leetcode problems published after 2022 are starred by more than 1 thousand users. ', '2Sum is not recommended to novices and hard. ', '4Sum is either starred by more than 1 thousand users and published after 2022, or neither starred by more than 1 thousand users nor published after 2022. ']	['∀x (Easy(x) → ¬LowerAC(x))', '∀x (Recommended(x) → Easy(x))', '∀x (LowerAC(x) ⊕ Starred(x))', '∀x (Hard(x) → Starred(x))', '∀x (PublishedAfter2022(x) → ¬Starred(x))', '¬(Recommended(twosum) ∧ Hard(twosum))', '¬(Starred(foursum) ⊕ PublishedAfter2022(foursum))']	True	hyb
105	319	Show your love wasn't written by a member of a boy band.	['Show Your Love is a song recorded by the South Korean boy band BtoB 4u.', 'The lead single of the extended play Inside is Show Your Love.', 'Show Your Love contains a hopeful message.', 'BtoB 4u member Hyunsik wrote Show Your Love.', 'There is a music video for Show Your Love.']	['Song(showyourlove) ∧ RecordedBy(showyourlove, btob4u) ∧ SouthKorean(btob4u) ∧ BoyBand(btob4u)', 'ExtendedPlay(inside) ∧ LeadSingle(showyourlove) ∧ LeadSingleOf(showyourlove, inside)', 'Contains(showyourlove, hopefulmessage)', 'Member(hyunsik, btob4u) ∧ Wrote(hyunsik, showyourlove)', 'HasMusicVideo(showyourlove)']	False	wiki
105	320	A lead single of inside contains a a hopeful message.	['Show Your Love is a song recorded by the South Korean boy band BtoB 4u.', 'The lead single of the extended play Inside is Show Your Love.', 'Show Your Love contains a hopeful message.', 'BtoB 4u member Hyunsik wrote Show Your Love.', 'There is a music video for Show Your Love.']	['Song(showyourlove) ∧ RecordedBy(showyourlove, btob4u) ∧ SouthKorean(btob4u) ∧ BoyBand(btob4u)', 'ExtendedPlay(inside) ∧ LeadSingle(showyourlove) ∧ LeadSingleOf(showyourlove, inside)', 'Contains(showyourlove, hopefulmessage)', 'Member(hyunsik, btob4u) ∧ Wrote(hyunsik, showyourlove)', 'HasMusicVideo(showyourlove)']	True	wiki
105	321	Hyunsik is Korean.	['Show Your Love is a song recorded by the South Korean boy band BtoB 4u.', 'The lead single of the extended play Inside is Show Your Love.', 'Show Your Love contains a hopeful message.', 'BtoB 4u member Hyunsik wrote Show Your Love.', 'There is a music video for Show Your Love.']	['Song(showyourlove) ∧ RecordedBy(showyourlove, btob4u) ∧ SouthKorean(btob4u) ∧ BoyBand(btob4u)', 'ExtendedPlay(inside) ∧ LeadSingle(showyourlove) ∧ LeadSingleOf(showyourlove, inside)', 'Contains(showyourlove, hopefulmessage)', 'Member(hyunsik, btob4u) ∧ Wrote(hyunsik, showyourlove)', 'HasMusicVideo(showyourlove)']	Unknown	wiki
290	739	Some furniture are round.	['All tables are round.', 'Some furniture are tables.']	['∀x (Table(x) → Round(x))', '∃x (Furniture(x) ∧ Table(x))']	True	wiki
267	716	Some maladjusted individuals are products of broken homes.	['All juvenile delinquents are maladjusted individuals.', 'Some juvenile delinquents are products of broken homes.']	['∀x (JuvenileDelinquent(x) → MaladjustedIndividual(x))', '∃x (JuvenileDelinquent(x)  ∧ ProductOfBrokenHome(x))']	True	wiki
398	1089	Multivoxel (pattern) analysis is a brain decoding.	['Either brain reading or brain decoding. ', 'All brain decoding is extracting information from BOLD signals.', 'No extracting information from BOLD signals is without statistical pattern analysis. ', 'Writing a novel is without statistical pattern analysis.', 'If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.']	['∀x (BrainReading(x) ∨ BrainDecoding(x)) ', '∀x (BrainDecoding(x) → ExtractingInformationFromBOLDSignals(x))', '∀x (ExtractingInformationFromBOLDSignals(x) → ¬WithoutStatisticalPatternAnalysis(x))', '∀x (WritingANovel(x) → WithoutStatisticalPatternAnalysis(x)) ', 'WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis) → WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainDecoding(multivoxelPatternAnalysis)']	Unknown	hyb
398	1090	Multivoxel (pattern) analysis is the writing of a novel.	['Either brain reading or brain decoding. ', 'All brain decoding is extracting information from BOLD signals.', 'No extracting information from BOLD signals is without statistical pattern analysis. ', 'Writing a novel is without statistical pattern analysis.', 'If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.']	['∀x (BrainReading(x) ∨ BrainDecoding(x)) ', '∀x (BrainDecoding(x) → ExtractingInformationFromBOLDSignals(x))', '∀x (ExtractingInformationFromBOLDSignals(x) → ¬WithoutStatisticalPatternAnalysis(x))', '∀x (WritingANovel(x) → WithoutStatisticalPatternAnalysis(x)) ', 'WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis) → WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainDecoding(multivoxelPatternAnalysis)']	False	hyb
398	1091	Multivoxel (pattern) analysis is without statistical pattern analysis and writing a novel.	['Either brain reading or brain decoding. ', 'All brain decoding is extracting information from BOLD signals.', 'No extracting information from BOLD signals is without statistical pattern analysis. ', 'Writing a novel is without statistical pattern analysis.', 'If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.']	['∀x (BrainReading(x) ∨ BrainDecoding(x)) ', '∀x (BrainDecoding(x) → ExtractingInformationFromBOLDSignals(x))', '∀x (ExtractingInformationFromBOLDSignals(x) → ¬WithoutStatisticalPatternAnalysis(x))', '∀x (WritingANovel(x) → WithoutStatisticalPatternAnalysis(x)) ', 'WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis) → WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainDecoding(multivoxelPatternAnalysis)']	False	hyb
398	1092	Multivoxel (pattern) analysis is without statistical pattern analysis or writing a novel.	['Either brain reading or brain decoding. ', 'All brain decoding is extracting information from BOLD signals.', 'No extracting information from BOLD signals is without statistical pattern analysis. ', 'Writing a novel is without statistical pattern analysis.', 'If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.']	['∀x (BrainReading(x) ∨ BrainDecoding(x)) ', '∀x (BrainDecoding(x) → ExtractingInformationFromBOLDSignals(x))', '∀x (ExtractingInformationFromBOLDSignals(x) → ¬WithoutStatisticalPatternAnalysis(x))', '∀x (WritingANovel(x) → WithoutStatisticalPatternAnalysis(x)) ', 'WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis) → WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainDecoding(multivoxelPatternAnalysis)']	False	hyb
398	1093	Multivoxel (pattern) analysis is either without statistical pattern analysis or writing a novel.	['Either brain reading or brain decoding. ', 'All brain decoding is extracting information from BOLD signals.', 'No extracting information from BOLD signals is without statistical pattern analysis. ', 'Writing a novel is without statistical pattern analysis.', 'If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.']	['∀x (BrainReading(x) ∨ BrainDecoding(x)) ', '∀x (BrainDecoding(x) → ExtractingInformationFromBOLDSignals(x))', '∀x (ExtractingInformationFromBOLDSignals(x) → ¬WithoutStatisticalPatternAnalysis(x))', '∀x (WritingANovel(x) → WithoutStatisticalPatternAnalysis(x)) ', 'WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis) → WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainDecoding(multivoxelPatternAnalysis)']	False	hyb
398	1094	If multivoxel (pattern) analysis is writing a novel, then multivoxel (pattern) analysis is neither without statistical pattern analysis nor writing a novel.	['Either brain reading or brain decoding. ', 'All brain decoding is extracting information from BOLD signals.', 'No extracting information from BOLD signals is without statistical pattern analysis. ', 'Writing a novel is without statistical pattern analysis.', 'If multivoxel (pattern) analysis is without statistical pattern analysis and a brain reading, then multivoxel (pattern) analysis is without statistical pattern analysis and brain decoding.']	['∀x (BrainReading(x) ∨ BrainDecoding(x)) ', '∀x (BrainDecoding(x) → ExtractingInformationFromBOLDSignals(x))', '∀x (ExtractingInformationFromBOLDSignals(x) → ¬WithoutStatisticalPatternAnalysis(x))', '∀x (WritingANovel(x) → WithoutStatisticalPatternAnalysis(x)) ', 'WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainReading(multivoxelPatternAnalysis) → WithoutStatisticalPatternAnalysis(multivoxelPatternAnalysis) ∧ BrainDecoding(multivoxelPatternAnalysis)']	True	hyb
212	609	Allison has room for broccoli.	['If you have room for dessert, you have room for broccoli.', "Everyone at Luis's dinner party has room for dessert, including Luis.", 'Mauricia does not have room for broccoli.', "Luis's dinner party is the first ever dinner party that Allison has attended.", 'Gustave has room for both broccoli and asparagus.', 'Broccoli and asparagus are both vegetables.']	['∀x (RoomFor(x, dessert) → RoomFor(x, broccoli))', '∀x (AtLuisParty(x) → RoomFor(x, dessert))', '¬RoomFor(mauricia, broccoli)', 'FirstDinnerParty(allison, luisparty) ∧ AtLuisParty(allison)', 'RoomFor(gustave, broccoli) ∧ RoomFor(gustave, asparagus)', 'Vegetable(broccoli) ∧ Vegetable(asparagus)']	True	wiki
212	610	Mauricia is at Luis's dinner party.	['If you have room for dessert, you have room for broccoli.', "Everyone at Luis's dinner party has room for dessert, including Luis.", 'Mauricia does not have room for broccoli.', "Luis's dinner party is the first ever dinner party that Allison has attended.", 'Gustave has room for both broccoli and asparagus.', 'Broccoli and asparagus are both vegetables.']	['∀x (RoomFor(x, dessert) → RoomFor(x, broccoli))', '∀x (AtLuisParty(x) → RoomFor(x, dessert))', '¬RoomFor(mauricia, broccoli)', 'FirstDinnerParty(allison, luisparty) ∧ AtLuisParty(allison)', 'RoomFor(gustave, broccoli) ∧ RoomFor(gustave, asparagus)', 'Vegetable(broccoli) ∧ Vegetable(asparagus)']	False	wiki
212	611	Gustav has room for dessert.	['If you have room for dessert, you have room for broccoli.', "Everyone at Luis's dinner party has room for dessert, including Luis.", 'Mauricia does not have room for broccoli.', "Luis's dinner party is the first ever dinner party that Allison has attended.", 'Gustave has room for both broccoli and asparagus.', 'Broccoli and asparagus are both vegetables.']	['∀x (RoomFor(x, dessert) → RoomFor(x, broccoli))', '∀x (AtLuisParty(x) → RoomFor(x, dessert))', '¬RoomFor(mauricia, broccoli)', 'FirstDinnerParty(allison, luisparty) ∧ AtLuisParty(allison)', 'RoomFor(gustave, broccoli) ∧ RoomFor(gustave, asparagus)', 'Vegetable(broccoli) ∧ Vegetable(asparagus)']	Unknown	wiki
43	124	Some rock band has a songwriter.	['Imagine Dragons is an American pop rock band.', 'The lead singer of Imagine Dragons is Dan.', 'Dan is also a songwriter.', 'All lead singers are singers.', 'All singers are musicians.', 'Demons is one of the most popular singles of Imagine Dragons.', 'Some singles of Imagine Dragons have been on Billboard Hot 100.']	['American(imagineDragon) ∧ RockBand(imagineDragon)', 'LeadSinger(imagineDragon, dan)', 'SongWriter(dan)', '∀x ∀y (LeadSinger(x, y) → Singer(y))', '∀x (Singer(x) → Musician(x))', 'PopularSingle(imagineDragon, demons)', '∃x (PopularSingle(imagineDragon, x) ∧ BillboardHot100(x))']	True	wiki
43	125	Dan is not a musician.	['Imagine Dragons is an American pop rock band.', 'The lead singer of Imagine Dragons is Dan.', 'Dan is also a songwriter.', 'All lead singers are singers.', 'All singers are musicians.', 'Demons is one of the most popular singles of Imagine Dragons.', 'Some singles of Imagine Dragons have been on Billboard Hot 100.']	['American(imagineDragon) ∧ RockBand(imagineDragon)', 'LeadSinger(imagineDragon, dan)', 'SongWriter(dan)', '∀x ∀y (LeadSinger(x, y) → Singer(y))', '∀x (Singer(x) → Musician(x))', 'PopularSingle(imagineDragon, demons)', '∃x (PopularSingle(imagineDragon, x) ∧ BillboardHot100(x))']	False	wiki
43	126	Demons has been on Billboard Hot 100.	['Imagine Dragons is an American pop rock band.', 'The lead singer of Imagine Dragons is Dan.', 'Dan is also a songwriter.', 'All lead singers are singers.', 'All singers are musicians.', 'Demons is one of the most popular singles of Imagine Dragons.', 'Some singles of Imagine Dragons have been on Billboard Hot 100.']	['American(imagineDragon) ∧ RockBand(imagineDragon)', 'LeadSinger(imagineDragon, dan)', 'SongWriter(dan)', '∀x ∀y (LeadSinger(x, y) → Singer(y))', '∀x (Singer(x) → Musician(x))', 'PopularSingle(imagineDragon, demons)', '∃x (PopularSingle(imagineDragon, x) ∧ BillboardHot100(x))']	Unknown	wiki
455	1315	Deodorant is a sandwich.	['All bread is food.', 'Some sandwiches are bread.', 'All food is edible. ', 'No edible things are poisonous.', 'Deodorant is poisonous.']	['∀x (Bread(x) → Food(x))', '∃x (Sandwich(x) ∧ Bread(x))', '∀x (Food(x) → Edible(x))', '∀x (Edible(x) → ¬Poisonous(x))', 'Poisonous(deodorant)']	Unknown	hyb
455	1316	Deodorant is a sandwich and bread.	['All bread is food.', 'Some sandwiches are bread.', 'All food is edible. ', 'No edible things are poisonous.', 'Deodorant is poisonous.']	['∀x (Bread(x) → Food(x))', '∃x (Sandwich(x) ∧ Bread(x))', '∀x (Food(x) → Edible(x))', '∀x (Edible(x) → ¬Poisonous(x))', 'Poisonous(deodorant)']	False	hyb
455	1317	If deodorant is a loaf of bread, then deodorant is not a sandwich.	['All bread is food.', 'Some sandwiches are bread.', 'All food is edible. ', 'No edible things are poisonous.', 'Deodorant is poisonous.']	['∀x (Bread(x) → Food(x))', '∃x (Sandwich(x) ∧ Bread(x))', '∀x (Food(x) → Edible(x))', '∀x (Edible(x) → ¬Poisonous(x))', 'Poisonous(deodorant)']	True	hyb
160	461	Noah needs to pay the water bill.	['Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.', 'Many apartment rents cover the cost of water and electricity.', 'Susan lives in an apartment where the rent covers all utilities.', 'The rent of the apartment where Ava lives does not cover any utility expenses.', 'Noah lives in an apartment where the rent does not cover heating.']	['CommonUtilities(water) ∧ CommonUtilities(electricity) ∧ CommonUtilities(gas) ∧ CommonUtilities(heating)', '∃x (Cover(x, water) ∧ Cover(x, electricity))', '∀x (Cover(susan, x))', '∀x (¬Cover(ava, x))', '¬Cover(noah, heating)']	Unknown	wiki
160	462	Noah and Ava both need to pay the heating bill.	['Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.', 'Many apartment rents cover the cost of water and electricity.', 'Susan lives in an apartment where the rent covers all utilities.', 'The rent of the apartment where Ava lives does not cover any utility expenses.', 'Noah lives in an apartment where the rent does not cover heating.']	['CommonUtilities(water) ∧ CommonUtilities(electricity) ∧ CommonUtilities(gas) ∧ CommonUtilities(heating)', '∃x (Cover(x, water) ∧ Cover(x, electricity))', '∀x (Cover(susan, x))', '∀x (¬Cover(ava, x))', '¬Cover(noah, heating)']	True	wiki
160	463	Susan does not need to pay the water bill.	['Common utilities include water, electricity, gas, heating, sewer, trash, and recycling.', 'Many apartment rents cover the cost of water and electricity.', 'Susan lives in an apartment where the rent covers all utilities.', 'The rent of the apartment where Ava lives does not cover any utility expenses.', 'Noah lives in an apartment where the rent does not cover heating.']	['CommonUtilities(water) ∧ CommonUtilities(electricity) ∧ CommonUtilities(gas) ∧ CommonUtilities(heating)', '∃x (Cover(x, water) ∧ Cover(x, electricity))', '∀x (Cover(susan, x))', '∀x (¬Cover(ava, x))', '¬Cover(noah, heating)']	True	wiki
317	804	Nike is perfect.	['All clothes are products. ', 'No products are perfect. ', 'All dresses are clothes.', 'All skirts are dresses. ', 'If Nike is clothes, then Nike is perfect and a dress.']	['∀x (Clothes(x) → Product(x))', '∀x (Product(x) → ¬Perfect(x))', '∀x (Dress(x) → Clothes(x))', '∀x (Skirt(x) → Dress(x))', 'Clothes(nike) → Perfect(nike) ∧ Dress(nike)']	Unknown	hyb
317	805	Nike is a skirt.	['All clothes are products. ', 'No products are perfect. ', 'All dresses are clothes.', 'All skirts are dresses. ', 'If Nike is clothes, then Nike is perfect and a dress.']	['∀x (Clothes(x) → Product(x))', '∀x (Product(x) → ¬Perfect(x))', '∀x (Dress(x) → Clothes(x))', '∀x (Skirt(x) → Dress(x))', 'Clothes(nike) → Perfect(nike) ∧ Dress(nike)']	False	hyb
317	806	Nike is not a skirt.	['All clothes are products. ', 'No products are perfect. ', 'All dresses are clothes.', 'All skirts are dresses. ', 'If Nike is clothes, then Nike is perfect and a dress.']	['∀x (Clothes(x) → Product(x))', '∀x (Product(x) → ¬Perfect(x))', '∀x (Dress(x) → Clothes(x))', '∀x (Skirt(x) → Dress(x))', 'Clothes(nike) → Perfect(nike) ∧ Dress(nike)']	True	hyb
57	169	Leo is an animal.	['All pets are animals.', 'Pets can be either a dog or a cat.', 'If a person has a pet, they care for that pet. ', 'Dogs and Cats can be naughty. ', 'Pets who are naughty are not liked as much. ', 'Charlie has a naughty pet dog named Leo. ']	['∀x (Pet(x) → Animal(x))', '∀x (Pet(x) → Dog(x) ⊕ Cat(x))', '∀x ∀y (HasPet(x) → Cares(x, y))', '∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))', '∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))', 'HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)']	True	wiki
57	170	Charlie does not like Leo and does not care for Leo.	['All pets are animals.', 'Pets can be either a dog or a cat.', 'If a person has a pet, they care for that pet. ', 'Dogs and Cats can be naughty. ', 'Pets who are naughty are not liked as much. ', 'Charlie has a naughty pet dog named Leo. ']	['∀x (Pet(x) → Animal(x))', '∀x (Pet(x) → Dog(x) ⊕ Cat(x))', '∀x ∀y (HasPet(x) → Cares(x, y))', '∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))', '∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))', 'HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)']	False	wiki
57	171	Dogs are always not naughty.	['All pets are animals.', 'Pets can be either a dog or a cat.', 'If a person has a pet, they care for that pet. ', 'Dogs and Cats can be naughty. ', 'Pets who are naughty are not liked as much. ', 'Charlie has a naughty pet dog named Leo. ']	['∀x (Pet(x) → Animal(x))', '∀x (Pet(x) → Dog(x) ⊕ Cat(x))', '∀x ∀y (HasPet(x) → Cares(x, y))', '∃x ((Cat(x) ∧ Naughty(x)) ∨ (Dog(x) ∧ Naughty(x)))', '∀x ∀y (Pet(x) ∧ Naughty(x) → ¬Liked(x, y))', 'HasPet(charlie) ∧ Pet(leo) ∧ Dog(leo) ∧ Naughty(leo)']	False	wiki
279	728	All scares are fun.	['Surprises are either fun or dreadful.', 'All scares are surprises.']	['∀x (Surprise(x) → (Fun(x) ⊕ Dreadful(x)))', '∀x (Scare(x) → Surprise(x))']	Unknown	wiki
23	66	The Three Body Problem won the Hugo Award.	['All books written by Cixin Liu have sold more than 1 million copies. ', 'Some books that have won the Hugo Award were written by Cixin Liu.', 'All books about the future are influenced by Isaac Asimov.', 'The book the Three Body Problem has sold more than 1 million copies.', 'The Three Body Problem is about the future.']	['∀x (Book(x) ∧ WrittenBy(x, cixinliu) → SoldMoreThan(x, onemillion))', '∃x (Won(x, hugoaward) ∧ Book(x) ∧ WrittenBy(x, cixinliu))', '∀x (Book(x) ∧ AboutFuture(x) → InfluencedBy(x, isaacasimov))', 'Book(threebodyproblem) ∧ SoldMoreThan(threebodyproblem, onemillion)', 'AboutFuture(threebodyproblem)']	Unknown	wiki
23	67	The Three Body Problem was influenced by Isaac Asimov.	['All books written by Cixin Liu have sold more than 1 million copies. ', 'Some books that have won the Hugo Award were written by Cixin Liu.', 'All books about the future are influenced by Isaac Asimov.', 'The book the Three Body Problem has sold more than 1 million copies.', 'The Three Body Problem is about the future.']	['∀x (Book(x) ∧ WrittenBy(x, cixinliu) → SoldMoreThan(x, onemillion))', '∃x (Won(x, hugoaward) ∧ Book(x) ∧ WrittenBy(x, cixinliu))', '∀x (Book(x) ∧ AboutFuture(x) → InfluencedBy(x, isaacasimov))', 'Book(threebodyproblem) ∧ SoldMoreThan(threebodyproblem, onemillion)', 'AboutFuture(threebodyproblem)']	True	wiki
23	68	The Three Body Problem was written by Cixin Liu.	['All books written by Cixin Liu have sold more than 1 million copies. ', 'Some books that have won the Hugo Award were written by Cixin Liu.', 'All books about the future are influenced by Isaac Asimov.', 'The book the Three Body Problem has sold more than 1 million copies.', 'The Three Body Problem is about the future.']	['∀x (Book(x) ∧ WrittenBy(x, cixinliu) → SoldMoreThan(x, onemillion))', '∃x (Won(x, hugoaward) ∧ Book(x) ∧ WrittenBy(x, cixinliu))', '∀x (Book(x) ∧ AboutFuture(x) → InfluencedBy(x, isaacasimov))', 'Book(threebodyproblem) ∧ SoldMoreThan(threebodyproblem, onemillion)', 'AboutFuture(threebodyproblem)']	Unknown	wiki
420	1189	James majors in computer science.	['Some students who major in computer science get up early. ', 'If a student gets up early, then he/she will study in the morning. ', 'All students studying in the morning are good at time management. ', 'All students good at time management are popular among students. ', 'James is not popular among students. ']	['∃x (ComputerScience(x) ∧ GetUpEarly(x))', '∀x (GetUpEarly(x) → StudyMorning(x))', '∀x (StudyMorning(x) → GoodAtTimeManagement(x))', '∀x (GoodAtTimeManagement(x) → Popular(x))', '¬Popular(james)']	Unknown	hyb
420	1190	James majors in computer science and gets up early.	['Some students who major in computer science get up early. ', 'If a student gets up early, then he/she will study in the morning. ', 'All students studying in the morning are good at time management. ', 'All students good at time management are popular among students. ', 'James is not popular among students. ']	['∃x (ComputerScience(x) ∧ GetUpEarly(x))', '∀x (GetUpEarly(x) → StudyMorning(x))', '∀x (StudyMorning(x) → GoodAtTimeManagement(x))', '∀x (GoodAtTimeManagement(x) → Popular(x))', '¬Popular(james)']	False	hyb
420	1191	If James gets up early, then he majors in computer science.	['Some students who major in computer science get up early. ', 'If a student gets up early, then he/she will study in the morning. ', 'All students studying in the morning are good at time management. ', 'All students good at time management are popular among students. ', 'James is not popular among students. ']	['∃x (ComputerScience(x) ∧ GetUpEarly(x))', '∀x (GetUpEarly(x) → StudyMorning(x))', '∀x (StudyMorning(x) → GoodAtTimeManagement(x))', '∀x (GoodAtTimeManagement(x) → Popular(x))', '¬Popular(james)']	True	hyb
272	721	Something went wrong.	['There is no dog on the roof.', 'If there is a dog on the roof something went wrong.']	['¬(∃x (Dog(x) ∧ OnRoof(x)))', '∀x ∃y ((Dog(x) ∧ OnRoof(x)) → WentWrong(y))']	Unknown	wiki
15	41	Elephantopus is widespread over much of Australia and Southern Asia.	['Elephantopus is a genus of perennial plants in the daisy family.', 'Elephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas.', 'Several species of Elephantopus are native to the southeastern United States.', 'Elephantopus scaber is a traditional medicine.']	['∀x (Elephantopus(x) → Genus(x, perennialplants) ∧ BelongTo(x, daisyfamily))', '∀x (Elephantopus(x) → WidespreadOver(x, africa) ∧ WidespreadOver(x, southernasia) ∧ WidespreadOver(x, australia) ∧ WidespreadOver(x, americas))', '∃x (Elephantopus(x) ∧ NativeTo(x, southeasternunitedstates))', '∀x (ElephantopusScaber(x) → TraditionalMedicine(x))']	True	wiki
15	42	No Elephantopus is native to the southeastern United States.	['Elephantopus is a genus of perennial plants in the daisy family.', 'Elephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas.', 'Several species of Elephantopus are native to the southeastern United States.', 'Elephantopus scaber is a traditional medicine.']	['∀x (Elephantopus(x) → Genus(x, perennialplants) ∧ BelongTo(x, daisyfamily))', '∀x (Elephantopus(x) → WidespreadOver(x, africa) ∧ WidespreadOver(x, southernasia) ∧ WidespreadOver(x, australia) ∧ WidespreadOver(x, americas))', '∃x (Elephantopus(x) ∧ NativeTo(x, southeasternunitedstates))', '∀x (ElephantopusScaber(x) → TraditionalMedicine(x))']	False	wiki
15	43	Elephantopus is a traditional medicine.	['Elephantopus is a genus of perennial plants in the daisy family.', 'Elephantopus is widespread over much of Africa, southern Asia, Australia, and the Americas.', 'Several species of Elephantopus are native to the southeastern United States.', 'Elephantopus scaber is a traditional medicine.']	['∀x (Elephantopus(x) → Genus(x, perennialplants) ∧ BelongTo(x, daisyfamily))', '∀x (Elephantopus(x) → WidespreadOver(x, africa) ∧ WidespreadOver(x, southernasia) ∧ WidespreadOver(x, australia) ∧ WidespreadOver(x, americas))', '∃x (Elephantopus(x) ∧ NativeTo(x, southeasternunitedstates))', '∀x (ElephantopusScaber(x) → TraditionalMedicine(x))']	Unknown	wiki
432	1236	Harkness is a Yale dormitory.	['All Yale dormitories are located on York Street. ', 'All buildings managed by Yale Housing are dormitories. ', 'All buildings operated by Yale Housing staff are managed by Yale Housing. ', 'No buildings open to students are established after 1800. ', 'All buildings located on York Street are open to students. ', 'Harkness is either a building operated by Yale Housing staff or located on York Street. ']	['∀x (YaleDormitory(x) → InYorkStreet(x))', '∀x (ManagedByYaleHousing(x) → YaleDormitory(x))', '∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))', '∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x))', '∀x (InYorkStreet(x) → OpenToStudents(x))', 'OperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness)']	Unknown	hyb
432	1237	Harkness is not a Yale dormitory.	['All Yale dormitories are located on York Street. ', 'All buildings managed by Yale Housing are dormitories. ', 'All buildings operated by Yale Housing staff are managed by Yale Housing. ', 'No buildings open to students are established after 1800. ', 'All buildings located on York Street are open to students. ', 'Harkness is either a building operated by Yale Housing staff or located on York Street. ']	['∀x (YaleDormitory(x) → InYorkStreet(x))', '∀x (ManagedByYaleHousing(x) → YaleDormitory(x))', '∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))', '∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x))', '∀x (InYorkStreet(x) → OpenToStudents(x))', 'OperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness)']	Unknown	hyb
432	1238	Harkness is established after 1800.	['All Yale dormitories are located on York Street. ', 'All buildings managed by Yale Housing are dormitories. ', 'All buildings operated by Yale Housing staff are managed by Yale Housing. ', 'No buildings open to students are established after 1800. ', 'All buildings located on York Street are open to students. ', 'Harkness is either a building operated by Yale Housing staff or located on York Street. ']	['∀x (YaleDormitory(x) → InYorkStreet(x))', '∀x (ManagedByYaleHousing(x) → YaleDormitory(x))', '∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))', '∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x))', '∀x (InYorkStreet(x) → OpenToStudents(x))', 'OperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness)']	False	hyb
432	1239	Harkness is established before 1800.	['All Yale dormitories are located on York Street. ', 'All buildings managed by Yale Housing are dormitories. ', 'All buildings operated by Yale Housing staff are managed by Yale Housing. ', 'No buildings open to students are established after 1800. ', 'All buildings located on York Street are open to students. ', 'Harkness is either a building operated by Yale Housing staff or located on York Street. ']	['∀x (YaleDormitory(x) → InYorkStreet(x))', '∀x (ManagedByYaleHousing(x) → YaleDormitory(x))', '∀x (OperatedByYaleHousingStaffs(x) → ManagedByYaleHousing(x))', '∀x (OpenToStudents(x) → ¬EstablishedAfter1800(x))', '∀x (InYorkStreet(x) → OpenToStudents(x))', 'OperatedByYaleHousingStaffs(harkness) ⊕ InYorkStreet(harkness)']	True	hyb
316	794	The Scream is a skyscraper.	['There are no mansion houses in an urban area.', 'All skyscrapers reside in urban areas.', 'Every creepy haunted house is in a mansion house.', 'Every terrifying Halloween scare comes from a creepy haunted house.', 'The Scream is a creepy haunted house or a terrifying Halloween scare.']	['∀x (UrbanArea(x) → ¬MansionHouse(x))', '∀x (Skyscraper(x) → UrbanArea(x))', '∀x (CreepyHauntedHouse(x) → MansionHouse(x))', '∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))', 'CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)']	False	hyb
316	795	The Scream is not a skyscraper.	['There are no mansion houses in an urban area.', 'All skyscrapers reside in urban areas.', 'Every creepy haunted house is in a mansion house.', 'Every terrifying Halloween scare comes from a creepy haunted house.', 'The Scream is a creepy haunted house or a terrifying Halloween scare.']	['∀x (UrbanArea(x) → ¬MansionHouse(x))', '∀x (Skyscraper(x) → UrbanArea(x))', '∀x (CreepyHauntedHouse(x) → MansionHouse(x))', '∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))', 'CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)']	True	hyb
316	796	The Scream is a terrifying Halloween scare.	['There are no mansion houses in an urban area.', 'All skyscrapers reside in urban areas.', 'Every creepy haunted house is in a mansion house.', 'Every terrifying Halloween scare comes from a creepy haunted house.', 'The Scream is a creepy haunted house or a terrifying Halloween scare.']	['∀x (UrbanArea(x) → ¬MansionHouse(x))', '∀x (Skyscraper(x) → UrbanArea(x))', '∀x (CreepyHauntedHouse(x) → MansionHouse(x))', '∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))', 'CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)']	Unknown	hyb
316	797	The Scream is either a skyscraper or a mansion house.	['There are no mansion houses in an urban area.', 'All skyscrapers reside in urban areas.', 'Every creepy haunted house is in a mansion house.', 'Every terrifying Halloween scare comes from a creepy haunted house.', 'The Scream is a creepy haunted house or a terrifying Halloween scare.']	['∀x (UrbanArea(x) → ¬MansionHouse(x))', '∀x (Skyscraper(x) → UrbanArea(x))', '∀x (CreepyHauntedHouse(x) → MansionHouse(x))', '∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))', 'CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)']	True	hyb
316	798	The Scream is either a skyscraper or an urban area.	['There are no mansion houses in an urban area.', 'All skyscrapers reside in urban areas.', 'Every creepy haunted house is in a mansion house.', 'Every terrifying Halloween scare comes from a creepy haunted house.', 'The Scream is a creepy haunted house or a terrifying Halloween scare.']	['∀x (UrbanArea(x) → ¬MansionHouse(x))', '∀x (Skyscraper(x) → UrbanArea(x))', '∀x (CreepyHauntedHouse(x) → MansionHouse(x))', '∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))', 'CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)']	False	hyb
316	799	The Scream is either a skyscraper or a creepy haunted house.	['There are no mansion houses in an urban area.', 'All skyscrapers reside in urban areas.', 'Every creepy haunted house is in a mansion house.', 'Every terrifying Halloween scare comes from a creepy haunted house.', 'The Scream is a creepy haunted house or a terrifying Halloween scare.']	['∀x (UrbanArea(x) → ¬MansionHouse(x))', '∀x (Skyscraper(x) → UrbanArea(x))', '∀x (CreepyHauntedHouse(x) → MansionHouse(x))', '∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))', 'CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)']	True	hyb
316	800	If The Scream is not a mansion in an urban area, then it is either a skyscraper or an urban area.	['There are no mansion houses in an urban area.', 'All skyscrapers reside in urban areas.', 'Every creepy haunted house is in a mansion house.', 'Every terrifying Halloween scare comes from a creepy haunted house.', 'The Scream is a creepy haunted house or a terrifying Halloween scare.']	['∀x (UrbanArea(x) → ¬MansionHouse(x))', '∀x (Skyscraper(x) → UrbanArea(x))', '∀x (CreepyHauntedHouse(x) → MansionHouse(x))', '∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))', 'CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)']	False	hyb
316	801	If The Scream is either a skyscraper or a mansion house, then it is in an urban area.	['There are no mansion houses in an urban area.', 'All skyscrapers reside in urban areas.', 'Every creepy haunted house is in a mansion house.', 'Every terrifying Halloween scare comes from a creepy haunted house.', 'The Scream is a creepy haunted house or a terrifying Halloween scare.']	['∀x (UrbanArea(x) → ¬MansionHouse(x))', '∀x (Skyscraper(x) → UrbanArea(x))', '∀x (CreepyHauntedHouse(x) → MansionHouse(x))', '∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))', 'CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)']	False	hyb
316	802	If The Scream is either a skyscraper or a mansion house, then it is neither a creepy haunted house nor a terrifying Halloween scare.	['There are no mansion houses in an urban area.', 'All skyscrapers reside in urban areas.', 'Every creepy haunted house is in a mansion house.', 'Every terrifying Halloween scare comes from a creepy haunted house.', 'The Scream is a creepy haunted house or a terrifying Halloween scare.']	['∀x (UrbanArea(x) → ¬MansionHouse(x))', '∀x (Skyscraper(x) → UrbanArea(x))', '∀x (CreepyHauntedHouse(x) → MansionHouse(x))', '∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))', 'CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)']	False	hyb
316	803	If The Scream is either a skyscraper or a creepy haunted house, then it is not a mansion house.	['There are no mansion houses in an urban area.', 'All skyscrapers reside in urban areas.', 'Every creepy haunted house is in a mansion house.', 'Every terrifying Halloween scare comes from a creepy haunted house.', 'The Scream is a creepy haunted house or a terrifying Halloween scare.']	['∀x (UrbanArea(x) → ¬MansionHouse(x))', '∀x (Skyscraper(x) → UrbanArea(x))', '∀x (CreepyHauntedHouse(x) → MansionHouse(x))', '∀x (TerrifyingHalloweenScare(x) → CreepyHauntedHouse(x))', 'CreepyHauntedHouse(thescream) ∨ TerrifyingHalloweenScare(thescream)']	False	hyb
109	331	There is a nature reserve in Vietnam.	['Phuoc Binh national park is a national park in Vietnam. ', 'Any national park in Vietnam is classified as a nature reserve. ', 'There is a national park in Vietnam classified as a UNESCO World Heritage Site.', "All national parks in Vietnam are either managed by the Ministry of Agriculture or by the People's Committee. ", 'Phuoc Binh is not managed by the Ministry of Agriculture.']	['NationalPark(phuocBinh) ∧ Locatedin(phuocBinh, vietnam)', '∀x (NationalPark(x) ∧ Locatedin(x, vietnam) → NatureReserve(x))', '∃x (NationalPark(x) ∧ Locatedin(x, vietnam) ∧ UNESCOWorldHeritageSite(x))', '∀x (NationalPark(x) ∧ Locatedin(x, vietnam) → Mangedby(x, ministryofAgriculture) ∨ Mangedby(x, peoplesCommittee))', '¬Mangedby(phuocBinh, ministryofAgriculture)']	True	wiki
109	332	Phuoc Binh is a UNESCO Heritage Site.	['Phuoc Binh national park is a national park in Vietnam. ', 'Any national park in Vietnam is classified as a nature reserve. ', 'There is a national park in Vietnam classified as a UNESCO World Heritage Site.', "All national parks in Vietnam are either managed by the Ministry of Agriculture or by the People's Committee. ", 'Phuoc Binh is not managed by the Ministry of Agriculture.']	['NationalPark(phuocBinh) ∧ Locatedin(phuocBinh, vietnam)', '∀x (NationalPark(x) ∧ Locatedin(x, vietnam) → NatureReserve(x))', '∃x (NationalPark(x) ∧ Locatedin(x, vietnam) ∧ UNESCOWorldHeritageSite(x))', '∀x (NationalPark(x) ∧ Locatedin(x, vietnam) → Mangedby(x, ministryofAgriculture) ∨ Mangedby(x, peoplesCommittee))', '¬Mangedby(phuocBinh, ministryofAgriculture)']	Unknown	wiki
109	333	Phuoc Binh is managed by the People's Committee.	['Phuoc Binh national park is a national park in Vietnam. ', 'Any national park in Vietnam is classified as a nature reserve. ', 'There is a national park in Vietnam classified as a UNESCO World Heritage Site.', "All national parks in Vietnam are either managed by the Ministry of Agriculture or by the People's Committee. ", 'Phuoc Binh is not managed by the Ministry of Agriculture.']	['NationalPark(phuocBinh) ∧ Locatedin(phuocBinh, vietnam)', '∀x (NationalPark(x) ∧ Locatedin(x, vietnam) → NatureReserve(x))', '∃x (NationalPark(x) ∧ Locatedin(x, vietnam) ∧ UNESCOWorldHeritageSite(x))', '∀x (NationalPark(x) ∧ Locatedin(x, vietnam) → Mangedby(x, ministryofAgriculture) ∨ Mangedby(x, peoplesCommittee))', '¬Mangedby(phuocBinh, ministryofAgriculture)']	True	wiki
137	404	No coursing is banned.	['Greyhound racing is a competitive sport where spectators bet on greyhounds.', 'Coursing is a part of Greyhound racing.', 'Some competitive sports where spectators bet on things are banned.', 'Coursing involves spectators betting on a hare being pursued by greyhounds.', 'Hares are small game.', 'If a competitive sport involves spectators betting on small game, then it is banned.']	['∀x ∃y (GreyhoundRacing(x) → CompetitiveSport(x) ∧ Greyhound(y) ∧ SpectatorsBetOn(x, y))', '∀x (GreyhoundRacing(x) ↔ Coursing(x))', '∃x ∃y (CompetitiveSport(x) ∧ SpectaorsBetOn(x, y) ∧ Banned(x))', '∀x ∃y ∃z (Coursing(x) → Hare(y) ∧ SpectatorsBetOn(x, y) ∧ GreyHound(z) ∧ Pursue(z, y))', '∀x (Hare(x) → SmallGame(x))', '∀x ∃y (CompetitiveSport(x) ∧ SmallGame(y) ∧ SpectatorsBetOn(x, y) → Banned(x))']	False	wiki
137	405	Greyhound racing is a competitive sport.	['Greyhound racing is a competitive sport where spectators bet on greyhounds.', 'Coursing is a part of Greyhound racing.', 'Some competitive sports where spectators bet on things are banned.', 'Coursing involves spectators betting on a hare being pursued by greyhounds.', 'Hares are small game.', 'If a competitive sport involves spectators betting on small game, then it is banned.']	['∀x ∃y (GreyhoundRacing(x) → CompetitiveSport(x) ∧ Greyhound(y) ∧ SpectatorsBetOn(x, y))', '∀x (GreyhoundRacing(x) ↔ Coursing(x))', '∃x ∃y (CompetitiveSport(x) ∧ SpectaorsBetOn(x, y) ∧ Banned(x))', '∀x ∃y ∃z (Coursing(x) → Hare(y) ∧ SpectatorsBetOn(x, y) ∧ GreyHound(z) ∧ Pursue(z, y))', '∀x (Hare(x) → SmallGame(x))', '∀x ∃y (CompetitiveSport(x) ∧ SmallGame(y) ∧ SpectatorsBetOn(x, y) → Banned(x))']	True	wiki
190	547	Henry will be ejected from the rest of the game.	['If a soccer player receives two yellow cards in one game, this player will be ejected from the rest of the game.', 'If a soccer player receives one red card in one game, this player will be ejected from the rest of the game.', 'Henry is a soccer player.', 'In one game, Henry first receives one yellow card, then he receives one red card.']	['∀x (SoccerPlayer(x) ∧ TwoYellow(x) → Eject(x))', '∀x (SoccerPlayer(x) ∧ OneRed(x) → Eject(x))   ', 'SoccerPlayer(henry)', '¬TwoYellow(henry) ∧ OneRed(henry)']	True	wiki
190	548	Henry will not be ejected from the rest of the game.	['If a soccer player receives two yellow cards in one game, this player will be ejected from the rest of the game.', 'If a soccer player receives one red card in one game, this player will be ejected from the rest of the game.', 'Henry is a soccer player.', 'In one game, Henry first receives one yellow card, then he receives one red card.']	['∀x (SoccerPlayer(x) ∧ TwoYellow(x) → Eject(x))', '∀x (SoccerPlayer(x) ∧ OneRed(x) → Eject(x))   ', 'SoccerPlayer(henry)', '¬TwoYellow(henry) ∧ OneRed(henry)']	False	wiki
287	736	Some living things are plants.	['All trees are plants. ', 'Some living things are trees.']	['∀x (Tree(x) → Plant(x))', '∃x (Living(x) ∧ Tree(x))']	True	wiki
16	44	Dagfinn Aarskog is a notable person.	['Dagfinn is a given name.', 'Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl. ', 'Dagfinn Aarskog is a Norwegian physician.', 'Dagfinn Dahl is a Norwegian barrister.']	['∀x (Dagfinn(x) → GivenName(x))', 'Dagfinn(dagfinnAarskog) ∧ NotablePeople(dagfinnAarskog) ∧ Dagfinn(dagfinnBakke) ∧ NotablePeople(dagfinnBakke) ∧ Dagfinn(dagfinnDahl) ∧ NotablePeople(dagfinnDahl)', 'Norwegian(dagfinnAarskog) ∧ Physician(dagfinnAarskog)', 'Norwegian(dagfinnDahl) ∧ Barrister(dagfinnDahl)']	True	wiki
16	45	Dagfinn is Dagfinn Aarskog's given name.	['Dagfinn is a given name.', 'Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl. ', 'Dagfinn Aarskog is a Norwegian physician.', 'Dagfinn Dahl is a Norwegian barrister.']	['∀x (Dagfinn(x) → GivenName(x))', 'Dagfinn(dagfinnAarskog) ∧ NotablePeople(dagfinnAarskog) ∧ Dagfinn(dagfinnBakke) ∧ NotablePeople(dagfinnBakke) ∧ Dagfinn(dagfinnDahl) ∧ NotablePeople(dagfinnDahl)', 'Norwegian(dagfinnAarskog) ∧ Physician(dagfinnAarskog)', 'Norwegian(dagfinnDahl) ∧ Barrister(dagfinnDahl)']	True	wiki
16	46	Dagfinn Dahl is a Norwegian physician.	['Dagfinn is a given name.', 'Notable people with the given name include Dagfinn Aarskog, Dagfinn Bakke and Dagfinn Dahl. ', 'Dagfinn Aarskog is a Norwegian physician.', 'Dagfinn Dahl is a Norwegian barrister.']	['∀x (Dagfinn(x) → GivenName(x))', 'Dagfinn(dagfinnAarskog) ∧ NotablePeople(dagfinnAarskog) ∧ Dagfinn(dagfinnBakke) ∧ NotablePeople(dagfinnBakke) ∧ Dagfinn(dagfinnDahl) ∧ NotablePeople(dagfinnDahl)', 'Norwegian(dagfinnAarskog) ∧ Physician(dagfinnAarskog)', 'Norwegian(dagfinnDahl) ∧ Barrister(dagfinnDahl)']	Unknown	wiki
300	749	If entertainment is interesting, it will be well-known.	['If entertainment is interesting, it will be popular.', 'All popular things are well-known.']	['∀x ((Entertainment(x) ∧ Interesting(x)) → Popular(x))', '∀x (Popular(x) → WellKnown(x))']	True	wiki
240	687	GPT-3 is popular.	['It is not true that some giant language models do not have good performance. ', 'All language models with good performance are used by some researchers.', 'If a language model is used by some researchers, it is popular. ', 'If BERT is a giant language model, then GPT-3 is also a giant language model. ', 'BERT is a giant language model. ']	['¬(∃x (LanguageModel(x) ∧ Giant(x) ∧ ¬GoodPerformance(x)))', '∀x ((LanguageModel(x) ∧ GoodPerformance(x)) → UsedBySomeResearchers(x))', '∀x (UsedBySomeResearchers(x) → Popular(x))', '(LanguageModel(bert) ∧ Giant(bert)) → (LanguageModel(gpt-3) ∧ Giant(gpt-3)).', 'LanguageModel(bert) ∧ Giant(bert) ']	True	wiki
110	334	At least one Scottish team has joined the Scottish Premiership.	['St Johnstone is a Scottish team.', 'St Johnstone is part of the Scottish Premiership.', 'If a team is part of the league, it has joined the league.', 'St Johnstone and Minsk are different teams.', 'For two different teams, either one team wins or the other team wins.', 'Minsk won against St Johnstone.']	['Scottish(johnstone)', 'PartOf(johnstone, scottishpremiership)', '∀x ∀y (PartOf(x, y) → Joined(x, y))', 'Different(misnk, johnstone) ∧ Different(johnstone, minsk)', '∀x ∀y (Different(x, y) → WonGame(x, y) ⊕ WonGame(y, x))', 'WonGame(minsk, johnstone)']	True	wiki
110	335	St Johnstone won against Minsk.	['St Johnstone is a Scottish team.', 'St Johnstone is part of the Scottish Premiership.', 'If a team is part of the league, it has joined the league.', 'St Johnstone and Minsk are different teams.', 'For two different teams, either one team wins or the other team wins.', 'Minsk won against St Johnstone.']	['Scottish(johnstone)', 'PartOf(johnstone, scottishpremiership)', '∀x ∀y (PartOf(x, y) → Joined(x, y))', 'Different(misnk, johnstone) ∧ Different(johnstone, minsk)', '∀x ∀y (Different(x, y) → WonGame(x, y) ⊕ WonGame(y, x))', 'WonGame(minsk, johnstone)']	False	wiki
110	336	Minsk joined the Scottish Premiership.	['St Johnstone is a Scottish team.', 'St Johnstone is part of the Scottish Premiership.', 'If a team is part of the league, it has joined the league.', 'St Johnstone and Minsk are different teams.', 'For two different teams, either one team wins or the other team wins.', 'Minsk won against St Johnstone.']	['Scottish(johnstone)', 'PartOf(johnstone, scottishpremiership)', '∀x ∀y (PartOf(x, y) → Joined(x, y))', 'Different(misnk, johnstone) ∧ Different(johnstone, minsk)', '∀x ∀y (Different(x, y) → WonGame(x, y) ⊕ WonGame(y, x))', 'WonGame(minsk, johnstone)']	Unknown	wiki
431	1232	Jake32 was produced before 2010 and is scheduled for a short-distance flight.	['No Boeing-737 plane is equipped with more than 300 seats. ', 'All planes in Delta are of type Boeing-737. ', 'Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ', 'All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ', 'All planes with a capacity of 100 passengers are produced before 2010. ', 'Jake32 is either a Boeing-737 plane or a plane in Delta. ', 'T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. ']	['∀x (Boeing737(x) → ¬Seats300(x))', '∀x (Delta(x) → Boeing737(x))', '∀x (Seats300(x) ∨ Passengers100(x))', '∀x (Passengers100(x) → ShortDistance(x))', '∀x (Passengers100(x) → ProducedBefore2010(x))', 'Boeing737(jake32) ⊕ Delta(jake32) ', 'Boeing737(t10) ⊕ Delta(t10)']	True	hyb
431	1233	Jake32 is not produced before 2010 and is not scheduled for a short-distance flight.	['No Boeing-737 plane is equipped with more than 300 seats. ', 'All planes in Delta are of type Boeing-737. ', 'Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ', 'All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ', 'All planes with a capacity of 100 passengers are produced before 2010. ', 'Jake32 is either a Boeing-737 plane or a plane in Delta. ', 'T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. ']	['∀x (Boeing737(x) → ¬Seats300(x))', '∀x (Delta(x) → Boeing737(x))', '∀x (Seats300(x) ∨ Passengers100(x))', '∀x (Passengers100(x) → ShortDistance(x))', '∀x (Passengers100(x) → ProducedBefore2010(x))', 'Boeing737(jake32) ⊕ Delta(jake32) ', 'Boeing737(t10) ⊕ Delta(t10)']	False	hyb
431	1234	Jake32 is produced before 2010 or scheduled for a short-distance flight.	['No Boeing-737 plane is equipped with more than 300 seats. ', 'All planes in Delta are of type Boeing-737. ', 'Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ', 'All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ', 'All planes with a capacity of 100 passengers are produced before 2010. ', 'Jake32 is either a Boeing-737 plane or a plane in Delta. ', 'T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. ']	['∀x (Boeing737(x) → ¬Seats300(x))', '∀x (Delta(x) → Boeing737(x))', '∀x (Seats300(x) ∨ Passengers100(x))', '∀x (Passengers100(x) → ShortDistance(x))', '∀x (Passengers100(x) → ProducedBefore2010(x))', 'Boeing737(jake32) ⊕ Delta(jake32) ', 'Boeing737(t10) ⊕ Delta(t10)']	True	hyb
431	1235	Jake32 is neither produced before 2010 nor scheduled for a short-distance flight.	['No Boeing-737 plane is equipped with more than 300 seats. ', 'All planes in Delta are of type Boeing-737. ', 'Planes are either equipped with more than 300 seats or have a capacity of 100 passengers. ', 'All planes with a capacity of 100 passengers are scheduled for a short-distance flight. ', 'All planes with a capacity of 100 passengers are produced before 2010. ', 'Jake32 is either a Boeing-737 plane or a plane in Delta. ', 'T10 is either a Boeing-737 plane and in Delta, or neither a Boeing-737 plane nor in Delta. ']	['∀x (Boeing737(x) → ¬Seats300(x))', '∀x (Delta(x) → Boeing737(x))', '∀x (Seats300(x) ∨ Passengers100(x))', '∀x (Passengers100(x) → ShortDistance(x))', '∀x (Passengers100(x) → ProducedBefore2010(x))', 'Boeing737(jake32) ⊕ Delta(jake32) ', 'Boeing737(t10) ⊕ Delta(t10)']	False	hyb
195	558	Since 2016 the SAT has been better aligned with high school curricula.	['The SAT test is wholly owned and developed by the College Board.', "The SAT test is intended to assess student's readiness for college.", 'The SAT was originally designed not to be aligned with high school curricula. ', 'Several adjustments were made for the version of the SAT introduced in 2016 to reflect more closely on what students learn in high school. ']	['Own(sat, collegeBoard) ∧ ¬Own(sat, others)', 'Test(sat, readiness)', '∀x (Year(x) ∧ Before2016(x) → ¬AlignHighSchool(x)) ', '∃x (Year(x) ∧ Since2016(x) ∧ AlignHighSchool(x)) ']	True	wiki
195	559	The SAT test is owned by the College Board and multiple other third parties.	['The SAT test is wholly owned and developed by the College Board.', "The SAT test is intended to assess student's readiness for college.", 'The SAT was originally designed not to be aligned with high school curricula. ', 'Several adjustments were made for the version of the SAT introduced in 2016 to reflect more closely on what students learn in high school. ']	['Own(sat, collegeBoard) ∧ ¬Own(sat, others)', 'Test(sat, readiness)', '∀x (Year(x) ∧ Before2016(x) → ¬AlignHighSchool(x)) ', '∃x (Year(x) ∧ Since2016(x) ∧ AlignHighSchool(x)) ']	False	wiki
195	560	The SAT test assesses student's math skills.	['The SAT test is wholly owned and developed by the College Board.', "The SAT test is intended to assess student's readiness for college.", 'The SAT was originally designed not to be aligned with high school curricula. ', 'Several adjustments were made for the version of the SAT introduced in 2016 to reflect more closely on what students learn in high school. ']	['Own(sat, collegeBoard) ∧ ¬Own(sat, others)', 'Test(sat, readiness)', '∀x (Year(x) ∧ Before2016(x) → ¬AlignHighSchool(x)) ', '∃x (Year(x) ∧ Since2016(x) ∧ AlignHighSchool(x)) ']	Unknown	wiki
34	99	Nadal was not born in Mallorca.	['Rafa Nadal was born in Mallorca.', 'Rafa Nadal is a professional tennis player.', "Nadal's win ratio is higher than 80%.", 'All players in the Big 3 are professionals who have a high win ratio.']	['BornIn(rafaNadal, mallorca)', 'ProfessionalTennisPlayer(rafaNadal)', 'HighWinRatio(rafaNadal)', '∀x (ProfessionalTennisPlayer(x) ∧ HighWinRatio(x) → InBig3(x))']	False	wiki
34	100	Nadal is in the Big 3.	['Rafa Nadal was born in Mallorca.', 'Rafa Nadal is a professional tennis player.', "Nadal's win ratio is higher than 80%.", 'All players in the Big 3 are professionals who have a high win ratio.']	['BornIn(rafaNadal, mallorca)', 'ProfessionalTennisPlayer(rafaNadal)', 'HighWinRatio(rafaNadal)', '∀x (ProfessionalTennisPlayer(x) ∧ HighWinRatio(x) → InBig3(x))']	True	wiki
34	101	Nadal is the greatest player of all time.	['Rafa Nadal was born in Mallorca.', 'Rafa Nadal is a professional tennis player.', "Nadal's win ratio is higher than 80%.", 'All players in the Big 3 are professionals who have a high win ratio.']	['BornIn(rafaNadal, mallorca)', 'ProfessionalTennisPlayer(rafaNadal)', 'HighWinRatio(rafaNadal)', '∀x (ProfessionalTennisPlayer(x) ∧ HighWinRatio(x) → InBig3(x))']	Unknown	wiki
286	735	All cookies are delicious.	['No cookie is healthy.', 'All oreos are cookies.']	['∀x (Cookie(x) → ¬Healthy(x))', '∀x (Oreo(x) → Cookie(x))']	Unknown	wiki
314	787	Jack is a pupil.	['No animals are plants. ', 'All humans are animals.', 'All pupils are human.', 'All flowers are plants.', 'If Jack is a human or a flower, then Jack is a human and a flower.']	['∀x (Animal(x) → ¬Plant(x))', '∀x (Human(x) → Animal(x))', '∀x (Pupil(x) → Human(x))', '∀x (Flower(x) → Plant(x))', 'Human(jack) ∨ Flower(jack) → Human(jack) ∧ Flower(jack)']	False	hyb
314	788	Jack is not a pupil.	['No animals are plants. ', 'All humans are animals.', 'All pupils are human.', 'All flowers are plants.', 'If Jack is a human or a flower, then Jack is a human and a flower.']	['∀x (Animal(x) → ¬Plant(x))', '∀x (Human(x) → Animal(x))', '∀x (Pupil(x) → Human(x))', '∀x (Flower(x) → Plant(x))', 'Human(jack) ∨ Flower(jack) → Human(jack) ∧ Flower(jack)']	True	hyb
314	789	Jack is a plant.	['No animals are plants. ', 'All humans are animals.', 'All pupils are human.', 'All flowers are plants.', 'If Jack is a human or a flower, then Jack is a human and a flower.']	['∀x (Animal(x) → ¬Plant(x))', '∀x (Human(x) → Animal(x))', '∀x (Pupil(x) → Human(x))', '∀x (Flower(x) → Plant(x))', 'Human(jack) ∨ Flower(jack) → Human(jack) ∧ Flower(jack)']	Unknown	hyb
314	790	If Jack is a human, then Jack is not a pupil.	['No animals are plants. ', 'All humans are animals.', 'All pupils are human.', 'All flowers are plants.', 'If Jack is a human or a flower, then Jack is a human and a flower.']	['∀x (Animal(x) → ¬Plant(x))', '∀x (Human(x) → Animal(x))', '∀x (Pupil(x) → Human(x))', '∀x (Flower(x) → Plant(x))', 'Human(jack) ∨ Flower(jack) → Human(jack) ∧ Flower(jack)']	True	hyb
458	1326	Watch is a wearable.	['No shoes are food. ', 'All slippers are shoes.', 'A thing is either food or clothes.', 'No wearable things are airtight.', 'All clothes are wearable. ', 'If a watch is not airtight and clothes, then a watch is either both airtight and clothes, or neither airtight nor clothes.']	['∀x (Shoes(x) → ¬Food(x))', '∀x (Slipper(x) → Shoes(x))', '∀x (Food(x) ⊕ Clothes(x))', '∀x (Wearable(x) → ¬AirTight(x))', '∀x (Clothes(x) → Wearable(x))', '¬(AirTight(watch) ∧ Clothes(watch)) → (AirTight(watch) ∧ Clothes(watch)) ⊕ (¬AirTight(watch) ∧ ¬Clothes(watch))']	Unknown	hyb
458	1327	Watch is a slipper.	['No shoes are food. ', 'All slippers are shoes.', 'A thing is either food or clothes.', 'No wearable things are airtight.', 'All clothes are wearable. ', 'If a watch is not airtight and clothes, then a watch is either both airtight and clothes, or neither airtight nor clothes.']	['∀x (Shoes(x) → ¬Food(x))', '∀x (Slipper(x) → Shoes(x))', '∀x (Food(x) ⊕ Clothes(x))', '∀x (Wearable(x) → ¬AirTight(x))', '∀x (Clothes(x) → Wearable(x))', '¬(AirTight(watch) ∧ Clothes(watch)) → (AirTight(watch) ∧ Clothes(watch)) ⊕ (¬AirTight(watch) ∧ ¬Clothes(watch))']	False	hyb
458	1328	Watch is neither airtight nor a slipper.	['No shoes are food. ', 'All slippers are shoes.', 'A thing is either food or clothes.', 'No wearable things are airtight.', 'All clothes are wearable. ', 'If a watch is not airtight and clothes, then a watch is either both airtight and clothes, or neither airtight nor clothes.']	['∀x (Shoes(x) → ¬Food(x))', '∀x (Slipper(x) → Shoes(x))', '∀x (Food(x) ⊕ Clothes(x))', '∀x (Wearable(x) → ¬AirTight(x))', '∀x (Clothes(x) → Wearable(x))', '¬(AirTight(watch) ∧ Clothes(watch)) → (AirTight(watch) ∧ Clothes(watch)) ⊕ (¬AirTight(watch) ∧ ¬Clothes(watch))']	True	hyb
35	102	Carlos Reyes is an Olympian.	['An Olympian is a person who trains for an Olympic sport and goes to the Olympics.', 'Carlos Reyes trains for an Olympic sport.', 'Carlos Reyes went to the Olympics.', 'Carlos Reyes is a welterweight.', 'Heavy weights are not welterweights.']	['∀x (DoesOlympicSport(x) ∧ GoesToOlympicGames(x) → IsOlympian(x))', 'DoesOlympicSport(carlosReyes)', 'GoesToOlympicGames(carlosReyes)', 'IsWelterWeight(carlosReyes)', '∀x (IsWelterWeight(x) → ¬IsHeavyWeight(x))']	True	wiki
35	103	Carlos Reyes is a heavy weight.	['An Olympian is a person who trains for an Olympic sport and goes to the Olympics.', 'Carlos Reyes trains for an Olympic sport.', 'Carlos Reyes went to the Olympics.', 'Carlos Reyes is a welterweight.', 'Heavy weights are not welterweights.']	['∀x (DoesOlympicSport(x) ∧ GoesToOlympicGames(x) → IsOlympian(x))', 'DoesOlympicSport(carlosReyes)', 'GoesToOlympicGames(carlosReyes)', 'IsWelterWeight(carlosReyes)', '∀x (IsWelterWeight(x) → ¬IsHeavyWeight(x))']	False	wiki
35	104	Carlos Reyes won an Olympic medal.	['An Olympian is a person who trains for an Olympic sport and goes to the Olympics.', 'Carlos Reyes trains for an Olympic sport.', 'Carlos Reyes went to the Olympics.', 'Carlos Reyes is a welterweight.', 'Heavy weights are not welterweights.']	['∀x (DoesOlympicSport(x) ∧ GoesToOlympicGames(x) → IsOlympian(x))', 'DoesOlympicSport(carlosReyes)', 'GoesToOlympicGames(carlosReyes)', 'IsWelterWeight(carlosReyes)', '∀x (IsWelterWeight(x) → ¬IsHeavyWeight(x))']	Unknown	wiki
333	868	Sam is a young teenage girl who attends college.	['If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.', 'If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.', 'If people are big fans of pop bands and singers, then they have a lot of decorations in their room.', 'All young teenage girls who attend college are big fans of pop bands and singers.', 'If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.']	['∀x (Decor(x) → ¬MoveOut(x))', '∀x (Ambitious(x) → MoveOut(x))', '∀x (Fans(x) → Decor(x))', '∀x (CollegeTeen(x) → Ambitious(x))', 'Ambitious(sam) → Fans(sam)']	False	hyb
333	869	Sam is not a young teenage girl who attends college.	['If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.', 'If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.', 'If people are big fans of pop bands and singers, then they have a lot of decorations in their room.', 'All young teenage girls who attend college are big fans of pop bands and singers.', 'If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.']	['∀x (Decor(x) → ¬MoveOut(x))', '∀x (Ambitious(x) → MoveOut(x))', '∀x (Fans(x) → Decor(x))', '∀x (CollegeTeen(x) → Ambitious(x))', 'Ambitious(sam) → Fans(sam)']	True	hyb
333	870	Sam is a big fan of pop bands and singers.	['If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.', 'If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.', 'If people are big fans of pop bands and singers, then they have a lot of decorations in their room.', 'All young teenage girls who attend college are big fans of pop bands and singers.', 'If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.']	['∀x (Decor(x) → ¬MoveOut(x))', '∀x (Ambitious(x) → MoveOut(x))', '∀x (Fans(x) → Decor(x))', '∀x (CollegeTeen(x) → Ambitious(x))', 'Ambitious(sam) → Fans(sam)']	Unknown	hyb
333	871	Sam neither has high ambitions and future career goals nor is she a young teenage girl who attends college.	['If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.', 'If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.', 'If people are big fans of pop bands and singers, then they have a lot of decorations in their room.', 'All young teenage girls who attend college are big fans of pop bands and singers.', 'If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.']	['∀x (Decor(x) → ¬MoveOut(x))', '∀x (Ambitious(x) → MoveOut(x))', '∀x (Fans(x) → Decor(x))', '∀x (CollegeTeen(x) → Ambitious(x))', 'Ambitious(sam) → Fans(sam)']	True	hyb
333	872	Sam has high ambitions and future career goals and is a young teenage girl who attends college.	['If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.', 'If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.', 'If people are big fans of pop bands and singers, then they have a lot of decorations in their room.', 'All young teenage girls who attend college are big fans of pop bands and singers.', 'If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.']	['∀x (Decor(x) → ¬MoveOut(x))', '∀x (Ambitious(x) → MoveOut(x))', '∀x (Fans(x) → Decor(x))', '∀x (CollegeTeen(x) → Ambitious(x))', 'Ambitious(sam) → Fans(sam)']	False	hyb
333	873	Sam has high ambitions and future career goals and is a young teenage girl who attends college.	['If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.', 'If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.', 'If people are big fans of pop bands and singers, then they have a lot of decorations in their room.', 'All young teenage girls who attend college are big fans of pop bands and singers.', 'If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.']	['∀x (Decor(x) → ¬MoveOut(x))', '∀x (Ambitious(x) → MoveOut(x))', '∀x (Fans(x) → Decor(x))', '∀x (CollegeTeen(x) → Ambitious(x))', 'Ambitious(sam) → Fans(sam)']	False	hyb
333	874	If Sam is a young teenage girl who attends college, then Sam either does not have high ambitions and future career goals or is a big fan of pop bands and singers.	['If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.', 'If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.', 'If people are big fans of pop bands and singers, then they have a lot of decorations in their room.', 'All young teenage girls who attend college are big fans of pop bands and singers.', 'If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.']	['∀x (Decor(x) → ¬MoveOut(x))', '∀x (Ambitious(x) → MoveOut(x))', '∀x (Fans(x) → Decor(x))', '∀x (CollegeTeen(x) → Ambitious(x))', 'Ambitious(sam) → Fans(sam)']	True	hyb
333	875	If Sam has high ambitions and future career goals and is a young teenage girl who attends college, then Sam either does not have high ambitions and future career goals or is not a young teenage girl who attends college.	['If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.', 'If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.', 'If people are big fans of pop bands and singers, then they have a lot of decorations in their room.', 'All young teenage girls who attend college are big fans of pop bands and singers.', 'If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.']	['∀x (Decor(x) → ¬MoveOut(x))', '∀x (Ambitious(x) → MoveOut(x))', '∀x (Fans(x) → Decor(x))', '∀x (CollegeTeen(x) → Ambitious(x))', 'Ambitious(sam) → Fans(sam)']	True	hyb
333	876	If Sam has high ambitions and future career goals, then Sam is a young teenage girl who attends college.	['If people have a lot of decorations in their room, they cannot pack and move out of their rooms very easily.', 'If people have high ambitions and future career goals, then they can pack and move out of their rooms very easily.', 'If people are big fans of pop bands and singers, then they have a lot of decorations in their room.', 'All young teenage girls who attend college are big fans of pop bands and singers.', 'If Sam has high ambitions and future career goals, then Sam is a big fan of pop bands and singers.']	['∀x (Decor(x) → ¬MoveOut(x))', '∀x (Ambitious(x) → MoveOut(x))', '∀x (Fans(x) → Decor(x))', '∀x (CollegeTeen(x) → Ambitious(x))', 'Ambitious(sam) → Fans(sam)']	True	hyb
182	527	Willy is in a suit.	['A student who loves shrieking will be punished.', 'If a person swears, then he is a student.', 'If someone is a teacher, then Bob will talk to him.', 'All gentlemen are in a suit.', 'All teachers are men.', 'There is a teacher.', 'If someone is not a gentlemen, then he is not nice.', 'Willy is nice.', 'Bob loves shrieking and swearing.']	['∀x (Student(x) ∧ Shriek(x) → Punished(x))', '∀x (Swear(x) → Student(x))', '∀x (Teacher(x) → Talk(bob, x))', '∀x (Gentleman(x) → Suit(x))', '∀x (Teacher(x) → Man(x))', '∃x (Teacher(x))', '∀x (¬Gentleman(x) → ¬Nice(x))', 'Nice(willy)', 'Shriek(bob) ∧ Swear(bob)']	True	wiki
182	528	Bob will be not punished.	['A student who loves shrieking will be punished.', 'If a person swears, then he is a student.', 'If someone is a teacher, then Bob will talk to him.', 'All gentlemen are in a suit.', 'All teachers are men.', 'There is a teacher.', 'If someone is not a gentlemen, then he is not nice.', 'Willy is nice.', 'Bob loves shrieking and swearing.']	['∀x (Student(x) ∧ Shriek(x) → Punished(x))', '∀x (Swear(x) → Student(x))', '∀x (Teacher(x) → Talk(bob, x))', '∀x (Gentleman(x) → Suit(x))', '∀x (Teacher(x) → Man(x))', '∃x (Teacher(x))', '∀x (¬Gentleman(x) → ¬Nice(x))', 'Nice(willy)', 'Shriek(bob) ∧ Swear(bob)']	False	wiki
182	529	There is a man that Bob will talk to.	['A student who loves shrieking will be punished.', 'If a person swears, then he is a student.', 'If someone is a teacher, then Bob will talk to him.', 'All gentlemen are in a suit.', 'All teachers are men.', 'There is a teacher.', 'If someone is not a gentlemen, then he is not nice.', 'Willy is nice.', 'Bob loves shrieking and swearing.']	['∀x (Student(x) ∧ Shriek(x) → Punished(x))', '∀x (Swear(x) → Student(x))', '∀x (Teacher(x) → Talk(bob, x))', '∀x (Gentleman(x) → Suit(x))', '∀x (Teacher(x) → Man(x))', '∃x (Teacher(x))', '∀x (¬Gentleman(x) → ¬Nice(x))', 'Nice(willy)', 'Shriek(bob) ∧ Swear(bob)']	True	wiki
49	142	Quincy McDuffie is a good wide receiver.	['Quincy McDuffie is an American professional wide receiver in Canadian Football.', 'People who can catch balls are good wide receivers. ', 'Quincy McDuffie can catch many footballs easily.', 'Good wide receivers play professionally.', 'Good wide receivers can catch with both their left and right hand.', 'All footballs are balls.']	['American(quincymcduffie) ∧ Professional(quincymcduffie) ∧ WideReciever(quincymcduffie) ∧ In(quincymcduffie, canadianfootball)', '∀x ∃y (CanCatch(x, y) ∧ Ball(y) → Good(x, widereciever))', '∃x (Football(x) ∧ CanCatch(quincymcduffie, x))', '∀x (Good(x, widereciever) → Professional(x))', '∀x (Good(x, widereciever) → CanCatchWith(x, lefthand) ∧ CanCatchWith(x, righthand))', '∀x (Football(x) → Ball(x))']	True	wiki
49	143	Quincy McDuffie can catch every ball.	['Quincy McDuffie is an American professional wide receiver in Canadian Football.', 'People who can catch balls are good wide receivers. ', 'Quincy McDuffie can catch many footballs easily.', 'Good wide receivers play professionally.', 'Good wide receivers can catch with both their left and right hand.', 'All footballs are balls.']	['American(quincymcduffie) ∧ Professional(quincymcduffie) ∧ WideReciever(quincymcduffie) ∧ In(quincymcduffie, canadianfootball)', '∀x ∃y (CanCatch(x, y) ∧ Ball(y) → Good(x, widereciever))', '∃x (Football(x) ∧ CanCatch(quincymcduffie, x))', '∀x (Good(x, widereciever) → Professional(x))', '∀x (Good(x, widereciever) → CanCatchWith(x, lefthand) ∧ CanCatchWith(x, righthand))', '∀x (Football(x) → Ball(x))']	Unknown	wiki
49	144	Professional wide receivers are good at catching balls.	['Quincy McDuffie is an American professional wide receiver in Canadian Football.', 'People who can catch balls are good wide receivers. ', 'Quincy McDuffie can catch many footballs easily.', 'Good wide receivers play professionally.', 'Good wide receivers can catch with both their left and right hand.', 'All footballs are balls.']	['American(quincymcduffie) ∧ Professional(quincymcduffie) ∧ WideReciever(quincymcduffie) ∧ In(quincymcduffie, canadianfootball)', '∀x ∃y (CanCatch(x, y) ∧ Ball(y) → Good(x, widereciever))', '∃x (Football(x) ∧ CanCatch(quincymcduffie, x))', '∀x (Good(x, widereciever) → Professional(x))', '∀x (Good(x, widereciever) → CanCatchWith(x, lefthand) ∧ CanCatchWith(x, righthand))', '∀x (Football(x) → Ball(x))']	Unknown	wiki
6	14	Longueau is situated on the Paris–Lille railway.	['Boves is a railway station located in France. ', 'The preceding station of Boves is Longueau.', 'The preceding station of Dommartin is Boves.', 'France is a European country.', 'Dommartin is situated on the Paris–Lille railway. ', 'Any two contiguous stations are on the same railway.', 'Boves is served by regional TER Hauts-de-France trains.', 'If A is located in B and B is located in C, then A is located in C.', 'If A precedes B and B preceds C, than A preceds C.']	['RailwayStation(boves) ∧ Locate(boves, france)', 'Precede(boves, longueau)', 'Precede(dommartin, boves)', 'Locate(france, europe)', 'Situate(dommartin, pairsLille)', '∀x ∀y ∀z ((Situate(x, z) ∧ (Precede(x, y) ∨ Precede(y, x))) → Situate(y, z))', 'Serve(hautsDeFrance, boves)', '∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))', '∀x ∀y ∀z ((Precede(x, y) ∧ Precede(y, z)) → Precede(x, z))']	True	wiki
6	15	Boves is not in Europe.	['Boves is a railway station located in France. ', 'The preceding station of Boves is Longueau.', 'The preceding station of Dommartin is Boves.', 'France is a European country.', 'Dommartin is situated on the Paris–Lille railway. ', 'Any two contiguous stations are on the same railway.', 'Boves is served by regional TER Hauts-de-France trains.', 'If A is located in B and B is located in C, then A is located in C.', 'If A precedes B and B preceds C, than A preceds C.']	['RailwayStation(boves) ∧ Locate(boves, france)', 'Precede(boves, longueau)', 'Precede(dommartin, boves)', 'Locate(france, europe)', 'Situate(dommartin, pairsLille)', '∀x ∀y ∀z ((Situate(x, z) ∧ (Precede(x, y) ∨ Precede(y, x))) → Situate(y, z))', 'Serve(hautsDeFrance, boves)', '∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))', '∀x ∀y ∀z ((Precede(x, y) ∧ Precede(y, z)) → Precede(x, z))']	False	wiki
6	16	Longueau is served by regional TER Hauts-de-France trains.	['Boves is a railway station located in France. ', 'The preceding station of Boves is Longueau.', 'The preceding station of Dommartin is Boves.', 'France is a European country.', 'Dommartin is situated on the Paris–Lille railway. ', 'Any two contiguous stations are on the same railway.', 'Boves is served by regional TER Hauts-de-France trains.', 'If A is located in B and B is located in C, then A is located in C.', 'If A precedes B and B preceds C, than A preceds C.']	['RailwayStation(boves) ∧ Locate(boves, france)', 'Precede(boves, longueau)', 'Precede(dommartin, boves)', 'Locate(france, europe)', 'Situate(dommartin, pairsLille)', '∀x ∀y ∀z ((Situate(x, z) ∧ (Precede(x, y) ∨ Precede(y, x))) → Situate(y, z))', 'Serve(hautsDeFrance, boves)', '∀x ∀y ∀z ((Locate(x, y) ∧ Locate(y, z)) → Locate(x, z))', '∀x ∀y ∀z ((Precede(x, y) ∧ Precede(y, z)) → Precede(x, z))']	Unknown	wiki
102	310	Ted Smith was a sergeant.	['Edwin Smith was a New Zealand Rower from Auckland.', 'Edwin Smith was also known as Ted Smith.', 'Edwin Smith went to Rose Road Primary School, located in Grey Lynn.', 'Edwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt.', 'Broadway Sheetmetals was a buisness that was ran and owned by Edwin Smith, who was a sheetmetal worker.']	['From(edwinsmith, newzealand) ∧ Rower(edwinsmith) ∧ From(edwinsmith, auckland)', 'KnownAs(edwinsmith, tedsmith)', 'WentTo(edwinsmith, roseroadprimaryschool) ∧ LocatedIn(roseroadprimaryschool, greylynn)', 'Sergeant(edwinsmith) ∧ ServedWith(edwinsmith, newzealand24thbattalion) ∧ ServedIn(edwinsmith, italy) ∧ ServedIn(edwinsmith, egypt)', 'Buisness(broadwaysheetmetals) ∧ Ran(edwinsmith, broadwaysheetmetals) ∧ Owned(edwinsmith, broadwaysheetmetals) ∧ SheetmetalWorker(edwinsmith)']	Unknown	wiki
102	311	There are no rowers that own a buisness.	['Edwin Smith was a New Zealand Rower from Auckland.', 'Edwin Smith was also known as Ted Smith.', 'Edwin Smith went to Rose Road Primary School, located in Grey Lynn.', 'Edwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt.', 'Broadway Sheetmetals was a buisness that was ran and owned by Edwin Smith, who was a sheetmetal worker.']	['From(edwinsmith, newzealand) ∧ Rower(edwinsmith) ∧ From(edwinsmith, auckland)', 'KnownAs(edwinsmith, tedsmith)', 'WentTo(edwinsmith, roseroadprimaryschool) ∧ LocatedIn(roseroadprimaryschool, greylynn)', 'Sergeant(edwinsmith) ∧ ServedWith(edwinsmith, newzealand24thbattalion) ∧ ServedIn(edwinsmith, italy) ∧ ServedIn(edwinsmith, egypt)', 'Buisness(broadwaysheetmetals) ∧ Ran(edwinsmith, broadwaysheetmetals) ∧ Owned(edwinsmith, broadwaysheetmetals) ∧ SheetmetalWorker(edwinsmith)']	False	wiki
102	312	No sergeants are from Auckland.	['Edwin Smith was a New Zealand Rower from Auckland.', 'Edwin Smith was also known as Ted Smith.', 'Edwin Smith went to Rose Road Primary School, located in Grey Lynn.', 'Edwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt.', 'Broadway Sheetmetals was a buisness that was ran and owned by Edwin Smith, who was a sheetmetal worker.']	['From(edwinsmith, newzealand) ∧ Rower(edwinsmith) ∧ From(edwinsmith, auckland)', 'KnownAs(edwinsmith, tedsmith)', 'WentTo(edwinsmith, roseroadprimaryschool) ∧ LocatedIn(roseroadprimaryschool, greylynn)', 'Sergeant(edwinsmith) ∧ ServedWith(edwinsmith, newzealand24thbattalion) ∧ ServedIn(edwinsmith, italy) ∧ ServedIn(edwinsmith, egypt)', 'Buisness(broadwaysheetmetals) ∧ Ran(edwinsmith, broadwaysheetmetals) ∧ Owned(edwinsmith, broadwaysheetmetals) ∧ SheetmetalWorker(edwinsmith)']	False	wiki
102	313	No buisness owner has served in Egypt.	['Edwin Smith was a New Zealand Rower from Auckland.', 'Edwin Smith was also known as Ted Smith.', 'Edwin Smith went to Rose Road Primary School, located in Grey Lynn.', 'Edwin Smith was a sergeant who served with the New Zealand 24th battalion in Italy and Egypt.', 'Broadway Sheetmetals was a buisness that was ran and owned by Edwin Smith, who was a sheetmetal worker.']	['From(edwinsmith, newzealand) ∧ Rower(edwinsmith) ∧ From(edwinsmith, auckland)', 'KnownAs(edwinsmith, tedsmith)', 'WentTo(edwinsmith, roseroadprimaryschool) ∧ LocatedIn(roseroadprimaryschool, greylynn)', 'Sergeant(edwinsmith) ∧ ServedWith(edwinsmith, newzealand24thbattalion) ∧ ServedIn(edwinsmith, italy) ∧ ServedIn(edwinsmith, egypt)', 'Buisness(broadwaysheetmetals) ∧ Ran(edwinsmith, broadwaysheetmetals) ∧ Owned(edwinsmith, broadwaysheetmetals) ∧ SheetmetalWorker(edwinsmith)']	False	wiki
175	506	All humans are werewolves.	['A werewolf is a human that can turn into a wolf.', 'A werewolf has been scratched or bitten by another werewolf.', 'If someone has been scratched or bitten, they have been attacked.']	['∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x))', '∀x ∃y (Werewolf(x) → (BittenBy(x, y) ∨ ScratchedBy(x, y)) ∧ Werewolf(y))', '∀x ∃y (BittenBy(x, y) ∨ ScratchedBy(x, y)) → AttackedBy(x,y)']	Unknown	wiki
175	507	A werewolf is a wolf.	['A werewolf is a human that can turn into a wolf.', 'A werewolf has been scratched or bitten by another werewolf.', 'If someone has been scratched or bitten, they have been attacked.']	['∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x))', '∀x ∃y (Werewolf(x) → (BittenBy(x, y) ∨ ScratchedBy(x, y)) ∧ Werewolf(y))', '∀x ∃y (BittenBy(x, y) ∨ ScratchedBy(x, y)) → AttackedBy(x,y)']	Unknown	wiki
175	508	A werewolf has scratched someone before.	['A werewolf is a human that can turn into a wolf.', 'A werewolf has been scratched or bitten by another werewolf.', 'If someone has been scratched or bitten, they have been attacked.']	['∀x (Human(x) ∧ CanTurnInto(x, wolf) → Werewolf(x))', '∀x ∃y (Werewolf(x) → (BittenBy(x, y) ∨ ScratchedBy(x, y)) ∧ Werewolf(y))', '∀x ∃y (BittenBy(x, y) ∨ ScratchedBy(x, y)) → AttackedBy(x,y)']	Unknown	wiki
139	409	Jung fought Sadollah.	['UFC Fight Night was a mixed martial arts event and was held in Sweden.', 'At UFC Fight Night, Sadollah was scheduled to fight Musoke.', 'Sadollah fought Akiyama at UFC Fight Night.', 'Musoke fought Yakovlev at UFC Fight Night.', 'Jung was injured at UFC Fight Night.', 'Injured people did not fight at UFC Fight Night.']	['Event(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ Sweden(uFCFightNight)', 'Event(uFCFightNight) → ScheduledToFight(sadollah, musoke)', 'Event(uFCFightNight) → Fight(sadollah, akiyama)', 'Event(uFCFightNight) → Fight(musoke, yakovlev)', 'Event(uFCFightNight) → Injured(jung)', '∀x (Injured(x) → ¬FightInUFC(x))']	Unknown	wiki
139	410	Jung did not fight at UFC Fight Night.	['UFC Fight Night was a mixed martial arts event and was held in Sweden.', 'At UFC Fight Night, Sadollah was scheduled to fight Musoke.', 'Sadollah fought Akiyama at UFC Fight Night.', 'Musoke fought Yakovlev at UFC Fight Night.', 'Jung was injured at UFC Fight Night.', 'Injured people did not fight at UFC Fight Night.']	['Event(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ Sweden(uFCFightNight)', 'Event(uFCFightNight) → ScheduledToFight(sadollah, musoke)', 'Event(uFCFightNight) → Fight(sadollah, akiyama)', 'Event(uFCFightNight) → Fight(musoke, yakovlev)', 'Event(uFCFightNight) → Injured(jung)', '∀x (Injured(x) → ¬FightInUFC(x))']	True	wiki
139	411	Sadollah fought Musoke.	['UFC Fight Night was a mixed martial arts event and was held in Sweden.', 'At UFC Fight Night, Sadollah was scheduled to fight Musoke.', 'Sadollah fought Akiyama at UFC Fight Night.', 'Musoke fought Yakovlev at UFC Fight Night.', 'Jung was injured at UFC Fight Night.', 'Injured people did not fight at UFC Fight Night.']	['Event(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ Sweden(uFCFightNight)', 'Event(uFCFightNight) → ScheduledToFight(sadollah, musoke)', 'Event(uFCFightNight) → Fight(sadollah, akiyama)', 'Event(uFCFightNight) → Fight(musoke, yakovlev)', 'Event(uFCFightNight) → Injured(jung)', '∀x (Injured(x) → ¬FightInUFC(x))']	Unknown	wiki
139	412	Nelson fought Story at UFC Fight Night.	['UFC Fight Night was a mixed martial arts event and was held in Sweden.', 'At UFC Fight Night, Sadollah was scheduled to fight Musoke.', 'Sadollah fought Akiyama at UFC Fight Night.', 'Musoke fought Yakovlev at UFC Fight Night.', 'Jung was injured at UFC Fight Night.', 'Injured people did not fight at UFC Fight Night.']	['Event(uFCFightNight) ∧ MixedMartial(uFCFightNight) ∧ Sweden(uFCFightNight)', 'Event(uFCFightNight) → ScheduledToFight(sadollah, musoke)', 'Event(uFCFightNight) → Fight(sadollah, akiyama)', 'Event(uFCFightNight) → Fight(musoke, yakovlev)', 'Event(uFCFightNight) → Injured(jung)', '∀x (Injured(x) → ¬FightInUFC(x))']	Unknown	wiki
468	1356	Coke is orange juice.	['All drinks are edible. ', 'All juices are drinks. ', 'All orange juice is a juice. ', 'A juice is either an orange juice or an apple juice.', 'All apple juice is sweet.', 'If coke is apple juice, then coke is a drink.', 'If coke is not apple juice, then coke is not edible.']	['∀x (Drink(x) → Edible(x))', '∀x (Juice(x) → Drink(x))', '∀x (OrangeJuice(x) → Juice(x))', '∀x (OrangeJuice(x) ∨ AppleJuice(x))', '∀x (AppleJuice(x) → Sweet(x))', 'AppleJuice(coke) → Drink(coke)', '¬AppleJuice(coke) → ¬Edible(coke)']	Unknown	hyb
468	1357	Coke is edible and sweet.	['All drinks are edible. ', 'All juices are drinks. ', 'All orange juice is a juice. ', 'A juice is either an orange juice or an apple juice.', 'All apple juice is sweet.', 'If coke is apple juice, then coke is a drink.', 'If coke is not apple juice, then coke is not edible.']	['∀x (Drink(x) → Edible(x))', '∀x (Juice(x) → Drink(x))', '∀x (OrangeJuice(x) → Juice(x))', '∀x (OrangeJuice(x) ∨ AppleJuice(x))', '∀x (AppleJuice(x) → Sweet(x))', 'AppleJuice(coke) → Drink(coke)', '¬AppleJuice(coke) → ¬Edible(coke)']	True	hyb
468	1358	Coke is not edible and sweet.	['All drinks are edible. ', 'All juices are drinks. ', 'All orange juice is a juice. ', 'A juice is either an orange juice or an apple juice.', 'All apple juice is sweet.', 'If coke is apple juice, then coke is a drink.', 'If coke is not apple juice, then coke is not edible.']	['∀x (Drink(x) → Edible(x))', '∀x (Juice(x) → Drink(x))', '∀x (OrangeJuice(x) → Juice(x))', '∀x (OrangeJuice(x) ∨ AppleJuice(x))', '∀x (AppleJuice(x) → Sweet(x))', 'AppleJuice(coke) → Drink(coke)', '¬AppleJuice(coke) → ¬Edible(coke)']	False	hyb
41	119	Daniel was not killed by the Spanish Nationalists.	['Federico Garcia Lorca was a talented Spanish poet and he supported the Popular Front.', 'The Spanish Nationalists opposed anyone who supported the Popular Front', 'Talented poets are popular.', 'Spanish Nationalists killed anyone who they opposed and were popular.', 'Daniel supported the Popular Front but was not popular.']	['TalentedPoet(lorca) ∧ SupportPopulists(lorca)', '∀x (SupportPopulists(x) → Opposed(nationalists, x))', '∀x (TalentedPoet(x) → Popular(x))', '∀x (Opposed(nationalists, x) ∧ Popular(x) → Killed(nationalists, x))', 'SupportPopulists(daniel) ∧ ¬Popular(daniel)']	Unknown	wiki
41	120	Lorca was killed by the Spanish Nationalists.	['Federico Garcia Lorca was a talented Spanish poet and he supported the Popular Front.', 'The Spanish Nationalists opposed anyone who supported the Popular Front', 'Talented poets are popular.', 'Spanish Nationalists killed anyone who they opposed and were popular.', 'Daniel supported the Popular Front but was not popular.']	['TalentedPoet(lorca) ∧ SupportPopulists(lorca)', '∀x (SupportPopulists(x) → Opposed(nationalists, x))', '∀x (TalentedPoet(x) → Popular(x))', '∀x (Opposed(nationalists, x) ∧ Popular(x) → Killed(nationalists, x))', 'SupportPopulists(daniel) ∧ ¬Popular(daniel)']	True	wiki
366	978	Franny has to visit the dentist frequently.	['People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.', 'If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.', 'If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.', 'If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.', 'If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.', 'Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  ']	['∀x (Kombucha(x) ∨ CocaCola(x))', '∀x (CocaCola(x) → BusyParents(x))', '∀x (CocaCola(x) → Dentist(x))', '∀x (BusyParents(x) → Erratic(x))', '∀x (Erratic(x) → ¬Consistent(x))', '(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))']	Unknown	hyb
366	979	If Franny either both grew up with extremely busy parents who did not have time to pack her lunch and drink kombucha every day or neither grew up with extremely busy parents who did not have time to pack her lunch nor drink kombucha every day, then Franny neither visits the dentist frequently nor drinks Coca Cola or Pepsi products every day.	['People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.', 'If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.', 'If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.', 'If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.', 'If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.', 'Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  ']	['∀x (Kombucha(x) ∨ CocaCola(x))', '∀x (CocaCola(x) → BusyParents(x))', '∀x (CocaCola(x) → Dentist(x))', '∀x (BusyParents(x) → Erratic(x))', '∀x (Erratic(x) → ¬Consistent(x))', '(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))']	True	hyb
366	980	If Franny either visits the dentist frequently or drinks kombucha every day, then Franny both visits the dentist frequently and drinks Coca-Cola or Pepsi products every day.	['People either drink kombucha every day or drink Coca-Cola or Pepsi products every day.', 'If people drink Coca-Cola or Pepsi products every day, then they grew up with extremely busy parents who did not have time to pack them lunch.', 'If people drink Coca-Cola or Pepsi products every day, then they have to visit the dentist frequently.', 'If people grew up with extremely busy parents who did not have time to pack them lunch, then they have erratic and diverse eating habits.', 'If people have erratic and diverse eating habits, then they do not have consistent everyday routines and like sticking to a solid schedule.', 'Franny either both grew up with extremely busy parents who did not have time to pack her lunch and has consistent everyday routines and like sticking to a solid schedule, or she neither grew up with extremely busy parents who did not have time to pack her lunch nor has consistent everyday routines and likes sticking to a schedule.  ']	['∀x (Kombucha(x) ∨ CocaCola(x))', '∀x (CocaCola(x) → BusyParents(x))', '∀x (CocaCola(x) → Dentist(x))', '∀x (BusyParents(x) → Erratic(x))', '∀x (Erratic(x) → ¬Consistent(x))', '(BusyParents(franny) ∧ Consistent(franny)) ⊕ (¬BusyParents(franny) ∧ ¬Consistent(franny))']	False	hyb
22	63	James is not able to watch 3 movies every week without any additional fees.	['If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ', 'Some customers go to cinemas every week. ', 'Customers who prefer TV series will not watch TV series in cinemas.', 'James watches TV series in cinemas. ', 'James subscribes to AMC A List.', 'Peter prefers TV series.']	['∀x (SubscribedTo(x, amcalist) → ThreeMovies(x) ∧ NoFees(x))', '∃x (CinemaEveryWeek(x))', '∀x (Prefer(x, tvseries) → ¬WatchTVIn(x, cinemas))', 'WatchTVIn(james, cinemas)', 'SubscribedTo(james, amcalist)', 'Prefer(peter, tvseries)']	False	wiki
22	64	James goes to cinemas every week.	['If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ', 'Some customers go to cinemas every week. ', 'Customers who prefer TV series will not watch TV series in cinemas.', 'James watches TV series in cinemas. ', 'James subscribes to AMC A List.', 'Peter prefers TV series.']	['∀x (SubscribedTo(x, amcalist) → ThreeMovies(x) ∧ NoFees(x))', '∃x (CinemaEveryWeek(x))', '∀x (Prefer(x, tvseries) → ¬WatchTVIn(x, cinemas))', 'WatchTVIn(james, cinemas)', 'SubscribedTo(james, amcalist)', 'Prefer(peter, tvseries)']	Unknown	wiki
22	65	Peter will not watch TV series in cinemas.	['If a customer subscribes to AMC A List, then he/she can watch 3 movies every week without any additional fees. ', 'Some customers go to cinemas every week. ', 'Customers who prefer TV series will not watch TV series in cinemas.', 'James watches TV series in cinemas. ', 'James subscribes to AMC A List.', 'Peter prefers TV series.']	['∀x (SubscribedTo(x, amcalist) → ThreeMovies(x) ∧ NoFees(x))', '∃x (CinemaEveryWeek(x))', '∀x (Prefer(x, tvseries) → ¬WatchTVIn(x, cinemas))', 'WatchTVIn(james, cinemas)', 'SubscribedTo(james, amcalist)', 'Prefer(peter, tvseries)']	True	wiki
275	724	Bulbophyllum attenuatum is not an orchid.	['Bulbophyllum attenuatum is in the genus bulbophyllum.', 'All bulbophyllum are orchids.']	['InGenus(bulbophyllumattenuatum, bulbophyllum)', '∀x (InGenus(x, bulbophyllum) → Orchid(x))']	False	wiki
163	470	Vladivostok is the administrative center of the federal district with the largest area.	['There are eight federal districts of Russia: Central, Northwestern, Southern, North Caucasian, Volga, Ural, Siberian and Far Eastern.', 'The Central federal district has the largest population among all federal districts in Russia.', 'Moscow is the administrative center of the Central federal district.', 'Yekaterinburg is the administrative center of the Ural federal district.', 'Vladivostok is the administrative center of the Far Eastern federal district.', 'The Far Eastern federal district has the largest area among all federal districts in Russia.', 'Some federal districts of Russia were established in 2000.']	['FederalDistrictOfRussia(central) ∨ FederalDistrictOfRussia(northwestern) ∨ FederalDistrictOfRussia(southern) ∨ FederalDistrictOfRussia(northcaucasian) ∨ FederalDistrictOfRussia(volga) ∨ FederalDistrictOfRussia(ural) ∨ FederalDistrictOfRussia(siberian) ∨ FederalDistrictOfRussia(fareastern)', 'FederalDistrictOfRussia(central) ∧ LargestPopulationIn(central) ', 'AdministrativeCenterOf(moscow, central)', 'AdministrativeCenterOf(yekaterinburg, ural)', 'AdministrativeCenterOf(vladivostok, fareastern)', 'FederalDistrictOfRussia(fareastern) ∧ LargestAreaIn(fareastern)', '∃x (FederalDistrictOfRussia(x) → EstablishedIn(x, 2000))']	True	wiki
163	471	Moscow is the administrative center of the federal district with the largest population.	['There are eight federal districts of Russia: Central, Northwestern, Southern, North Caucasian, Volga, Ural, Siberian and Far Eastern.', 'The Central federal district has the largest population among all federal districts in Russia.', 'Moscow is the administrative center of the Central federal district.', 'Yekaterinburg is the administrative center of the Ural federal district.', 'Vladivostok is the administrative center of the Far Eastern federal district.', 'The Far Eastern federal district has the largest area among all federal districts in Russia.', 'Some federal districts of Russia were established in 2000.']	['FederalDistrictOfRussia(central) ∨ FederalDistrictOfRussia(northwestern) ∨ FederalDistrictOfRussia(southern) ∨ FederalDistrictOfRussia(northcaucasian) ∨ FederalDistrictOfRussia(volga) ∨ FederalDistrictOfRussia(ural) ∨ FederalDistrictOfRussia(siberian) ∨ FederalDistrictOfRussia(fareastern)', 'FederalDistrictOfRussia(central) ∧ LargestPopulationIn(central) ', 'AdministrativeCenterOf(moscow, central)', 'AdministrativeCenterOf(yekaterinburg, ural)', 'AdministrativeCenterOf(vladivostok, fareastern)', 'FederalDistrictOfRussia(fareastern) ∧ LargestAreaIn(fareastern)', '∃x (FederalDistrictOfRussia(x) → EstablishedIn(x, 2000))']	True	wiki
163	472	The Northwestern federal district was established in 2000.	['There are eight federal districts of Russia: Central, Northwestern, Southern, North Caucasian, Volga, Ural, Siberian and Far Eastern.', 'The Central federal district has the largest population among all federal districts in Russia.', 'Moscow is the administrative center of the Central federal district.', 'Yekaterinburg is the administrative center of the Ural federal district.', 'Vladivostok is the administrative center of the Far Eastern federal district.', 'The Far Eastern federal district has the largest area among all federal districts in Russia.', 'Some federal districts of Russia were established in 2000.']	['FederalDistrictOfRussia(central) ∨ FederalDistrictOfRussia(northwestern) ∨ FederalDistrictOfRussia(southern) ∨ FederalDistrictOfRussia(northcaucasian) ∨ FederalDistrictOfRussia(volga) ∨ FederalDistrictOfRussia(ural) ∨ FederalDistrictOfRussia(siberian) ∨ FederalDistrictOfRussia(fareastern)', 'FederalDistrictOfRussia(central) ∧ LargestPopulationIn(central) ', 'AdministrativeCenterOf(moscow, central)', 'AdministrativeCenterOf(yekaterinburg, ural)', 'AdministrativeCenterOf(vladivostok, fareastern)', 'FederalDistrictOfRussia(fareastern) ∧ LargestAreaIn(fareastern)', '∃x (FederalDistrictOfRussia(x) → EstablishedIn(x, 2000))']	Unknown	wiki
320	815	Breast cancer can be treated at home.	['All cancers are malignant tumors.', 'No malignant tumor can be treated at home.', 'All colorectal cancer is cancer.', 'Having a cold can be treated at home.', 'Breast cancer is neither having a cold nor a malignant tumor (exclusive).']	['∀x (Cancer(x) → MalignantTumor(x))', '∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))', '∀x (ColorectalCancer(x) → Cancer(x))', '∀x (HavingACold(x) → CanBeTreatedAtHome(x))', '¬(HavingACold(breastCancer) ⊕ MalignantTumor(breastCancer))']	Unknown	hyb
320	816	Breast cancer is colorectal cancer.	['All cancers are malignant tumors.', 'No malignant tumor can be treated at home.', 'All colorectal cancer is cancer.', 'Having a cold can be treated at home.', 'Breast cancer is neither having a cold nor a malignant tumor (exclusive).']	['∀x (Cancer(x) → MalignantTumor(x))', '∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))', '∀x (ColorectalCancer(x) → Cancer(x))', '∀x (HavingACold(x) → CanBeTreatedAtHome(x))', '¬(HavingACold(breastCancer) ⊕ MalignantTumor(breastCancer))']	False	hyb
320	817	Breast cancer is not colorectal cancer.	['All cancers are malignant tumors.', 'No malignant tumor can be treated at home.', 'All colorectal cancer is cancer.', 'Having a cold can be treated at home.', 'Breast cancer is neither having a cold nor a malignant tumor (exclusive).']	['∀x (Cancer(x) → MalignantTumor(x))', '∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))', '∀x (ColorectalCancer(x) → Cancer(x))', '∀x (HavingACold(x) → CanBeTreatedAtHome(x))', '¬(HavingACold(breastCancer) ⊕ MalignantTumor(breastCancer))']	True	hyb
320	818	Breast cancer is colorectal cancer or a malignant tumor.	['All cancers are malignant tumors.', 'No malignant tumor can be treated at home.', 'All colorectal cancer is cancer.', 'Having a cold can be treated at home.', 'Breast cancer is neither having a cold nor a malignant tumor (exclusive).']	['∀x (Cancer(x) → MalignantTumor(x))', '∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))', '∀x (ColorectalCancer(x) → Cancer(x))', '∀x (HavingACold(x) → CanBeTreatedAtHome(x))', '¬(HavingACold(breastCancer) ⊕ MalignantTumor(breastCancer))']	False	hyb
320	819	Breast cancer is colorectal cancer and a cancer.	['All cancers are malignant tumors.', 'No malignant tumor can be treated at home.', 'All colorectal cancer is cancer.', 'Having a cold can be treated at home.', 'Breast cancer is neither having a cold nor a malignant tumor (exclusive).']	['∀x (Cancer(x) → MalignantTumor(x))', '∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))', '∀x (ColorectalCancer(x) → Cancer(x))', '∀x (HavingACold(x) → CanBeTreatedAtHome(x))', '¬(HavingACold(breastCancer) ⊕ MalignantTumor(breastCancer))']	False	hyb
320	820	If breast cancer is not colorectal cancer, then breast cancer is a malignant tumor.	['All cancers are malignant tumors.', 'No malignant tumor can be treated at home.', 'All colorectal cancer is cancer.', 'Having a cold can be treated at home.', 'Breast cancer is neither having a cold nor a malignant tumor (exclusive).']	['∀x (Cancer(x) → MalignantTumor(x))', '∀x (MalignantTumor(x) → ¬CanBeTreatedAtHome(x))', '∀x (ColorectalCancer(x) → Cancer(x))', '∀x (HavingACold(x) → CanBeTreatedAtHome(x))', '¬(HavingACold(breastCancer) ⊕ MalignantTumor(breastCancer))']	False	hyb
303	752	I should not worry about traffic.	['I should not worry about things outside of my control.', 'Traffic is outside of my control.']	['∀x (OutsideControl(x) → ¬ShouldWorry(x))', '∀x (Traffic(x) → OutsideControl(x))']	True	wiki
113	342	Alba Roversi uses an Italian surname.	['Roversi is an Italian surname.', 'Alba Roversi uses Roversi as a surname.', 'Paolo Roversi uses Roversi as a surname.', 'Roberto Roversi uses Roversi as a surname.', 'Paolo Roversi is a photographer.', 'A photographer is a professional or an amateur.']	['∀x (UseAsSurname(x, roversi) → UseItalianSurname(x))', 'UseAsSurname(alba, roversi)', 'UseAsSurname(paolo, roversi)', 'UseAsSurname(roberto, roversi)', 'Photographer(paolo)', '∀x (Photographer(x) → Professional(x) ∨ Amateur(x))']	True	wiki
113	343	There are no photographers using an Italian surname.	['Roversi is an Italian surname.', 'Alba Roversi uses Roversi as a surname.', 'Paolo Roversi uses Roversi as a surname.', 'Roberto Roversi uses Roversi as a surname.', 'Paolo Roversi is a photographer.', 'A photographer is a professional or an amateur.']	['∀x (UseAsSurname(x, roversi) → UseItalianSurname(x))', 'UseAsSurname(alba, roversi)', 'UseAsSurname(paolo, roversi)', 'UseAsSurname(roberto, roversi)', 'Photographer(paolo)', '∀x (Photographer(x) → Professional(x) ∨ Amateur(x))']	False	wiki
113	344	Paolo is an amateur photographer.	['Roversi is an Italian surname.', 'Alba Roversi uses Roversi as a surname.', 'Paolo Roversi uses Roversi as a surname.', 'Roberto Roversi uses Roversi as a surname.', 'Paolo Roversi is a photographer.', 'A photographer is a professional or an amateur.']	['∀x (UseAsSurname(x, roversi) → UseItalianSurname(x))', 'UseAsSurname(alba, roversi)', 'UseAsSurname(paolo, roversi)', 'UseAsSurname(roberto, roversi)', 'Photographer(paolo)', '∀x (Photographer(x) → Professional(x) ∨ Amateur(x))']	Unknown	wiki
237	677	Hadid became a UK citizen later in her life.	['Zaha Hadid is a British-Iraqi architect, artist and designer.', 'Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.', 'Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.', 'Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. ']	['British-IraqiArchitect(zahaHadid)', 'BornIn(zahaHadid, y1950)', 'Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)', 'AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)']	True	wiki
237	678	Hadid did some work in interior design.	['Zaha Hadid is a British-Iraqi architect, artist and designer.', 'Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.', 'Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.', 'Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. ']	['British-IraqiArchitect(zahaHadid)', 'BornIn(zahaHadid, y1950)', 'Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)', 'AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)']	Unknown	wiki
237	679	Hadid was born in 1982.	['Zaha Hadid is a British-Iraqi architect, artist and designer.', 'Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.', 'Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.', 'Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. ']	['British-IraqiArchitect(zahaHadid)', 'BornIn(zahaHadid, y1950)', 'Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)', 'AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)']	Unknown	wiki
237	680	Max admires Zaha Hadid.	['Zaha Hadid is a British-Iraqi architect, artist and designer.', 'Zaha Hadid was born on 31 October 1950 in Baghdad, Iraq.', 'Hadid was a visiting professor of Architectural Design at the Yale School of Architecture.', 'Max is an aspiring architecture student, and he plans to apply to Yale School of Architecture. ']	['British-IraqiArchitect(zahaHadid)', 'BornIn(zahaHadid, y1950)', 'Visitingprofessor(zahaHadid, yaleSchoolofArchitecture)', 'AspiringArchitectureStudent(max) ∧ PlansToApplyTo(max, yaleSchoolofArchitecture)']	Unknown	wiki
396	1081	FMRI provides a spatial resolution of brains.	['Something is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. ', 'All noninvasive neuroimaging techniques provide a spatial resolution of brains.', 'If a technique provides a spatial resolution of brains, then it is a measurement of brain activity. ', 'All measurements of brain activity are used by neuroscience researchers.', 'FMRI is either a measurement of brain activity or a noninvasive neuroimaging technique.']	['∀x (InvasiveNeuroimagingTechnique(x) ∨ NoninvasiveNeuroimagingTechnique(x)) ', ' ∀x (NoninvasiveNeuroimagingTechnique(x) → ProvidesSpatialResolutionOfBrains(x)) ', ' ∀x (ProvidesSpatialResolutionOfBrains(x) → MeasurementOfBrainActivity(x)) ', ' ∀x (MeasurementOfBrainActivity(x) → UsedByNeuroscienceResearchers(x))', ' MeasurementOfBrainActivity(fMRI) ⊕ NoninvasiveNeuroimagingTechnique(fMRI)']	Unknown	hyb
396	1082	FMRI is an invasive neuroimaging technique and is used by neuroscience researchers.	['Something is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. ', 'All noninvasive neuroimaging techniques provide a spatial resolution of brains.', 'If a technique provides a spatial resolution of brains, then it is a measurement of brain activity. ', 'All measurements of brain activity are used by neuroscience researchers.', 'FMRI is either a measurement of brain activity or a noninvasive neuroimaging technique.']	['∀x (InvasiveNeuroimagingTechnique(x) ∨ NoninvasiveNeuroimagingTechnique(x)) ', ' ∀x (NoninvasiveNeuroimagingTechnique(x) → ProvidesSpatialResolutionOfBrains(x)) ', ' ∀x (ProvidesSpatialResolutionOfBrains(x) → MeasurementOfBrainActivity(x)) ', ' ∀x (MeasurementOfBrainActivity(x) → UsedByNeuroscienceResearchers(x))', ' MeasurementOfBrainActivity(fMRI) ⊕ NoninvasiveNeuroimagingTechnique(fMRI)']	True	hyb
396	1083	FMRI is either an invasive neuroimaging technique or is used by neuroscience researchers.	['Something is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. ', 'All noninvasive neuroimaging techniques provide a spatial resolution of brains.', 'If a technique provides a spatial resolution of brains, then it is a measurement of brain activity. ', 'All measurements of brain activity are used by neuroscience researchers.', 'FMRI is either a measurement of brain activity or a noninvasive neuroimaging technique.']	['∀x (InvasiveNeuroimagingTechnique(x) ∨ NoninvasiveNeuroimagingTechnique(x)) ', ' ∀x (NoninvasiveNeuroimagingTechnique(x) → ProvidesSpatialResolutionOfBrains(x)) ', ' ∀x (ProvidesSpatialResolutionOfBrains(x) → MeasurementOfBrainActivity(x)) ', ' ∀x (MeasurementOfBrainActivity(x) → UsedByNeuroscienceResearchers(x))', ' MeasurementOfBrainActivity(fMRI) ⊕ NoninvasiveNeuroimagingTechnique(fMRI)']	False	hyb
396	1084	If fMRI is not an invasive neuroimaging technique and used by neuroscience researchers, then fMRI is neither a noninvasive neuroimaging technique nor provides a spatial resolution of brains.	['Something is either an invasive neuroimaging technique or a noninvasive neuroimaging technique. ', 'All noninvasive neuroimaging techniques provide a spatial resolution of brains.', 'If a technique provides a spatial resolution of brains, then it is a measurement of brain activity. ', 'All measurements of brain activity are used by neuroscience researchers.', 'FMRI is either a measurement of brain activity or a noninvasive neuroimaging technique.']	['∀x (InvasiveNeuroimagingTechnique(x) ∨ NoninvasiveNeuroimagingTechnique(x)) ', ' ∀x (NoninvasiveNeuroimagingTechnique(x) → ProvidesSpatialResolutionOfBrains(x)) ', ' ∀x (ProvidesSpatialResolutionOfBrains(x) → MeasurementOfBrainActivity(x)) ', ' ∀x (MeasurementOfBrainActivity(x) → UsedByNeuroscienceResearchers(x))', ' MeasurementOfBrainActivity(fMRI) ⊕ NoninvasiveNeuroimagingTechnique(fMRI)']	True	hyb
437	1258	James is provided with souvenirs.	['Either present their work at the conference or provide a tutorial session at the conference. ', 'All who present their work at the conference will attend in person. ', 'All those providing a tutorial session at the conference are invited to join the club. ', 'All who attend the conference in person are provided with souvenirs. ', 'All invited to join the club are provided with delicious meals. ', 'All provided with delicious meals are happy to communicate with each other during the dinner. ', 'All provided with delicious meals are invited to take a photo with the audience. ', 'James does not attend the conference in person and is not provided with souvenirs.']	['∀x ( Present(x) ∨ Tutorial(x))', '∀x (Present(x) → InPerson(x))', '∀x (Tutorial(x) → Invited(x))', '∀x (InPerson(x) → Souvenirs(x))', '∀x (Invited(x) → Meals(x))', '∀x (Meals(x) → HappyCommunicate(x))', '∀x (Meals(x) → InvitedTakePhoto(x))', '¬(InPerson(james) ∧ Souvenirs(james))']	Unknown	hyb
437	1259	James is not provided with souvenirs.	['Either present their work at the conference or provide a tutorial session at the conference. ', 'All who present their work at the conference will attend in person. ', 'All those providing a tutorial session at the conference are invited to join the club. ', 'All who attend the conference in person are provided with souvenirs. ', 'All invited to join the club are provided with delicious meals. ', 'All provided with delicious meals are happy to communicate with each other during the dinner. ', 'All provided with delicious meals are invited to take a photo with the audience. ', 'James does not attend the conference in person and is not provided with souvenirs.']	['∀x ( Present(x) ∨ Tutorial(x))', '∀x (Present(x) → InPerson(x))', '∀x (Tutorial(x) → Invited(x))', '∀x (InPerson(x) → Souvenirs(x))', '∀x (Invited(x) → Meals(x))', '∀x (Meals(x) → HappyCommunicate(x))', '∀x (Meals(x) → InvitedTakePhoto(x))', '¬(InPerson(james) ∧ Souvenirs(james))']	Unknown	hyb
437	1260	James is invited to take a photo with the audience and is happy to communicate with each other at the dinner.	['Either present their work at the conference or provide a tutorial session at the conference. ', 'All who present their work at the conference will attend in person. ', 'All those providing a tutorial session at the conference are invited to join the club. ', 'All who attend the conference in person are provided with souvenirs. ', 'All invited to join the club are provided with delicious meals. ', 'All provided with delicious meals are happy to communicate with each other during the dinner. ', 'All provided with delicious meals are invited to take a photo with the audience. ', 'James does not attend the conference in person and is not provided with souvenirs.']	['∀x ( Present(x) ∨ Tutorial(x))', '∀x (Present(x) → InPerson(x))', '∀x (Tutorial(x) → Invited(x))', '∀x (InPerson(x) → Souvenirs(x))', '∀x (Invited(x) → Meals(x))', '∀x (Meals(x) → HappyCommunicate(x))', '∀x (Meals(x) → InvitedTakePhoto(x))', '¬(InPerson(james) ∧ Souvenirs(james))']	True	hyb
437	1261	James is invited to take a photo with the audience or is happy to communicate with each other during the dinner.	['Either present their work at the conference or provide a tutorial session at the conference. ', 'All who present their work at the conference will attend in person. ', 'All those providing a tutorial session at the conference are invited to join the club. ', 'All who attend the conference in person are provided with souvenirs. ', 'All invited to join the club are provided with delicious meals. ', 'All provided with delicious meals are happy to communicate with each other during the dinner. ', 'All provided with delicious meals are invited to take a photo with the audience. ', 'James does not attend the conference in person and is not provided with souvenirs.']	['∀x ( Present(x) ∨ Tutorial(x))', '∀x (Present(x) → InPerson(x))', '∀x (Tutorial(x) → Invited(x))', '∀x (InPerson(x) → Souvenirs(x))', '∀x (Invited(x) → Meals(x))', '∀x (Meals(x) → HappyCommunicate(x))', '∀x (Meals(x) → InvitedTakePhoto(x))', '¬(InPerson(james) ∧ Souvenirs(james))']	True	hyb
437	1262	James is either invited to take a photo with the audience or happy to communicate with each other during the dinner.	['Either present their work at the conference or provide a tutorial session at the conference. ', 'All who present their work at the conference will attend in person. ', 'All those providing a tutorial session at the conference are invited to join the club. ', 'All who attend the conference in person are provided with souvenirs. ', 'All invited to join the club are provided with delicious meals. ', 'All provided with delicious meals are happy to communicate with each other during the dinner. ', 'All provided with delicious meals are invited to take a photo with the audience. ', 'James does not attend the conference in person and is not provided with souvenirs.']	['∀x ( Present(x) ∨ Tutorial(x))', '∀x (Present(x) → InPerson(x))', '∀x (Tutorial(x) → Invited(x))', '∀x (InPerson(x) → Souvenirs(x))', '∀x (Invited(x) → Meals(x))', '∀x (Meals(x) → HappyCommunicate(x))', '∀x (Meals(x) → InvitedTakePhoto(x))', '¬(InPerson(james) ∧ Souvenirs(james))']	False	hyb
14	38	The USS Salem is open to the public.	['The USS Salem is a heavy cruiser built for the United States navy.', 'The last heavy cruiser to enter service was the USS Salem.', 'The USS Salem is a museum ship.', 'Museum ships are open to the public.', 'The USS Salem served in the Atlantic and Mediterranean.']	['HeavyCruiser(usssalem) ∧ BuiltFor(usssalem, unitedstatesnavy)', 'LastHeavyCruiserToEnterService(usssalem)', 'MuseumShip(usssalem)', '∀x (MuseumShip(x) → OpenToPublic(x))', 'ServedIn(usssalem, atlantic) ∧ ServedIn(usssalem, mediterranean)']	True	wiki
14	39	There is a museum ship open to the public that served in the Mediterranean.	['The USS Salem is a heavy cruiser built for the United States navy.', 'The last heavy cruiser to enter service was the USS Salem.', 'The USS Salem is a museum ship.', 'Museum ships are open to the public.', 'The USS Salem served in the Atlantic and Mediterranean.']	['HeavyCruiser(usssalem) ∧ BuiltFor(usssalem, unitedstatesnavy)', 'LastHeavyCruiserToEnterService(usssalem)', 'MuseumShip(usssalem)', '∀x (MuseumShip(x) → OpenToPublic(x))', 'ServedIn(usssalem, atlantic) ∧ ServedIn(usssalem, mediterranean)']	True	wiki
14	40	The USS Salem was not the last heavy cruiser to enter service.	['The USS Salem is a heavy cruiser built for the United States navy.', 'The last heavy cruiser to enter service was the USS Salem.', 'The USS Salem is a museum ship.', 'Museum ships are open to the public.', 'The USS Salem served in the Atlantic and Mediterranean.']	['HeavyCruiser(usssalem) ∧ BuiltFor(usssalem, unitedstatesnavy)', 'LastHeavyCruiserToEnterService(usssalem)', 'MuseumShip(usssalem)', '∀x (MuseumShip(x) → OpenToPublic(x))', 'ServedIn(usssalem, atlantic) ∧ ServedIn(usssalem, mediterranean)']	False	wiki
141	415	TS Leda was quiet and good at sea.	['TS Leda was a good passenger and cargo vessel.', 'TS Leda was the first Norweigian vessel that was built with stabilizers.', 'Stabilizers are mechanical devices that are only on ships that have powerful steam turbine engines.', ' To be a good passenger and cargo vessel, ships must be quiet and good at sea.', 'Some ships that are quiet and good at sea have powerful steam turbine engines.']	['∀x (TSLeda(x) → Passenger(x) ∧ CargoVessel(x))', '∀x (TSLeda(x) → Norweigian(x) ∧ Stabilizers(x))', '∀x (Stabilizers(x) → OnlyOnShips(x) ∧ SteamTurbine(x))', '∀x (Passenger(x) ∧ CargoVessel(x) → Quiet(x) ∧ GoodSea(x))', '∃x (Quiet(x) ∧ GoodSea(x) ∧ SteamTurbine(x))']	True	wiki
141	416	TS Leda had powerful steam turbine engines.	['TS Leda was a good passenger and cargo vessel.', 'TS Leda was the first Norweigian vessel that was built with stabilizers.', 'Stabilizers are mechanical devices that are only on ships that have powerful steam turbine engines.', ' To be a good passenger and cargo vessel, ships must be quiet and good at sea.', 'Some ships that are quiet and good at sea have powerful steam turbine engines.']	['∀x (TSLeda(x) → Passenger(x) ∧ CargoVessel(x))', '∀x (TSLeda(x) → Norweigian(x) ∧ Stabilizers(x))', '∀x (Stabilizers(x) → OnlyOnShips(x) ∧ SteamTurbine(x))', '∀x (Passenger(x) ∧ CargoVessel(x) → Quiet(x) ∧ GoodSea(x))', '∃x (Quiet(x) ∧ GoodSea(x) ∧ SteamTurbine(x))']	True	wiki
141	417	TS Leda was not a Norweigian vessel.	['TS Leda was a good passenger and cargo vessel.', 'TS Leda was the first Norweigian vessel that was built with stabilizers.', 'Stabilizers are mechanical devices that are only on ships that have powerful steam turbine engines.', ' To be a good passenger and cargo vessel, ships must be quiet and good at sea.', 'Some ships that are quiet and good at sea have powerful steam turbine engines.']	['∀x (TSLeda(x) → Passenger(x) ∧ CargoVessel(x))', '∀x (TSLeda(x) → Norweigian(x) ∧ Stabilizers(x))', '∀x (Stabilizers(x) → OnlyOnShips(x) ∧ SteamTurbine(x))', '∀x (Passenger(x) ∧ CargoVessel(x) → Quiet(x) ∧ GoodSea(x))', '∃x (Quiet(x) ∧ GoodSea(x) ∧ SteamTurbine(x))']	False	wiki
194	555	Rosa was born in the largest city of Chile.	['Rosa was born in Santiago. ', 'Santiago is the capital and largest city of Chile.', 'Rosa is the daughter of a Catalan building contractor, Jose.', 'Jose has a Chilean wife, Carmen.', 'A building contractor is responsible for the day-to-day oversight of a construction site. ']	['Born(rosa, santiago)', 'Capital(santiago, chile) ∧ LargestCity(santiago, chile)', 'Daughter(rosa, jose) ∧ BuildingContractor(jose) ∧ ¬Chilean(jose)', 'Wife(jose, carmen) ∧ Chilean(carmen)', '∀x ∃y (BuildingContractor(x) ∧ ConstructionSite(y) → Oversee(x, y))']	True	wiki
194	556	Neither of Rosa's parents is Chilean.	['Rosa was born in Santiago. ', 'Santiago is the capital and largest city of Chile.', 'Rosa is the daughter of a Catalan building contractor, Jose.', 'Jose has a Chilean wife, Carmen.', 'A building contractor is responsible for the day-to-day oversight of a construction site. ']	['Born(rosa, santiago)', 'Capital(santiago, chile) ∧ LargestCity(santiago, chile)', 'Daughter(rosa, jose) ∧ BuildingContractor(jose) ∧ ¬Chilean(jose)', 'Wife(jose, carmen) ∧ Chilean(carmen)', '∀x ∃y (BuildingContractor(x) ∧ ConstructionSite(y) → Oversee(x, y))']	False	wiki
194	557	Rosa is the daughter of someone who is responsible for the oversight of traffic.	['Rosa was born in Santiago. ', 'Santiago is the capital and largest city of Chile.', 'Rosa is the daughter of a Catalan building contractor, Jose.', 'Jose has a Chilean wife, Carmen.', 'A building contractor is responsible for the day-to-day oversight of a construction site. ']	['Born(rosa, santiago)', 'Capital(santiago, chile) ∧ LargestCity(santiago, chile)', 'Daughter(rosa, jose) ∧ BuildingContractor(jose) ∧ ¬Chilean(jose)', 'Wife(jose, carmen) ∧ Chilean(carmen)', '∀x ∃y (BuildingContractor(x) ∧ ConstructionSite(y) → Oversee(x, y))']	True	wiki
36	105	Well Done 3 is a rap album.	['Tyga is a rapper.', 'Rappers release rap albums.', 'Tyga released the Well Done 3 album.', 'Rappers are not opera singers.']	['IsRapper(tyga)', 'ReleasedAlbum(tyga, wellDone3)', '∀x ∀y (IsRapper(x) ∧ ReleasedAlbum(x, y) → IsRapAlbum(y))', '∀x (IsRapper(x) → ¬IsOperaSinger(x))']	True	wiki
36	106	Tyga is an opera singer.	['Tyga is a rapper.', 'Rappers release rap albums.', 'Tyga released the Well Done 3 album.', 'Rappers are not opera singers.']	['IsRapper(tyga)', 'ReleasedAlbum(tyga, wellDone3)', '∀x ∀y (IsRapper(x) ∧ ReleasedAlbum(x, y) → IsRapAlbum(y))', '∀x (IsRapper(x) → ¬IsOperaSinger(x))']	False	wiki
36	107	Well Done 3 is worth listening.	['Tyga is a rapper.', 'Rappers release rap albums.', 'Tyga released the Well Done 3 album.', 'Rappers are not opera singers.']	['IsRapper(tyga)', 'ReleasedAlbum(tyga, wellDone3)', '∀x ∀y (IsRapper(x) ∧ ReleasedAlbum(x, y) → IsRapAlbum(y))', '∀x (IsRapper(x) → ¬IsOperaSinger(x))']	Unknown	wiki
97	293	Gasland was coproduced by the same person Homesick is from.	['Deborah Wallace is a Scottish born actress, playwright and producer.', 'Psyche is a play based on the life of James Miranda Barry.', 'Homesick, Psyche and The Void are plays from Deborah Wallace.', 'Deborah Wallace co-produced Gasland.']	['BornIn(deborahwallace, scotland) ∧ Actress(deborahwallace) ∧ Playwright(deborahwallace) ∧ Producer(deborahwallace)', 'Play(psyche) ∧ BasedOn(psyche, lifeofjamesmirandabarry)', 'Play(homesick) ∧ From(homesick, deborahwallace) ∧ Play(psyche) ∧ From(psyche, deborahwallace) ∧ Play(thevoid) ∧ From(thevoid, deborahwallace)', 'Co-Produced(deborahwallace, gasland)']	True	wiki
97	294	There isn't a play from Deborah Wallace that is based on the life of James Miranda Barry.	['Deborah Wallace is a Scottish born actress, playwright and producer.', 'Psyche is a play based on the life of James Miranda Barry.', 'Homesick, Psyche and The Void are plays from Deborah Wallace.', 'Deborah Wallace co-produced Gasland.']	['BornIn(deborahwallace, scotland) ∧ Actress(deborahwallace) ∧ Playwright(deborahwallace) ∧ Producer(deborahwallace)', 'Play(psyche) ∧ BasedOn(psyche, lifeofjamesmirandabarry)', 'Play(homesick) ∧ From(homesick, deborahwallace) ∧ Play(psyche) ∧ From(psyche, deborahwallace) ∧ Play(thevoid) ∧ From(thevoid, deborahwallace)', 'Co-Produced(deborahwallace, gasland)']	False	wiki
97	295	Gasland is a play.	['Deborah Wallace is a Scottish born actress, playwright and producer.', 'Psyche is a play based on the life of James Miranda Barry.', 'Homesick, Psyche and The Void are plays from Deborah Wallace.', 'Deborah Wallace co-produced Gasland.']	['BornIn(deborahwallace, scotland) ∧ Actress(deborahwallace) ∧ Playwright(deborahwallace) ∧ Producer(deborahwallace)', 'Play(psyche) ∧ BasedOn(psyche, lifeofjamesmirandabarry)', 'Play(homesick) ∧ From(homesick, deborahwallace) ∧ Play(psyche) ∧ From(psyche, deborahwallace) ∧ Play(thevoid) ∧ From(thevoid, deborahwallace)', 'Co-Produced(deborahwallace, gasland)']	Unknown	wiki
449	1297	Larry is a bear.	['If an animal needs a large territory, then it travels far.', 'Everything that eats a lot needs a large territory.', 'If something is a big animal, then it will eat a lot.', 'All bears are big animals.', 'Larry is a big animal.']	['∀x (NeedsLargeTerritory(x) → TravelFar(x))', '∀x (EatsALot(x) → NeedsLargeTerritory(x))', '∀x (BigAnimal(x) → EatsALot(x))', '∀x (Bear(x) → BigAnimal(x))', 'BigAnimal(larry)']	Unknown	hyb
449	1298	Larry is neither a bear nor travels far.	['If an animal needs a large territory, then it travels far.', 'Everything that eats a lot needs a large territory.', 'If something is a big animal, then it will eat a lot.', 'All bears are big animals.', 'Larry is a big animal.']	['∀x (NeedsLargeTerritory(x) → TravelFar(x))', '∀x (EatsALot(x) → NeedsLargeTerritory(x))', '∀x (BigAnimal(x) → EatsALot(x))', '∀x (Bear(x) → BigAnimal(x))', 'BigAnimal(larry)']	False	hyb
449	1299	If Larry either travels far or needs a large territory, then Larry is a bear.	['If an animal needs a large territory, then it travels far.', 'Everything that eats a lot needs a large territory.', 'If something is a big animal, then it will eat a lot.', 'All bears are big animals.', 'Larry is a big animal.']	['∀x (NeedsLargeTerritory(x) → TravelFar(x))', '∀x (EatsALot(x) → NeedsLargeTerritory(x))', '∀x (BigAnimal(x) → EatsALot(x))', '∀x (Bear(x) → BigAnimal(x))', 'BigAnimal(larry)']	True	hyb
461	1335	Garry is ugly.	['No criminal is kind. ', 'All person who breaks the law is a criminals.', 'People are either kind or evil.', 'If someone is evil, then they are ugly.', 'If someone is evil, then they are cold-blood.', 'If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil.']	['∀x (Criminal(x) → ¬Kind(x))', '∀x (BreakLaw(x) → Criminal(x))', '∀x (Kind(x) ⊕ Evil(x))', '∀x (Evil(x) → Ugly(x))', '∀x (Evil(x) → ColdBlood(x))', '((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)']	Unknown	hyb
461	1336	Garry is cold-blooded and breaks the law.	['No criminal is kind. ', 'All person who breaks the law is a criminals.', 'People are either kind or evil.', 'If someone is evil, then they are ugly.', 'If someone is evil, then they are cold-blood.', 'If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil.']	['∀x (Criminal(x) → ¬Kind(x))', '∀x (BreakLaw(x) → Criminal(x))', '∀x (Kind(x) ⊕ Evil(x))', '∀x (Evil(x) → Ugly(x))', '∀x (Evil(x) → ColdBlood(x))', '((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)']	False	hyb
461	1337	If Garry is evil or breaks the law, then Garry is not both a criminal and breaking the law.	['No criminal is kind. ', 'All person who breaks the law is a criminals.', 'People are either kind or evil.', 'If someone is evil, then they are ugly.', 'If someone is evil, then they are cold-blood.', 'If Garry is either evil and ugly or neither evil nor ugly, then Garry is not evil.']	['∀x (Criminal(x) → ¬Kind(x))', '∀x (BreakLaw(x) → Criminal(x))', '∀x (Kind(x) ⊕ Evil(x))', '∀x (Evil(x) → Ugly(x))', '∀x (Evil(x) → ColdBlood(x))', '((Evil(garry) ∧ Ugly(garry)) ⊕ (¬Evil(garry) ∧ ¬Ugly(garry))) → ¬Evil(garry)']	True	hyb
136	402	Phoenix makes pop rock music.	["Phoneix's music is classified under the indie pop genre.", 'Phoenix is a band from France.', 'French bands write songs in French or in English.', 'Aside from indie pop, pop rock and synth-pop are two other genres of music.', 'Phoneix has no songs in French.']	['IndiePop(phoenix)', 'Band(phoenix) ∧ France(phoenix)', '∀x ∀y (Band(x) ∧ France(x) ∧ Make(x, y) → FrenchSong(y) ⊕ EnglishSong(y))', '∀x (IndiePop(x) → ¬PopRock(x) ∧ ¬SynthPop(x))', '∀x (Make(phoenix, x) → ¬FrenchSong(x))']	False	wiki
136	403	Phoenix has songs in French.	["Phoneix's music is classified under the indie pop genre.", 'Phoenix is a band from France.', 'French bands write songs in French or in English.', 'Aside from indie pop, pop rock and synth-pop are two other genres of music.', 'Phoneix has no songs in French.']	['IndiePop(phoenix)', 'Band(phoenix) ∧ France(phoenix)', '∀x ∀y (Band(x) ∧ France(x) ∧ Make(x, y) → FrenchSong(y) ⊕ EnglishSong(y))', '∀x (IndiePop(x) → ¬PopRock(x) ∧ ¬SynthPop(x))', '∀x (Make(phoenix, x) → ¬FrenchSong(x))']	False	wiki
